{"version":3,"sources":["arrays.js","sort_words.js","sort_strings/sort_strings_by_extension.js","sort_strings/sort_strings_by_length_asc.js","sort_strings/sort_strings_by_length_and_position.js","sort_strings/sort_strings_by_matches_in_list.js","sort_strings/sort_strings_by_rating.js","sort_strings/sort_strings_by_rating_and_position.js","sort_strings/sort_strings_combine_lists.js","sort_strings.js","sort_objects/sort_objects_by_property.js","sort_objects/sort_objects_by_property_and_position.js","sort_objects.js","strings.js","../../../../../../usr/local/lib/node_modules/parcel/node_modules/process/browser.js","cli.js","curry.js","numbers.js","objects.js","promises.js","req.js","string.js","urls.js","requests.js","json.js","ui.js","words.js","index.js","etc.js"],"names":["arr_mix","arrays","master_list","max_length","arr","Math","max","length","index","push","arr_length","arr_from_value","value","len","i","arrays_diff","a","b","combined","concat","filter","el","includes","arr_subtract","arr_remove_item","item","it","arr_includes","arr_truthy_values","val","window","func","__","exports","sort_strings_by_length","desc","sort_func","help_sort_strings_by_length","bind","sort","sort_strings_by_width","help_sort_strings_by_width","toString","a_width","str_width","JSON","stringify","b_width","str","width","char","char_width_plus","toLowerCase","glyph_width_plus","sort_strings_by_extension","endings","immutable","sort_strings_by_extension__helper","a_score","indexOf","substr","sort_strings_by_length_asc","sort_strings_by_length_and_position","prefer_position","fix_min_length","ascending","arr_positions","that","min_length","min_position","max_position","delta_position","delta_length","sort_strings_by_length_and_position_asc__helper","e","console","error","a_length","b_length","a_rating_length","b_rating_length","sort_strings_by_matches_in_list","matchList","ratings","string","replace","count","word","sort_strings_by_matches_in_list__helper","b_score","sort_strings_by_rating","preferences","sort_strings_by_rating__helper","a_rating","b_rating","sort_strings_by_rating_and_position","multiply_position","rate","min_rating","max_rating","delta_rating","median_rating","min_index","max_index","indexes","delta_index","sort_strings_by_rating_and_position__helper","a_index","sort_strings_combine_lists","arr1","arr2","list","Set","ai","arguments","y","add","_sort_strings_by_extension","_sort_strings_by_length_and_position","_sort_strings_by_length_asc","_sort_strings_by_matches_in_list","_sort_strings_by_rating","_sort_strings_by_rating_and_position","_sort_strings_combine_lists","sort_objects_by_property","prop1_key","prop1_asc","sort_objects_by_property__helper","rating_key","obj","_sort_objects_by_property","sort_objects_by_property_and_position","_sort_objects_by_property_and_position","matrix_flatten_to_strings","matrix","result","allCasesOfRest","slice","j","strings_shuffle_last_strict","strs","output","prev_ll","prev_strs_length","ll","splice","strings_shuffle_first_last_strict","prev_fl","fl","strings_shuffle_last","input_strs","memory_strs","unique_strs","loops","old_strs","infinite_loop","new_strs","unique_str","unique_str_ll","unique_str2","unique_str2_ll","str_ll","shift","strings_shuffle_first_last","unique_str_fl","unique_str2_fl","str_fl","strings_shuffle_last3_strict","strings_shuffle_first_last_loose","unique_str3","unique_str3_fl","unique_str3_ll","strings_shuffle_last3","strings_shuffle_first3","strings_shuffle_first2","cachedSetTimeout","cachedClearTimeout","process","module","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","Item","array","noop","nextTick","args","Array","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","parse_cli_args","split","call_later","average","values","sum","reduce","previous","current","mean","lowMiddle","floor","highMiddle","ceil","is_number","variable","Number","isNaN","objects_are_equal","obj1","obj2","object_keys_from_array_values","obj_first_value","key","obj_first_entry","obj_is_empty","prop","Object","hasOwnProperty","json_parse","parse","obj_merge","keys","obj1v","obj2v","isArray","sleep","ms","Promise","r","for_each_promise_all","fn","all","map","aggregate_req_body_query","req","query","body","decodeURIComponent","trim","str_hash","hash","charCodeAt","str_capitalize","charAt","toUpperCase","str_sanitize_loosely","str_sanitize_strictly","str_insert","insert","substring","str_trim_char","s","c","RegExp","str_trim_non_alpha","str_syllables_count","match","querystring_from_object","params","qs","k","encodeURIComponent","join","object_from_querystring","pairs","pair","tuple","querystring_replace_key_value","queryString","decodeURI","entries","load_script","source","beforeEl","scriptAttrs","document","resolve","reject","script","createElement","async","defer","onloadHander","_","isAbort","readyState","test","onload","onreadystatechange","undefined","src","append","parse_error_message","response","content","data","errors","warnings","warning","message","http_get","url","fetch","method","mode","cache","credentials","headers","redirect","referrer","then","json","http_post","http_put","jss","jsp","is_retina","matchMedia","matches","syllable_count","original","syllables","w","is_vowel","ends_in_vowel","sort_objects","sort_strings","sort_words","strings","cli","curry","functions","numbers","objects","promises","requests","ui","urls","words","_map","type","try_catch","tryCode","catchAction","err","cconsole","exit"],"mappings":";AAkIC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAAA,QAAA,WAAA,EAAA,QAAA,eAAA,EAAA,QAAA,YAAA,EAAA,QAAA,aAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,aAAA,EAAA,QAAA,kBAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA1HM,SAASA,EAASC,GACnBC,IAD2B,EAC3BA,EAAc,GAEdC,EAAa,EACDF,EAAAA,EAAAA,GAJe,IAIP,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAfG,IAAAA,EAAe,EAAA,MACtBD,EAAaE,KAAKC,IAAIF,EAAIG,OAAQJ,IALL,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAWxB,IADHK,IAAAA,EAAQ,IACC,CAEKP,IAFL,EAEKA,EAAAA,EAAAA,GAFL,IAEa,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAfG,IAAAA,EAAe,EAAA,MAClBA,EAAII,IAENN,EAAYO,KAAKL,EAAII,KALd,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAWPA,KADJA,GACaL,EACX,MAGGD,OAAAA,EASF,SAASQ,EAAYN,GACnBA,OAAAA,GAAOA,EAAIG,OAASH,EAAIG,OAAS,EAMnC,SAASI,EAAgBC,EAAOC,GAEhC,IADDT,IAAAA,EAAM,GACDU,EAAI,EAAGA,EAAID,EAAKC,IACvBV,EAAIK,KAAKG,GAEJR,OAAAA,EAaF,SAASW,IAAaC,IAAAA,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAE5BC,OADQF,EAAEG,OAAOF,GACRG,OAAQ,SAAAC,GACjB,IAACL,EAAEM,SAASD,KAAQJ,EAAEK,SAASD,GAClC,OAAOA,IAWN,SAASE,IAAcP,IAAAA,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC7BD,OAAAA,EAAEI,OAAO,SAAUN,GACjB,OAACG,EAAEK,SAASR,KAOhB,SAASU,IAAiBpB,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIqB,EAAK,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACrCrB,OAAAA,EAAIgB,OAAO,SAAAM,GAAIA,OAAAA,IAAKD,IAStB,SAASE,EAAcX,EAAGC,GACxBD,OAAAA,EAAEI,OAAO,SAAUN,GACjBG,OAAAA,EAAEK,SAASR,KASf,SAASc,EAAmBxB,GAC1BA,OAAAA,EAAIgB,OAAO,SAACS,GAAQ,QAAEA,IAO/B,GAAsB,YAAXC,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACiB7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,QAAA,4BAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAnIM,IAAMG,EAAyB,SAAU9B,GAAK+B,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACvDC,EAAYC,EAA4BC,KAAK,CAACH,KAAAA,IAC3C/B,OAAAA,EAAImC,KAAKH,IAiIhB,QAAA,uBAAA,EAlHM,IAAMI,EAAwB,SAAUpC,GAAK+B,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACtDC,EAAYK,EAA2BH,KAAK,CAACH,KAAAA,IAC1C/B,OAAAA,EAAImC,KAAKH,IAajB,SAASC,EAA4BrB,EAAGC,GAEnCkB,OADO,KAAKA,KAERlB,EAAEyB,WAAWnC,OAASS,EAAE0B,WAAWnC,OAEpCS,EAAE0B,WAAWnC,OAASU,EAAEyB,WAAWnC,OAS3C,SAASkC,EAA2BzB,EAAGC,GAClCkB,IAAAA,EAAO,KAAKA,KACZQ,EAAUC,EAAUC,KAAKC,UAAU9B,GAAK,KACxC+B,EAAUH,EAAUC,KAAKC,UAAU7B,GAAK,KACxCkB,OAAAA,EACIY,EAAUJ,EAEXA,EAAUI,EASlB,SAASH,EAAUI,GAEdC,IAFmB,EAEnBA,EAAQ,EACKD,EAAAA,EAFjBA,GAAOA,GAAO,IAAIN,YADK,IAGD,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAbQ,IAAAA,EAAa,EAAA,MACrBD,GAASE,EAAgBD,EAAKE,gBAAkB,IAJ1B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAMhBH,OAAAA,EA+DP,QAAA,sBAAA,EAtDD,IAAMI,EAAmB,GACnBF,EAAkB,CAClB,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAQN,GAAsB,YAAXrB,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACxH7B,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAVc,SAASuB,EAA0BlD,EAAKmD,GAASC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACrE,OAACpD,GACDoD,IAAWpD,EAAUA,EAAAA,IAClBA,EAAImC,KAAKkB,EAAkCnB,KAAKiB,KAFtC,GAKlB,SAASE,EAAkCzC,EAAGC,GAGtCyC,OAFO,KAAKC,QAAQ3C,EAAE4C,OAAO5C,EAAE2C,QAAQ,KAAO,IACvC,KAAKA,QAAQ1C,EAAE2C,OAAO3C,EAAE0C,QAAQ,KAAO,IAErD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACHA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EARc,SAASE,EAA2BzD,GAAK+B,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAAOqB,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC1E,OAACpD,GACDoD,IAAWpD,EAAUA,EAAAA,IACrB+B,EACK/B,EAAImC,KAAK,SAACvB,EAAGC,GAAMA,OAAAA,EAAEyB,WAAWnC,OAASS,EAAE0B,WAAWnC,SAEtDH,EAAImC,KAAK,SAACvB,EAAGC,GAAMD,OAAAA,EAAE0B,WAAWnC,OAASU,EAAEyB,WAAWnC,UAL9C,GAOlB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACsDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAtED,IAAA,EAAA,EAAA,QAAA,oCAsEC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA1Dc,SAASuD,EAAoC1D,GAAK2D,IAAAA,EAAkB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAiB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGR,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC/G,IAACpD,EAAK,MAAO,GACboD,IAAWpD,EAAUA,EAAAA,IACrB,IAEE6D,IAAAA,GAAY,EAA+B7D,EAAAA,SAAAA,EAAAA,IAC3C,IAAC6D,EAAU,GACN7D,OAAAA,EAGL8D,IAAAA,EAAgB,GACf,IAAA,IAAIpD,KAAKV,EAAK,CAEjB8D,EADa9D,EAAIU,IACOA,EAItBqD,IAAAA,EAAO,CACTC,WAAYH,EAAU,GAAG1D,OACzBJ,WAAY8D,EAAUA,EAAU1D,OAAS,GAAGA,OAC5C8D,aAAc,EACdC,aAAclE,EAAIG,OAClBgE,eAAgBnE,EAAIG,OACpB2D,cAAeA,EACfH,gBAAiBA,GASZ3D,OANH4D,IACFG,EAAKH,eAAiBA,EACtBG,EAAKC,WAAaJ,GAEpBG,EAAKK,aAAeL,EAAKhE,WAAagE,EAAKC,WAEpChE,EAAImC,KAAKkC,EAAgDnC,KAAK6B,IACrE,MAAOO,GAEAtE,OADPuE,QAAQC,MAAM,gEACPxE,GAKX,SAASqE,EAAgDzD,EAAGC,GAEtD4D,IAAAA,EAAW7D,EAAET,OACbuE,EAAW7D,EAAEV,OACb,KAAKyD,iBACHhD,EAAET,OAAS,KAAKyD,iBAAgBa,EAAW,KAAKb,gBAChD/C,EAAEV,OAAS,KAAKyD,iBAAgBc,EAAW,KAAKd,iBAGlDe,IAAAA,GAAoBF,EAAW,KAAKT,YAAc,KAAKI,aACvDQ,GAAoBF,EAAW,KAAKV,YAAc,KAAKI,aAKnDO,OAAAA,GAHkB,KAAKb,cAAclD,GAAK,KAAKqD,cAAgB,KAAKE,eAAkB,KAAKR,iBAGnDiB,GAFtB,KAAKd,cAAcjD,GAAK,KAAKoD,cAAgB,KAAKE,eAAkB,KAAKR;;AClCpG,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAtBc,SAASkB,EAAgC7E,EAAK8E,GAAW1B,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC7E,IAACpD,EAAK,MAAO,GACboD,IAAWpD,EAAUA,EAAAA,IACrB+E,IAHoF,EAGpFA,EAAU,GACE/E,EAAAA,EAAAA,GAJwE,IAInE,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAZ4C,IAAY,EAAZA,EAAY,EAAA,MAChBoC,EAASpC,EAAIqC,QAAQ,cAAe,IACpCC,EAAQ,EACKJ,EAAAA,EAAAA,GAHG,IAGQ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAnBK,IAAAA,EAAmB,EAAA,MACvBH,EAAO9D,SAASiE,KACnBD,IACAF,EAASA,EAAOC,QAAQE,EAAM,MANZ,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IASpBJ,EAAQnC,GAAOsC,GAbwE,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAejFlF,OAAAA,EAAImC,KAAKiD,EAAwClD,KAAK6C,IAG9D,SAASK,EAAwCxE,EAAGC,GAC/CyC,IAAAA,EAAU,KAAK1C,IAAM,EAElByE,OADO,KAAKxE,IAAM,GACRyC,EACjB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACAA,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EApBc,SAASgC,EAAuBtF,EAAKuF,GAAanC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACrE,IAACpD,EAAK,MAAO,GACboD,IAAWpD,EAAUA,EAAAA,IAErB+E,IAJ4E,EAI5EA,EAAU,GACK/E,EAAAA,EAAAA,GAL6D,IAKxD,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAfgF,IAAAA,EAAe,EAAA,MAGtBD,EAAQC,GAAUO,EAAYP,IAAW,GARqC,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAUzEhF,OAAAA,EAAImC,KAAKqD,EAA+BtD,KAAK6C,IAItD,SAASS,EAA+B5E,EAAGC,GACrC4E,IAAAA,EAAW,KAAK7E,GAIb8E,OAHQ,KAAK7E,GAGF4E,EACnB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACiDA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAnEc,SAASE,EACtB3F,EACA+E,GACAa,IAAAA,EAAoB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACpBxC,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAEN,IAACpD,EAAK,MAAO,GACboD,IAAWpD,EAAUA,EAAAA,IACrB+D,IAAAA,EAAO,CAGXA,WAAkB,KAClBA,WAAkB,MAEb,IAAA,IAAInB,KADTmB,EAAKgB,QAAUA,EACCA,EAAS,CACnBc,IAAAA,EAAOd,EAAQnC,IAEK,OAApBmB,EAAK+B,YAAuBD,EAAO9B,EAAK+B,cAC1C/B,EAAK+B,WAAaD,IAEI,OAApB9B,EAAKgC,YAAuBF,EAAO9B,EAAKgC,cAC1ChC,EAAKgC,WAAaF,GAUjB,IAAA,IAAInF,KAPTqD,EAAKiC,aAAejC,EAAKgC,WAAahC,EAAK+B,WAC3C/B,EAAKkC,cAAgBlC,EAAK+B,WAAa/B,EAAKiC,aAAe,EAG3DjC,EAAKmC,UAAY,EACjBnC,EAAKoC,UAAYnG,EAAIG,OAAS,EAC9B4D,EAAKqC,QAAU,GACDpG,EAAK,CAEbgF,IAAAA,EAAShF,EAAIU,GACjBqD,EAAKqC,QAAQpB,GAAUtE,EAMlBV,OAJP+D,EAAKsC,YAActC,EAAKoC,UAAYpC,EAAKmC,UACzCnC,EAAK6B,kBAAoBA,EAGlB5F,EAAImC,KAAKmE,EAA4CpE,KAAK6B,IAInE,SAASuC,EAA4C1F,EAAGC,GAIlD4E,IAAAA,GACD,KAAKO,cACH,KAAKD,iBAAyC,IAApB,KAAKhB,QAAQnE,GAAqB,KAAKmE,QAAQnE,GAAK,KAAKqF,iBACtF,KAAKD,aACHN,GACD,KAAKM,cACH,KAAKD,iBAAyC,IAApB,KAAKhB,QAAQlE,GAAqB,KAAKkE,QAAQlE,GAAK,KAAKoF,iBACtF,KAAKD,aAMHO,GAAY,KAAKJ,UAAY,KAAKC,QAAQxF,IAAM,KAAKyF,YAAe,KAAKT,kBAKtEF,OAAAA,GAJS,KAAKS,UAAY,KAAKC,QAAQvF,IAAM,KAAKwF,YAAe,KAAKT,mBAIhDH,EAAWc,GACzC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACzCA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAhCc,SAASC,EAA2BC,EAAMC,GACnD,IAACD,IAASC,EAAM,MAAO,GACvB,IAACD,GAAQC,EAAM,OAAOA,EACtBD,GAAAA,IAASC,EAAM,OAAOD,EACtBE,IAAAA,EAAO,IAAIC,IAKXC,EAAK,GACJ,IAAA,IAAInG,KAAKoG,UAEZD,EAAGnG,IAAM,EAMN,IAAA,IAAIqG,EAAI,EAAGA,EAAI,GAAIA,IACjB,IAAA,IAAIrG,KAAKoG,UAAW,CACnB9G,IACA4C,EADMkE,UAAUpG,GACNmG,EAAGnG,MACbkC,GACF+D,EAAKK,IAAIpE,GAMJ+D,OAAAA,EAAAA,GAGZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACVA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,2BAAA,QAAA,oCAAA,QAAA,uBAAA,QAAA,gCAAA,QAAA,2BAAA,QAAA,oCAAA,QAAA,+BAAA,EA9BD,IAAA,EAAA,EAAA,QAAA,gDACA,EAAA,EAAA,QAAA,0DACA,EAAA,EAAA,QAAA,iDACA,EAAA,EAAA,QAAA,sDACA,EAAA,EAAA,QAAA,6CACA,EAAA,EAAA,QAAA,0DACA,EAAA,EAAA,QAAA,iDAcA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAtBM,IAAIzD,EAA4B+D,EAAhC,QAsBN,QAAA,0BAAA,EArBM,IAAIvD,EAAsCwD,EAA1C,QAqBN,QAAA,oCAAA,EApBM,IAAIzD,EAA6B0D,EAAjC,QAoBN,QAAA,2BAAA,EAnBM,IAAItC,EAAkCuC,EAAtC,QAmBN,QAAA,gCAAA,EAlBM,IAAI9B,EAAyB+B,EAA7B,QAkBN,QAAA,uBAAA,EAjBM,IAAI1B,EAAsC2B,EAA1C,QAiBN,QAAA,oCAAA,EAhBM,IAAId,EAA6Be,EAAjC,QAOP,GASC,QAAA,2BAAA,EATqB,YAAX7F,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACS7B,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EApBc,SAAS6F,EAAyBxH,EAAKyH,GAAWC,IAAAA,EAAY,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAAOtE,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACxF,OAACpD,GACDoD,IAAWpD,EAAUA,EAAAA,IAClBA,EAAImC,KAAKwF,EAAiCzF,KAAK,CAAElC,IAAAA,EAAKyH,UAAAA,EAAWC,UAAAA,MAFvD,GAKnB,SAASC,EAAiC/G,EAAGC,GAEvC4E,IAAAA,EAAW7E,EAAE,KAAK6G,WAClB/B,EAAW7E,EAAE,KAAK4G,WAElB,OAAA,KAAKC,UAGAjC,EAAWC,EAIXA,EAAWD,EAErB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC8BA,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAvDc,SAAUzF,EAAAA,EAAK4H,GAAYhC,IAAAA,EAAoB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGxC,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACrE,IAACpD,EAAK,MAAO,GACboD,IAAWpD,EAAUA,EAAAA,IACrB+D,IAAAA,EAAO,CAGXA,WAAkB,KAClBA,WAAkB,MAClBA,EAAK6D,WAAaA,EACF5H,IATgE,EAShEA,EAAAA,EAAAA,GATgE,IAS3D,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAZ6H,IACHhC,EADe,EAAA,MACJ+B,IAES,OAApB7D,EAAK+B,YAAuBD,EAAO9B,EAAK+B,cAC1C/B,EAAK+B,WAAaD,IAEI,OAApB9B,EAAKgC,YAAuBF,EAAO9B,EAAKgC,cAC1ChC,EAAKgC,WAAaF,IAhB0D,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAyB3E,IAAA,IAAInF,KANTqD,EAAKiC,aAAejC,EAAKgC,WAAahC,EAAK+B,WAC3C/B,EAAKkC,cAAgBlC,EAAK+B,WAAc/B,EAAKiC,aAAa,EAG1DjC,EAAKmC,UAAY,EACjBnC,EAAKoC,UAAYnG,EAAIG,OAAS,EAChBH,EAEZA,EAAIU,GAAGN,MAAQM,EAMVV,OAJP+D,EAAKsC,YAActC,EAAKoC,UAAYpC,EAAKmC,UACzCnC,EAAK6B,kBAAoBA,EAGlB5F,EAAImC,KAAKmE,EAA4CpE,KAAK6B,IAInE,SAASuC,EAA4C1F,EAAGC,GAKlD4E,IAAAA,GAAY,KAAKO,cAAgB,KAAKD,iBAA0C,IAArBnF,EAAE,KAAKgH,YAA4BhH,EAAE,KAAKgH,YAAc,KAAK3B,iBAAmB,KAAKD,aAChJN,GAAY,KAAKM,cAAgB,KAAKD,iBAA0C,IAArBlF,EAAE,KAAK+G,YAA4B/G,EAAE,KAAK+G,YAAc,KAAK3B,iBAAmB,KAAKD,aAMhJO,GAAY,KAAKJ,UAAYvF,EAAER,OAAS,KAAKiG,YAAe,KAAKT,kBAK7DF,OAAAA,GAJQ,KAAKS,UAAYtF,EAAET,OAAS,KAAKiG,YAAe,KAAKT,mBAItCH,EAAWc,GAC3C,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC7CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sCAAA,QAAA,8BAAA,EApBD,IAAA,EAAA,EAAA,QAAA,+CACA,EAAA,EAAA,QAAA,4DASA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAjBM,IAAIiB,EAA2BM,EAA/B,QAiBN,QAAA,yBAAA,EAhBM,IAAIC,EAAwCC,EAA5C,QAOP,GASC,QAAA,sCAAA,EATqB,YAAXtG,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACwuB7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,QAAA,uBAAA,QAAA,sBAAA,QAAA,iCAAA,QAAA,6BAAA,QAAA,2BAAA,QAAA,qBAAA,QAAA,kCAAA,QAAA,4BAAA,QAAA,+BAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA7tBM,IAAMsG,EAA4B,SAA5BA,EAAsCC,GAC7C,GAACA,EAAO/H,OAEL,CAAA,GAAsB,IAAlB+H,EAAO/H,OACT+H,OAAAA,EAAO,GAIT,IAFDC,IAAAA,EAAS,GACTC,EAAiBH,EAA0BC,EAAOG,MAAM,IACnD3H,EAAI,EAAGA,EAAI0H,EAAejI,OAAQO,IACpC,IAAA,IAAI4H,EAAI,EAAGA,EAAIJ,EAAO,GAAG/H,OAAQmI,IACpCH,EAAO9H,KAAK6H,EAAO,GAAGI,GAAK,IAAMF,EAAe1H,IAG7CyH,OAAAA,EAXA,MAAA,IA2tBV,QAAA,0BAAA,EAtsBM,IAAMI,EAA8B,SAAUC,GAM5C,IALHC,IAAAA,EAAS,GACTC,EAAU,GACVC,EAAmB,EAMjBH,EAAKrI,SAAWwI,GAHT,CAMTA,EAAmBH,EAAKrI,OAGrB,IAAA,IAAIO,EAAI,EAAGA,EAAI8H,EAAKrI,OAAQO,IAAK,CAEhCkC,IAAAA,EAAM4F,EAAK9H,GACXkI,EAAKhG,EAAIA,EAAIzC,OAAS,GAGtBuI,IAAYE,IAEdH,EAAOpI,KAAKuC,GACZ8F,EAAUE,EAEVJ,EAAKK,OAAOnI,EAAG,GACfA,MAKK,OAAA,EAAA,IAAIkG,IAAQ6B,GAAAA,OAAAA,EAAWD,EAAAA,OAsqBnC,QAAA,4BAAA,EA7pBM,IAAMM,EAAoC,SAAUN,GAOlD,IANHC,IAAAA,EAAS,GACTM,EAAU,GACVL,EAAU,GACVC,EAAmB,EAMjBH,EAAKrI,SAAWwI,GAHT,CAMTA,EAAmBH,EAAKrI,OAGrB,IAAA,IAAIO,EAAI,EAAGA,EAAI8H,EAAKrI,OAAQO,IAAK,CAEhCkC,IAAAA,EAAM4F,EAAK9H,GACXsI,EAAKpG,EAAI,GACTgG,EAAKhG,EAAIA,EAAIzC,OAAS,GAGtBuI,IAAYE,GAAMG,IAAYC,IAEhCP,EAAOpI,KAAKuC,GACZmG,EAAUC,EACVN,EAAUE,EAEVJ,EAAKK,OAAOnI,EAAG,GACfA,MAKK,OAAA,EAAA,IAAIkG,IAAQ6B,GAAAA,OAAAA,EAAWD,EAAAA,OA0nBnC,QAAA,kCAAA,EAjnBM,IAAMS,EAAuB,WAAUC,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACrDC,EAAc,GACdC,EAAc,GAGdC,EAAQ,EACRC,EAAW,GACfC,EAAe,KAAOF,EAAQ,KAAM,CAClCA,IAGIG,IAAAA,EAAWN,EAAW,GAAKC,EAAY,GAAKC,EAAY,GACxDI,GAAAA,IAAaF,EACTC,MAAAA,EAKJ,GAHJD,EAAWE,GAGNN,EAAW/I,SAAWgJ,EAAYhJ,OAC/BoJ,MAAAA,EAIJ,GAACH,EAAYjJ,OAAb,CAMAsJ,IAAAA,EAAaL,EAAYA,EAAYjJ,OAAS,IAAM,GACpDuJ,EAAgBD,EAAWA,EAAWtJ,OAAS,IAAM,GAErDwJ,EAAcP,EAAYA,EAAYjJ,OAAS,IAAM,GACrDyJ,EAAiBD,EAAYA,EAAYxJ,OAAS,IAAM,GAIxDgJ,GAAAA,EAAYhJ,OAAQ,CACNgJ,IADM,EACNA,EAAAA,EAAAA,GADM,IACO,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApBvG,IAAAA,EAAoB,EAAA,MACvB,GAACA,EAAD,CACAiH,IAAAA,EAASjH,EAAIA,EAAIzC,OAAS,GAC1B0J,GAAAA,IAAWH,GAAiBG,IAAWD,EAAvCC,CAKFT,EAAY/I,KAAK8I,EAAYW,SACpBP,SAAAA,KAVS,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAiBpBL,GAAAA,EAAW,GAAI,CACbtG,IAAAA,EAAMsG,EAAWY,QACjBD,EAASjH,EAAIA,EAAIzC,OAAS,GAC1B0J,IAAWH,GAAiBG,IAAWD,EAEzCT,EAAY9I,KAAKuC,GAGjBwG,EAAY/I,KAAKuC,SAtCnBwG,EAAY/I,KAAK6I,EAAWY,SA4CrBV,MAAAA,GAAAA,OAAAA,EAAgBD,EAAgBD,EAAAA,KA6iB5C,QAAA,qBAAA,EApiBM,IAAMa,EAA6B,WAAUb,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC3DC,EAAc,GACdC,EAAc,GAGdC,EAAQ,EACRC,EAAW,GACfC,EAAe,KAAOF,EAAQ,KAAM,CAClCA,IAGIG,IAAAA,EAAWN,EAAW,GAAKC,EAAY,GAAKC,EAAY,GACxDI,GAAAA,IAAaF,EACTC,MAAAA,EAKJ,GAHJD,EAAWE,GAGNN,EAAW/I,SAAWgJ,EAAYhJ,OAC/BoJ,MAAAA,EAIJ,GAACH,EAAYjJ,OAAb,CAMAsJ,IAAAA,EAAaL,EAAYA,EAAYjJ,OAAS,IAAM,GACpD6J,EAAgBP,EAAW,IAAM,GACjCC,EAAgBD,EAAWA,EAAWtJ,OAAS,IAAM,GAErDwJ,EAAcP,EAAYA,EAAYjJ,OAAS,IAAM,GACrD8J,EAAiBN,EAAY,IAAM,GACnCC,EAAiBD,EAAYA,EAAYxJ,OAAS,IAAM,GAIxDgJ,GAAAA,EAAYhJ,OAAQ,CACNgJ,IADM,EACNA,EAAAA,EAAAA,GADM,IACO,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApBvG,IAAAA,EAAoB,EAAA,MACvB,GAACA,EAAD,CACAsH,IAAAA,EAAStH,EAAI,GACbiH,EAASjH,EAAIA,EAAIzC,OAAS,GAE3B+J,KAAAA,IAAWF,GAAiBE,IAAWD,GACvCJ,IAAWH,GAAiBG,IAAWD,GADvCM,CAODd,EAAY/I,KAAK8I,EAAYW,SACpBP,SAAAA,KAdS,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAqBpBL,GAAAA,EAAW,GAAI,CACbtG,IAAAA,EAAMsG,EAAWY,QACjBI,EAAStH,EAAI,GACbiH,EAASjH,EAAIA,EAAIzC,OAAS,GAE3B+J,IAAWF,GAAiBE,IAAWD,GACvCJ,IAAWH,GAAiBG,IAAWD,EAGxCT,EAAY9I,KAAKuC,GAGjBwG,EAAY/I,KAAKuC,SAhDnBwG,EAAY/I,KAAK6I,EAAWY,SAsDrBV,MAAAA,GAAAA,OAAAA,EAAgBD,EAAgBD,EAAAA,KAsd5C,QAAA,2BAAA,EA7cM,IAAMiB,EAA+B,SAAU3B,GAM7C,IALHC,IAAAA,EAAS,GACTC,EAAU,GACVC,EAAmB,EAMjBH,EAAKrI,SAAWwI,GAHT,CAMTA,EAAmBH,EAAKrI,OAGrB,IAAA,IAAIO,EAAI,EAAGA,EAAI8H,EAAKrI,OAAQO,IAAK,CAEhCkC,IAAAA,EAAM4F,EAAK9H,GACXkI,EAAKhG,EAAIA,EAAIzC,OAAS,GAAKyC,EAAIA,EAAIzC,OAAS,GAAKyC,EAAIA,EAAIzC,OAAS,GAGlEuI,IAAYE,IAEdH,EAAOpI,KAAKuC,GACZ8F,EAAUE,EAEVJ,EAAKK,OAAOnI,EAAG,GACfA,MAKK,OAAA,EAAA,IAAIkG,IAAQ6B,GAAAA,OAAAA,EAAWD,EAAAA,OA6anC,QAAA,6BAAA,EApaM,IAAM4B,EAAmC,WAAUlB,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACjEC,EAAc,GACdC,EAAc,GAGdC,EAAQ,EACRC,EAAW,GACfC,EAAe,KAAOF,EAAQ,KAAM,CAClCA,IAGIG,IAAAA,EAAWN,EAAW,GAAKC,EAAY,GAAKC,EAAY,GACxDI,GAAAA,IAAaF,EACTC,MAAAA,EAKJ,GAHJD,EAAWE,GAGNN,EAAW/I,SAAWgJ,EAAYhJ,OAC/BoJ,MAAAA,EAIJ,GAACH,EAAYjJ,OAAb,CAMAsJ,IAAAA,EAAaL,EAAYA,EAAYjJ,OAAS,IAAM,GACpD6J,EAAgBP,EAAW,IAAM,GACjCC,EAAgBD,EAAWA,EAAWtJ,OAAS,IAAM,GAErDwJ,EAAcP,EAAYA,EAAYjJ,OAAS,IAAM,GACrD8J,EAAiBN,EAAY,IAAM,GACnCC,EAAiBD,EAAYA,EAAYxJ,OAAS,IAAM,GAExDkK,EAAcjB,EAAYA,EAAYjJ,OAAS,IAAM,GACrDmK,EAAiBD,EAAY,IAAM,GACnCE,EAAiBF,EAAYA,EAAYlK,OAAS,IAAM,GAIxDgJ,GAAAA,EAAYhJ,OAAQ,CACNgJ,IADM,EACNA,EAAAA,EAAAA,GADM,IACO,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApBvG,IAAAA,EAAoB,EAAA,MACvB,GAACA,EAAD,CACAsH,IAAAA,EAAStH,EAAI,GACbiH,EAASjH,EAAIA,EAAIzC,OAAS,GAE3B+J,KAAAA,IAAWF,GAAiBE,IAAWD,GAAkBC,IAAWI,GACpET,IAAWH,GAAiBG,IAAWD,GAAkBC,IAAWU,GADpEL,CAODd,EAAY/I,KAAK8I,EAAYW,SACpBP,SAAAA,KAdS,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAqBpBL,GAAAA,EAAW,GAAI,CACbtG,IAAAA,EAAMsG,EAAWY,QACjBI,EAAStH,EAAI,GACbiH,EAASjH,EAAIA,EAAIzC,OAAS,GAE3B+J,IAAWF,GAAiBE,IAAWD,GAAkBC,IAAWI,GACpET,IAAWH,GAAiBG,IAAWD,GAAkBC,IAAWU,EAGrEpB,EAAY9I,KAAKuC,GAGjBwG,EAAY/I,KAAKuC,SApDnBwG,EAAY/I,KAAK6I,EAAWY,SA0DrBV,MAAAA,GAAAA,OAAAA,EAAgBD,EAAgBD,EAAAA,KAkV5C,QAAA,iCAAA,EAzUM,IAAMsB,EAAwB,WAAUtB,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACtDC,EAAc,GACdC,EAAc,GAGdC,EAAQ,EACRC,EAAW,GACfC,EAAe,KAAOF,EAAQ,KAAM,CAClCA,IAGIG,IAAAA,EAAWN,EAAW,GAAKC,EAAY,GAAKC,EAAY,GACxDI,GAAAA,IAAaF,EACTC,MAAAA,EAKJ,GAHJD,EAAWE,GAGNN,EAAW/I,SAAWgJ,EAAYhJ,OAC/BoJ,MAAAA,EAIJ,GAACH,EAAYjJ,OAAb,CAMAsJ,IAAAA,EAAaL,EAAYA,EAAYjJ,OAAS,IAAM,GACpDuJ,EAAgBD,EAAWA,EAAWtJ,OAAS,IAAM,GAErDwJ,EAAcP,EAAYA,EAAYjJ,OAAS,IAAM,GACrDyJ,EAAiBD,EAAYA,EAAYxJ,OAAS,IAAM,GAIxDgJ,GAAAA,EAAYhJ,OAAQ,CACNgJ,IADM,EACNA,EAAAA,EAAAA,GADM,IACO,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApBvG,IAAAA,EAAoB,EAAA,MACvB,GAACA,EAAD,CACAiH,IAAAA,EAASjH,EAAIA,EAAIzC,OAAS,GAC1B0J,GAAAA,IAAWH,GAAiBG,IAAWD,EAAvCC,CAKFT,EAAY/I,KAAK8I,EAAYW,SACpBP,SAAAA,KAVS,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAiBpBL,GAAAA,EAAW,GAAI,CACbtG,IAAAA,EAAMsG,EAAWY,QACjBD,EAASjH,EAAIA,EAAIzC,OAAS,GAC1B0J,IAAWH,GAAiBG,IAAWD,EAEzCT,EAAY9I,KAAKuC,GAGjBwG,EAAY/I,KAAKuC,SAtCnBwG,EAAY/I,KAAK6I,EAAWY,SA4CrBV,MAAAA,GAAAA,OAAAA,EAAgBD,EAAgBD,EAAAA,KAqQ5C,QAAA,sBAAA,EA5PM,IAAMuB,EAAyB,WAAUvB,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACvDC,EAAc,GACdC,EAAc,GAGdC,EAAQ,EACRC,EAAW,GACfC,EAAe,KAAOF,EAAQ,KAAM,CAClCA,IAGIG,IAAAA,EAAWN,EAAW,GAAKC,EAAY,GAAKC,EAAY,GACxDI,GAAAA,IAAaF,EACTC,MAAAA,EAKJ,GAHJD,EAAWE,GAGNN,EAAW/I,SAAWgJ,EAAYhJ,OAC/BoJ,MAAAA,EAIJ,GAACH,EAAYjJ,OAAb,CAMAsJ,IACAO,GADaZ,EAAYA,EAAYjJ,OAAS,IAAM,IACzB,IAAM,GAGjC8J,GADcb,EAAYA,EAAYjJ,OAAS,IAAM,IACxB,IAAM,GAGnCmK,GADclB,EAAYA,EAAYjJ,OAAS,IAAM,IACxB,IAAM,GAInCgJ,GAAAA,EAAYhJ,OAAQ,CACNgJ,IADM,EACNA,EAAAA,EAAAA,GADM,IACO,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApBvG,IAAAA,EAAoB,EAAA,MACvB,GAACA,EAAD,CACAsH,IAAAA,EAAStH,EAAI,GACbsH,GAAAA,IAAWF,GAAiBE,IAAWD,GAAkBC,IAAWI,EAApEJ,CAKFd,EAAY/I,KAAK8I,EAAYW,SACpBP,SAAAA,KAVS,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAiBpBL,GAAAA,EAAW,GAAI,CACbtG,IAAAA,EAAMsG,EAAWY,QACjBI,EAAStH,EAAI,GACbsH,IAAWF,GAAiBE,IAAWD,GAAkBC,IAAWI,EAEtEnB,EAAY9I,KAAKuC,GAGjBwG,EAAY/I,KAAKuC,SAzCnBwG,EAAY/I,KAAK6I,EAAWY,SA+CrBV,MAAAA,GAAAA,OAAAA,EAAgBD,EAAgBD,EAAAA,KAqL5C,QAAA,uBAAA,EA5KM,IAAMwB,EAAyB,WAAUxB,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACvDC,EAAc,GACdC,EAAc,GAGdC,EAAQ,EACRC,EAAW,GACfC,EAAe,KAAOF,EAAQ,KAAM,CAClCA,IAGIG,IAAAA,EAAWN,EAAW,GAAKC,EAAY,GAAKC,EAAY,GACxDI,GAAAA,IAAaF,EACTC,MAAAA,EAKJ,GAHJD,EAAWE,GAGNN,EAAW/I,SAAWgJ,EAAYhJ,OAC/BoJ,MAAAA,EAIJ,GAACH,EAAYjJ,OAAb,CAMAsJ,IACAO,GADaZ,EAAYA,EAAYjJ,OAAS,IAAM,IACzB,IAAM,GAGjC8J,GADcb,EAAYA,EAAYjJ,OAAS,IAAM,IACxB,IAAM,GAInCgJ,GAAAA,EAAYhJ,OAAQ,CACNgJ,IADM,EACNA,EAAAA,EAAAA,GADM,IACO,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApBvG,IAAAA,EAAoB,EAAA,MACvB,GAACA,EAAD,CACAsH,IAAAA,EAAStH,EAAI,GACbsH,GAAAA,IAAWF,GAAiBE,IAAWD,EAAvCC,CAKFd,EAAY/I,KAAK8I,EAAYW,SACpBP,SAAAA,KAVS,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAiBpBL,GAAAA,EAAW,GAAI,CACbtG,IAAAA,EAAMsG,EAAWY,QACjBI,EAAStH,EAAI,GACbsH,IAAWF,GAAiBE,IAAWD,EAEzCd,EAAY9I,KAAKuC,GAGjBwG,EAAY/I,KAAKuC,SAtCnBwG,EAAY/I,KAAK6I,EAAWY,SA4CrBV,MAAAA,GAAAA,OAAAA,EAAgBD,EAAgBD,EAAAA,KA+F7C,GASC,QAAA,uBAAA,EATqB,YAAXxH,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;;ACnvB9B,IAOIgJ,EACAC,EARAC,EAAUC,OAAOjJ,QAAU,GAU/B,SAASkJ,IACC,MAAA,IAAIC,MAAM,mCAEpB,SAASC,IACC,MAAA,IAAID,MAAM,qCAsBpB,SAASE,EAAWC,GACZR,GAAAA,IAAqBS,WAEdA,OAAAA,WAAWD,EAAK,GAGvB,IAACR,IAAqBI,IAAqBJ,IAAqBS,WAEzDA,OADPT,EAAmBS,WACZA,WAAWD,EAAK,GAEvB,IAEOR,OAAAA,EAAiBQ,EAAK,GAC/B,MAAM7G,GACA,IAEOqG,OAAAA,EAAiBU,KAAK,KAAMF,EAAK,GAC1C,MAAM7G,GAEGqG,OAAAA,EAAiBU,KAAK,KAAMF,EAAK,KAMpD,SAASG,EAAgBC,GACjBX,GAAAA,IAAuBY,aAEhBA,OAAAA,aAAaD,GAGpB,IAACX,IAAuBK,IAAwBL,IAAuBY,aAEhEA,OADPZ,EAAqBY,aACdA,aAAaD,GAEpB,IAEOX,OAAAA,EAAmBW,GAC5B,MAAOjH,GACD,IAEOsG,OAAAA,EAAmBS,KAAK,KAAME,GACvC,MAAOjH,GAGEsG,OAAAA,EAAmBS,KAAK,KAAME,MAjEhD,WACO,IAEIZ,EADsB,mBAAfS,WACYA,WAEAL,EAEzB,MAAOzG,GACLqG,EAAmBI,EAEnB,IAEIH,EADwB,mBAAjBY,aACcA,aAEAP,EAE3B,MAAO3G,GACLsG,EAAqBK,GAjB5B,GAwED,IAEIQ,EAFAC,EAAQ,GACRC,GAAW,EAEXC,GAAc,EAElB,SAASC,IACAF,GAAaF,IAGlBE,GAAW,EACPF,EAAatL,OACbuL,EAAQD,EAAa1K,OAAO2K,GAE5BE,GAAc,EAEdF,EAAMvL,QACN2L,KAIR,SAASA,IACDH,IAAAA,EAAAA,CAGAI,IAAAA,EAAUb,EAAWW,GACzBF,GAAW,EAGLlL,IADFA,IAAAA,EAAMiL,EAAMvL,OACVM,GAAK,CAGA,IAFPgL,EAAeC,EACfA,EAAQ,KACCE,EAAanL,GACdgL,GACAA,EAAaG,GAAYI,MAGjCJ,GAAc,EACdnL,EAAMiL,EAAMvL,OAEhBsL,EAAe,KACfE,GAAW,EACXL,EAAgBS,IAiBpB,SAASE,EAAKd,EAAKe,GACVf,KAAAA,IAAMA,EACNe,KAAAA,MAAQA,EAYjB,SAASC,KA5BTtB,EAAQuB,SAAW,SAAUjB,GACrBkB,IAAAA,EAAO,IAAIC,MAAMxF,UAAU3G,OAAS,GACpC2G,GAAAA,UAAU3G,OAAS,EACd,IAAA,IAAIO,EAAI,EAAGA,EAAIoG,UAAU3G,OAAQO,IAClC2L,EAAK3L,EAAI,GAAKoG,UAAUpG,GAGhCgL,EAAMrL,KAAK,IAAI4L,EAAKd,EAAKkB,IACJ,IAAjBX,EAAMvL,QAAiBwL,GACvBT,EAAWY,IASnBG,EAAKM,UAAUP,IAAM,WACZb,KAAAA,IAAIqB,MAAM,KAAM,KAAKN,QAE9BrB,EAAQ4B,MAAQ,UAChB5B,EAAQ6B,SAAU,EAClB7B,EAAQ8B,IAAM,GACd9B,EAAQ+B,KAAO,GACf/B,EAAQgC,QAAU,GAClBhC,EAAQiC,SAAW,GAInBjC,EAAQkC,GAAKZ,EACbtB,EAAQmC,YAAcb,EACtBtB,EAAQoC,KAAOd,EACftB,EAAQqC,IAAMf,EACdtB,EAAQsC,eAAiBhB,EACzBtB,EAAQuC,mBAAqBjB,EAC7BtB,EAAQwC,KAAOlB,EACftB,EAAQyC,gBAAkBnB,EAC1BtB,EAAQ0C,oBAAsBpB,EAE9BtB,EAAQ2C,UAAY,SAAUC,GAAe,MAAA,IAE7C5C,EAAQ6C,QAAU,SAAUD,GAClB,MAAA,IAAIzC,MAAM,qCAGpBH,EAAQ8C,IAAM,WAAqB,MAAA,KACnC9C,EAAQ+C,MAAQ,SAAUC,GAChB,MAAA,IAAI7C,MAAM,mCAEpBH,EAAQiD,MAAQ,WAAoB,OAAA;;;AC3HnC,IAAA,EAAA,QAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAvCM,SAASC,IAEV,QAAmB,IAAZlD,EACF,MAAA,GAIJ,IADDwB,IAAAA,EAAO,GACF/D,EAAI,EAAGA,EAAIuC,EAAQ+B,KAAKzM,OAAQmI,IAAK,CACxCsE,IAAAA,EAAO/B,EAAQ+B,KAAKtE,GACpBA,GAAM,IAANA,EAEF+D,EAAI,SAAeO,OACd,GAAU,IAANtE,EAET+D,EAAI,SAAeO,MACd,CAED5M,IAAAA,EAAM4M,EAAKoB,MAAM,KAErB3B,EAAKrM,EAAI,IAAMA,EAAI,IAGhBqM,OAAAA,EAQT,GAAsB,YAAX3K,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;AC1B7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAnBM,IAAMsM,EAAa,SAAStM,EAAM0K,GAChC,OAAA,WACE1K,OAAAA,EAAK0K,KAQhB,GASC,QAAA,WAAA,EATqB,YAAX3K,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACa7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,KAAA,QAAA,aAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAvCM,IAAMuM,EAAU,SAAUC,GAEzBC,OADGD,EAAOE,OAAO,SAACC,EAAUC,GAAYA,OAAAA,EAAWD,IAC7CH,EAAOhO,QAqCpB,QAAA,QAAA,EAlCM,IAAMqO,EAAO,SAAUL,GAC7BA,EAAOhM,KAAK,SAACvB,EAAGC,GAAMD,OAAAA,EAAIC,IACtB4N,IAAAA,EAAYxO,KAAKyO,OAAOP,EAAOhO,OAAS,GAAK,GAC7CwO,EAAa1O,KAAK2O,MAAMT,EAAOhO,OAAS,GAAK,GAC1C,OAACgO,EAAOM,GAAaN,EAAOQ,IAAe,GA8BlD,QAAA,KAAA,EA3BM,IAAME,EAAY,SAAUC,GAC9BA,OAAa,OAAbA,IAGoB,iBAAbA,IACVA,EAAWC,OAAOD,KAEfE,MAAMF,KAWX,GASC,QAAA,UAAA,EATqB,YAAXpN,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACsJ7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,WAAA,QAAA,aAAA,QAAA,gBAAA,QAAA,gBAAA,QAAA,8BAAA,QAAA,uBAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EApLM,IAAMsN,EAAoB,SAA2BC,EAAMC,GACzD1M,OAAAA,KAAKC,UAAUwM,KAAUzM,KAAKC,UAAUyM,IAmLhD,QAAA,kBAAA,EAxKM,IAAMC,EAAgC,SAAwBpP,GAAKQ,IAAY,EAAZA,IAAM,UAAA,OAAA,QAAA,IAAA,UAAA,KAAA,UAAA,GAC1EqH,EAAM,GACM7H,EAAAA,EAAAA,GAFoE,IAE/D,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CACnB6H,EADmB,EAAA,OACRrH,GAHuE,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAK7EqH,OAAAA,GAmKR,QAAA,8BAAA,EA1JM,IAAMwH,EAAkB,SAAyBxH,GACjD,IAAA,IAAIyH,KAAOzH,EACPA,OAAAA,EAAIyH,IAwJd,QAAA,gBAAA,EA7IM,IAAMC,EAAkB,SAAyB1H,GACjD,IAAA,IAAIyH,KAAOzH,EACP,MAAA,CAACyH,EAAKzH,EAAIyH,KA2IpB,QAAA,gBAAA,EAlIM,IAAME,EAAe,SAAsB3H,GAC3C,IAAA,IAAI4H,KAAQ5H,EACX6H,GAAAA,OAAOnD,UAAUoD,eAAetE,KAAKxD,EAAK4H,GACrC,OAAA,EAGJ,OAAA,GA4HR,QAAA,aAAA,EAlHM,IAAMG,EAAa,SAASA,EAAWpP,GACxCsO,IAAAA,EAEA,GAAiB,iBAAVtO,IAAuBA,EAAMU,SAAS,MAAQV,EAAMU,SAAS,MAClE,IACF4N,EAAWrM,KAAKoN,MAAMrP,GACtB,MAAO8D,GACH,IACFwK,EAAWrM,KAAKoN,MAAMrP,EAAMyE,QAAQ,WAAY,IAAIA,QAAQ,SAAU,MACtE,MAAOX,GACPwK,EAAWtO,EAAMU,SAAS,KAAO,GAAK,SAK1C4N,EAAWtO,EAUT,GAAoB,WAApB,EAAOsO,GAEJ,IAAA,IAAIQ,KAAOR,EACTA,EAASa,eAAeL,KAE7BR,EAASQ,GAAOM,EAAWd,EAASQ,KAIjCR,OAAAA,GAgFR,QAAA,WAAA,EAvEM,IAAMgB,EAAY,SAASA,EAAUZ,EAAMC,GAG5CtH,IAHkD,EAGlDA,EAAM,GAGMkI,EAAAA,EADD,EAAA,IAAInJ,IAAQ8I,GAAAA,OAAAA,EAAAA,OAAOK,KAAKb,IAAUQ,EAAAA,OAAOK,KAAKZ,QALP,IAMhC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAbG,IAAAA,EAAa,EAAA,MAEhBJ,GAAAA,EAAKS,eAAeL,IAAQH,EAAKQ,eAAeL,GAAM,CACpDU,IAAAA,EAAQd,EAAKI,GACbW,EAAQd,EAAKG,GAEb,GAAA,EAAOU,KAAiBC,EAAAA,GAE1BpI,EAAIyH,GAAOW,GAASD,OAILA,OAAAA,EAAAA,IACR,IAAA,SAEGC,GAAWD,EAEX1D,MAAM4D,QAAQD,IAAU3D,MAAM4D,QAAQF,GAExCnI,EAAIyH,GAAW,EAAA,IAAI1I,IAAQsI,GAAAA,OAAAA,EAAAA,EAAKI,IAASH,EAAAA,EAAKG,OACpChD,MAAM4D,QAAQD,IAAW3D,MAAM4D,QAAQF,GAMjDnI,EAAIyH,GAAOJ,EAAKI,GAJhBzH,EAAIyH,GAAOQ,EAAUZ,EAAKI,GAAMH,EAAKG,IAQvCzH,EAAIyH,GAAOW,GAASD,EAEtB,MACF,QAEEnI,EAAIyH,GAAOW,GAASD,QAIjBb,EAAKQ,eAAeL,GAE7BzH,EAAIyH,GAAOH,EAAKG,GAGhBzH,EAAIyH,GAAOJ,EAAKI,IAlDkC,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAsD/CzH,OAAAA,GAQT,GASC,QAAA,UAAA,EATqB,YAAXnG,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACzJ7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,QAAA,WAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GA5BM,IAAMwO,EAAQ,WAASC,IAAAA,EAAK,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAC1B,OAAA,IAAIC,QAAQ,SAAAC,GAAKlF,OAAAA,WAAWkF,EAAGF,MA2BvC,QAAA,MAAA,EApBM,IAAMG,EAAuB,SAASrE,EAAOsE,GAC3CH,OAAAA,QAAQI,IAAIvE,EAAMwE,IAAI,SAASrP,GAC7BmP,OAAAA,EAAGnP,OASd,GASC,QAAA,qBAAA,EATqB,YAAXK,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;AC8C7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,8BAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GA7DM,IAAMgP,EAA2B,SAAUC,GAC5CC,IAAAA,EAAQ,GAMRD,GAJAA,EAAIE,OACND,EAAQD,EAAIE,MAGVF,EAAIC,MACD,IAAA,IAAIvB,KAAOsB,EAAIC,MAAO,CACrBpP,IAAAA,EAAMmP,EAAIC,MAAMvB,GAChB7N,GAAQ,IAARA,GAIA,GAACA,IACLA,EAAMsP,mBAAmBtP,GAAKuP,QAE1BvP,GAAQ,cAARA,EAIAA,GAAQ,SAARA,EAIAA,GAAQ,SAARA,EAIAA,GAAQ,UAARA,EAAAA,CAIA,GAAA,CAAC,IAAK,IAAK,KAAKP,SAASO,EAAI,IAC3B,IACFA,EAAMgB,KAAKoN,MAAMpO,GACjB,MAAO6C,GACP7C,EAAM,GAGVoP,EAAMvB,GAAO7N,OAVXoP,EAAMvB,IAAO,OAJbuB,EAAMvB,IAAO,OAJbuB,EAAMvB,GAAO,YAJbuB,EAAMvB,GAAO,iBAPbuB,EAAMvB,GAAO,EAiCZuB,OAAAA,GAQT,GASC,QAAA,yBAAA,EATqB,YAAXnP,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACe7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,sBAAA,EAAA,QAAA,WAAA,EAAA,QAAA,cAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,oBAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAjFM,SAASsP,EAAUrO,GACpBsO,IAAAA,EAAO,EACPtO,GAAe,IAAfA,EAAIzC,OACC+Q,OAAAA,EAEJ,IAAA,IAAIxQ,EAAI,EAAGA,EAAIkC,EAAIzC,OAAQO,IAAK,CAEnCwQ,GAAQA,GAAQ,GAAKA,EADVtO,EAAIuO,WAAWzQ,GAE1BwQ,GAAcA,EAETA,OAAAA,EAAK,GAGP,SAASE,EAAgBjM,GACvBA,OAAAA,EAAKkM,OAAO,GAAGC,cAAgBnM,EAAKkD,MAAM,GAG5C,SAASkJ,EAAsBpM,GAC7BA,OAAAA,EACJF,QAAQ,MAAO,KACfA,QAAQ,WAAY,IACpBjC,cACAgO,OAEE,SAASQ,EAAuBrM,GAC9BA,OAAAA,EACJF,QAAQ,UAAW,IACnBjC,cACAgO,OAGE,SAASS,IAAYzM,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAI5E,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGsR,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACpD1M,OAAAA,EAAO2M,UAAU,EAAGvR,GAASsR,EAAS1M,EAAO2M,UAAUvR,EAAO4E,EAAO7E,QASvE,SAASyR,EAAcC,EAAGC,GAGxBD,MAFG,MAANC,IAAWA,EAAI,OACT,OAANA,IAAYA,EAAI,QACbD,EAAE5M,QAAQ,IAAI8M,OAAO,KAAOD,EAAI,OAASA,EAAI,MAAO,KAAM,IAQ5D,SAASE,EAAmBpP,GAC1BA,OAAAA,EAAIqC,QAAQ,IAAI8M,OAAO,oBAAqB,MAAO,IAGrD,SAASE,EAAoB9M,GAE9BA,IADJA,EAAOA,EAAKnC,eACH7C,QAAU,EACV,OAAA,EAIL+R,IAAAA,GADJ/M,GADAA,EAAOA,EAAKF,QAAQ,mCAAoC,KAC5CA,QAAQ,KAAM,KACTiN,MAAM,kBAChBA,OAAAA,EAAQA,EAAM/R,OAAS,EAQhC,GAAsB,YAAXuB,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACC7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA,EAAA,QAAA,wBAAA,EAAA,QAAA,8BAAA,EA9ED,IAAA,EAAA,QAAA,eAoEA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAxEM,SAASwQ,IAAwBC,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC3CC,EAAK3C,OAAOK,KAAKqC,GAClB1B,IAAI,SAAC4B,GAAMC,OAAAA,mBAAmBD,GAAK,IAAMC,mBAAmBH,EAAOE,MACnEE,KAAK,KAIDH,OAHHA,IACFA,EAAK,IAAMA,GAENA,EAOF,SAASI,IAAwB7P,IAAU,EAE5CiF,EAAM,GAEO6K,EAAAA,GAJ2B,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IAG5BzN,QAAQ,IAAK,IAAI+I,MAAM,MAHS,IAIxB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAf2E,IAAAA,EAAe,EAAA,MAClB,GAACA,EAAD,CACAC,IAAAA,EAAQD,EAAK3E,MAAM,KACnBsB,EAAMsD,EAAM,GACXtD,IACLzH,EAAIyH,GAAOsD,EAAM,IAAM,MATuB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAY3C,IAAA,IAAItD,KAAOzH,EACdA,EAAIyH,GAAOyB,mBAAmBlJ,EAAIyH,IAAQ,IAAI0B,OAGzCnJ,OAAAA,EAUF,SAASgL,EAA8BC,EAAaxD,EAAK9O,GAE9DsS,GAAc,EAAcA,EAAAA,eAAAA,EAAa,KACzCA,GAAc,EAAcA,EAAAA,eAAAA,EAAa,KACrCjL,IAAAA,EAAMpF,KAAKoN,MACb,KAAOkD,UAAUD,GAAa7N,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAAS,MAGjG4C,EAAIyH,GAAO9O,EAGMkP,IADbjH,IAAAA,EAAS,IACIiH,EAAAA,EAAAA,EAAAA,OAAOsD,QAAQnL,GAAM,EAAA,EAAA,OAAA,IAAA,CAA7B8K,IAAAA,EAAJ,EAAA,GACHlK,GAAUkK,EAAK,GAAK,IACpBlK,GAAUkK,EAAK,GAAK,IAEf,OAAA,EAAclK,EAAAA,eAAAA,EAAQ,KAQ/B,GAAsB,YAAX/G,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACyG7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAA,QAAA,oBAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAnLD,IAAA,EAAA,QAAA,aAyKA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GA3KM,SAASsR,EAAaC,EAAQC,GAAUC,IAAAA,EAAc,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACvD,QAACF,IACiB,YAAXxR,oBAAAA,OAAAA,YAAAA,EAAAA,UAA2C,YAAb2R,oBAAAA,SAAAA,YAAAA,EAAAA,YAClC,IAAIhD,QAAQ,SAACiD,EAASC,GACvBC,IAAAA,EAASH,SAASI,cAAc,UAK/B,IAAA,IAAInE,KAFTkE,EAAOE,OAAQ,EACfF,EAAOG,OAAQ,EACCP,EACdI,EAAOlE,GAAO8D,EAAY9D,GAInBsE,SAAAA,EAAaC,EAAGC,IACnBA,IAAYN,EAAOO,YAAc,kBAAkBC,KAAKR,EAAOO,eACjEP,EAAOS,OAAS,KAChBT,EAAOU,mBAAqB,KAC5BV,OAASW,EAELL,EACFP,IAEAD,KAKNE,EAAOS,OAASL,EAChBJ,EAAOU,mBAAqBN,EAE5BJ,EAAOY,IAAMlB,EACbxR,OAAO2R,SAASvC,KAAKuD,OAAOb,GAC5BF,GAAQ,MAiBL,SAASgB,EAAqBC,GAC/B,IAACA,EAAU,MAAO,SAIlB,GAAoB,WAApB,EAAOA,GAAuB,OAAOA,EAASjS,WAG9CkS,IAAAA,EAAUD,EAASA,SACnBA,EAASA,SAASE,KAChBF,EAASA,SAASE,KAClBF,EAASA,SACXA,EAASE,MAAQF,EAGjB/P,EAAQgQ,EAOR,OANAA,EAAQE,OAAQlQ,EAAQgQ,EAAQE,OAAO,IAAMF,EAAQE,OAChDF,EAAQG,SAAUnQ,EAAQgQ,EAAQG,SAAS,IAAMH,EAAQG,SACzDH,EAAQhQ,MAAOA,EAAQgQ,EAAQhQ,MAC/BgQ,EAAQI,UAASpQ,EAAQgQ,EAAQI,SAGrB,WAAjB,EAAOpQ,GAA2BA,EAAMlC,WAGxCkC,EAAM,IAAMA,EAAM,GAAGrE,OAAS,EAAUqE,EAAM,GAG3CA,EAAMqQ,SAAWrQ,EAAMlC,WASzB,SAASwS,IAAUC,IAAAA,EAAqB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAXN,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAIlCO,OAAAA,MAAMD,GAAM,EAAwBN,EAAAA,yBAAAA,GAAO,CAChDQ,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACS,eAAA,mCAGlBC,SAAU,SACVC,SAAU,gBAETC,KAAK,SAACjB,GAAaA,OAAAA,EAASkB,SAC5BD,KAAK,SAACjB,GAAaA,OAAAA,EAASE,OAS1B,SAASiB,IAAWX,IAAAA,EAAqB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAXN,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAInCO,OAAAA,MAAMD,EAAK,CAChBE,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACS,eAAA,mCAGlBC,SAAU,SACVC,SAAU,cACVzE,KAAMrO,KAAKC,UAAU+R,KACpBe,KAAK,SAACjB,GAAaA,OAAAA,EAASkB,SAS1B,SAASE,IAAUZ,IAAAA,EAAqB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAXN,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAIlCO,OAAAA,MAAMD,EAAK,CAChBE,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACS,eAAA,mCAGlBC,SAAU,SACVC,SAAU,cACVzE,KAAMrO,KAAKC,UAAU+R,KACpBe,KAAK,SAACjB,GAAaA,OAAAA,EAASkB,SAQjC,GAAsB,YAAX/T,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;AC3G7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,QAAA,SAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GApEM,IAAMiU,EAAM,SAAUnU,GACrBgB,OAAAA,KAAKC,UAAUjB,IAmEtB,QAAA,IAAA,EAhEM,IAAMoU,EAAM,SAAUpU,GACrBgB,OAAAA,KAAKoN,MAAMpN,KAAKC,UAAUjB,KAsDlC,GASC,QAAA,IAAA,EATqB,YAAXC,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACzC7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAvBM,IAAMmU,EAAY,WAEhB,MAAkB,YAAXpU,oBAAAA,OAAAA,YAAAA,EAAAA,UACRA,OAAOqU,WACP,8FACAC,SASR,GASC,QAAA,UAAA,EATqB,YAAXtU,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;ACe7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,SAAA,QAAA,oBAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAlCM,IAAMsU,EAAiB,SAAwBrT,GAChD,IAACA,EAAK,OAAO,EACbsT,IAAAA,EAAWtT,EAQXuT,GALJvT,GADAA,GADAA,EAAMA,EAAIqC,QAAQ,KAAM,MACdzB,OAAO,EAAGZ,EAAIzC,OAAS,IACvB8E,QAAQ,cAAe,MAE9B+I,MAAM,KACN0C,IAAI,SAAC0F,GAAMA,OAAAA,EAAEpF,SACbhQ,OAAO,SAACoV,GAAM,QAAEA,IACGjW,OACfgW,OAAc,IAAdA,EAAkBD,EAAS/V,OAASgW,GAuB5C,QAAA,eAAA,EArBM,IAAME,EAAW,SAAwBzT,GACvC,MAAA,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK1B,SAAS0B,IAoBhD,QAAA,SAAA,EAlBM,IAAM0T,EAAgB,SAAwB1T,GAC5C,MAAA,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK1B,SAAS0B,EAAIA,EAAIzC,OAAO,KAQhE,GASC,QAAA,cAAA,EATqB,YAAXuB,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA;;AC+BfC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA7Df,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,eA4CeA,SAAAA,IAAAA,GAAAA,mBAAAA,QAAAA,OAAAA,KAAAA,IAAAA,EAAAA,IAAAA,QAAAA,OAAAA,EAAAA,WAAAA,OAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAA,MAAAA,CAAAA,QAAAA,GAAAA,IAAAA,EAAAA,IAAAA,GAAAA,GAAAA,EAAAA,IAAAA,GAAAA,OAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,GAAAA,EAAAA,OAAAA,gBAAAA,OAAAA,yBAAAA,IAAAA,IAAAA,KAAAA,EAAAA,GAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,EAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,KAAAA,OAAAA,eAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,OAAAA,EAAAA,QAAAA,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GA1Cf,IAAI6O,EAAM,CACR5Q,OAAAA,EACA0W,aAAAA,EACAC,aAAAA,EACAC,WAAAA,EACAC,QAAAA,EACAC,IAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAC,SAAAA,EACApG,IAAAA,EACAqG,SAAAA,EACAxB,KAAAA,EACAzQ,OAAAA,EACAkS,GAAAA,EACAC,KAAAA,EACAC,MAAAA,GAOExV,EAAK,CAACyV,KAAK,IACf,IAAK,IAAIC,KAAQ7G,EAEV,IAAA,IAAI9O,KADTC,EAAGyV,KAAKC,GAAQ,GACC7G,EAAI6G,GACnB1V,EAAGD,GAAQ8O,EAAI6G,GAAM3V,GACrBC,EAAGyV,KAAKC,GAAMjX,KAAKsB,GAOD,YAAXD,oBAAAA,OAAAA,YAAAA,EAAAA,WACTA,OAAOE,GAAKA,GAICA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;;ACrBd,IAAA,EAAA,QAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAVD,IAAA,EAAA,EAAA,QAAA,MAUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAhCM,IAAM2V,EAAY,SAACC,EAASC,GAC7B,IAEFD,IACA,MAAOE,GAEa,YAAbC,oBAAAA,SAAAA,YAAAA,EAAAA,WAAwBA,SAASnT,MAAMkT,GAAOnT,QAAQC,MAAMkT,GAE/C,SAAhBD,QAA6C,IAAZ5M,GAEnCA,EAAQ+M,SAad,GASC,QAAA,UAAA,EATqB,YAAXlW,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAI,GAENC,EAAjB,QACEH,OAAOE,GAAGD,GAAQE,EAAQF,QAAAA","file":"etc.map","sourceRoot":"../esm","sourcesContent":["/**\n * Mix multiple lists of strings into one list, by taking one item from each\n *    Takes unlimited number of arguments, but each must be an array!\n * @params strs1 {array} - array of strings\n * @params strs2 {array} - array of strings\n * @params strs3 {array} - array of strings\n * @returns {array} - new array (immutable), aggregated\n */\nexport function arr_mix (arrays) {\n  let master_list = []\n  // find length of longest array\n  let max_length = 0\n  for (let arr of arrays) {\n    max_length = Math.max(arr.length, max_length)\n  }\n\n  // iterate by index\n  // check item at each index in each array\n  let index = 0\n  while (true) {\n    // add one item from each array\n    for (let arr of arrays) {\n      if (arr[index]) {\n        // add item if exists\n        master_list.push(arr[index])\n      }\n    }\n\n    // next index\n    index++\n    if (index >= max_length) {\n      break\n    }\n  }\n  return master_list\n}\n\n/**\n * arr.length alternative\n *      actually useful, because it checks for existence of ${arr}\n * @param arr {array}\n * @returns {number}\n */\nexport function arr_length (arr) {\n  return arr && arr.length ? arr.length : 0\n}\n\n/**\n * Create an array\n */\nexport function arr_from_value (value, len) {\n  let arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(value)\n  }\n  return arr\n}\n\n/**\n * Find all differences between 2 arrays. What values in either one are NOT contained in the other.\n *    ```\n *    arrays_diff([1,2,3,4,5,6,7],[4,5,6,7,8,9])\n *    // [ 1, 2, 3, 8, 9 ]\n *    ```\n * @param a {array} - first array\n * @param b {array} - second array\n * @returns {array} - returns an array of values which only appear once, not in both arrays\n */\nexport function arrays_diff (a=[], b=[]) {\n  let combined = a.concat(b);\n  return combined.filter( el => {\n    if ( !a.includes(el) || !b.includes(el) )\n      return el;\n  });\n}\n\n/**\n * Subtract array B values from array A. Return remaining array A. Expects 2 parameters, each an array.\n *      NOTE: first array A must be the main one. Words also appearing in B will be removed\n * @param a {array} - values we care about. Analyze these, compared to b\n * @param b {array} - for comparison only. Array values unique to B will be ignored\n * @returns {array} - returns an array of values which appear in A but not B\n */\nexport function arr_subtract (a=[], b=[]) {\n  return a.filter(function (i) {\n    return !b.includes(i)\n  })\n}\n\n/**\n * Remove an item (if exact match string/number) from array\n */\nexport function arr_remove_item (arr=[], item='') {\n  return arr.filter(it=>it!==item)\n}\n\n/**\n * Similarities between arrays A and B\n * @param a {array}\n * @param b {array}\n * @returns {array} - returns an array with values which appear in both A and B\n */\nexport function arr_includes (a, b) {\n  return a.filter(function (i) {\n    return b.includes(i)\n  })\n}\n\n/**\n * Array with empty/falsy values removed.\n * @param arr {array}\n * @returns {array}\n */\nexport function arr_truthy_values (arr) {\n  return arr.filter((val) => !!val)\n}\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","/** @module common-universal-scripts//functions/sort_words */\n\n/**\n * Sort input array by number of characters in string (or number cast to string)\n * Will sort ASC by default. Pass second parameter to sort by DESC.\n * @param {array} arr - expects array of strings,\n *       but will also accept array of anything,\n *       will cast any child to string `arr[i].toString()`\n * @param {boolean} desc - sort descending?\n *       if false or undefined, will be sorted ascending\n * @returns {array} arr - also modifies original array to returned value!\n */\nexport const sort_strings_by_length = function (arr, desc = false) {\n\tlet sort_func = help_sort_strings_by_length.bind({desc});\n\treturn arr.sort(sort_func);\n};\n/**\n * Sort input array NOT JUST by number of characters in string (like sort_strings_by_length),\n * but instead, sort by width of the \"word\".\n *       Words with many short letters (\"i\" and \"l\") will be treated as having fewer characters.\n *       Especially nice glyphs like \"ll\" or \"li\" will be preferred.\n *       Words with wide letters or awkward glyphs (\"w\" or \"sch\") will be given lower position.\n * @param {array} arr - expects array of strings,\n *       but will also accept array of anything,\n *       will cast any child to string `arr[i].toString()`\n * @param {boolean} desc - sort descending?\n *       if false or undefined, will be sorted ascending\n * @returns {array} arr - also modifies original array to returned value!\n */\nexport const sort_strings_by_width = function (arr, desc = false) {\n\tlet sort_func = help_sort_strings_by_width.bind({desc});\n\treturn arr.sort(sort_func);\n};\n\n/*\n ***************************************************************************************\n * HELPER FUNCTIONS\n ***************************************************************************************\n */\n\n/**\n * Usage: `[].sort(help_sort_strings_by_length)`\n * Note: NOT EXPORTED\n */\nfunction help_sort_strings_by_length(a, b) {\n\tlet desc = this.desc;\n\tif (desc) {\n\t\treturn b.toString().length - a.toString().length;\n\t}\n\treturn a.toString().length - b.toString().length;\n}\n\n/**\n * Usage: `[].sort(help_sort_strings_by_width)`\n *      String \"width\" is like \"\".length, but accounts for width of each character.\n *      It is not a JavaScript prototype, but is custom made from character map.\n * Note: NOT EXPORTED\n */\nfunction help_sort_strings_by_width(a, b) {\n\tlet desc = this.desc;\n\tlet a_width = str_width(JSON.stringify(a || ''));\n\tlet b_width = str_width(JSON.stringify(b || ''));\n\tif (desc) {\n\t\treturn b_width - a_width;\n\t}\n\treturn a_width - b_width;\n}\n\n/**\n * Get pixel width of characters in word\n * param {string|number|array} str\n *      works best with {string}, but will convert an array or number .toString()\n * returns {number} width - like ''.length, but accounts for width of each character\n */\nfunction str_width(str) {\n\tstr = (str || '').toString(); // cast to string\n\tlet width = 0;\n\tfor (let char of str) {\n\t\twidth += char_width_plus[char.toLowerCase()] || 15; // default to high number if not English character\n\t}\n\treturn width;\n}\n\n/*\n ***************************************************************************************\n * HELPER VARIABLES\n ***************************************************************************************\n */\n\nconst glyph_width_plus = {};\nconst char_width_plus = {\n\t'0': 7,\n\t'1': 4,\n\t'2': 6,\n\t'3': 7,\n\t'4': 7,\n\t'5': 7,\n\t'6': 7,\n\t'7': 6,\n\t'8': 7,\n\t'9': 7,\n\t'a': 6,\n\t'b': 7,\n\t'c': 6,\n\t'd': 7,\n\t'e': 6,\n\t'f': 2,\n\t'g': 6,\n\t'h': 6,\n\t'i': 3,\n\t'j': 2,\n\t'k': 5,\n\t'l': 3,\n\t'm': 9,\n\t'n': 6,\n\t'o': 6,\n\t'p': 6,\n\t'q': 6,\n\t'r': 3,\n\t's': 5,\n\t't': 3,\n\t'u': 6,\n\t'v': 5,\n\t'w': 9,\n\t'x': 5,\n\t'y': 5,\n\t'z': 5,\n};\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","/**\n * Used to sort a list of domain names by their domain extension - putting best ones higher in list.\n * @param arr {Array<String>} - list of strings - each string must contain at least one period \".\"\n *      NOTE: this function modifies the original array, using .sort()!\n * @param endings {array} - list of endings (domain extensions) to sort by. Best = first. Worst = last.\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @returns {array} - sorted array\n */\nexport default function sort_strings_by_extension(arr, endings, immutable=false) {\n\tif (!arr) return []\n\tif (immutable) arr = [...arr]\n\treturn arr.sort(sort_strings_by_extension__helper.bind(endings));\n};\n\nfunction sort_strings_by_extension__helper(a, b) {\n\tlet a_score = this.indexOf(a.substr(a.indexOf('.') + 1));\n\tlet b_score = this.indexOf(b.substr(b.indexOf('.') + 1));\n\treturn a_score - b_score;\n}\n","/**\n * Sort array by string length, ascending (or descending with false flag)\n * @param arr {Array<String|Number|Array>}\n * @param desc {boolean} - if true, will sort descending; default is false, ascending\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @returns {array}\n */\nexport default function sort_strings_by_length_asc(arr, desc = false, immutable=false) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  if (desc) {\n    return arr.sort((a, b) => b.toString().length - a.toString().length)\n  } else {\n    return arr.sort((a, b) => a.toString().length - b.toString().length)\n  }\n};\n","import sort_strings_by_length_asc from \"./sort_strings_by_length_asc.js\"\n\n/**\n * Algorithm sort = by Length + by Position in array\n * @param arr {Array.<String>} - array of strings\n * @param prefer_position {number} - number to multiply position rating, to make it more important than length\n * @param fix_min_length {number} - absolute minimum allowed to be used as min_length (default 4)\n *      ex: if 4, algorithm will treat str.length of 2,3,4 the same\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nexport default function sort_strings_by_length_and_position(arr, prefer_position = 10, fix_min_length = 0, immutable=false) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  try {\n    // prepare ratings by length\n    let ascending = sort_strings_by_length_asc([...arr])\n    if (!ascending[0]) {\n      return arr\n    }\n    // prepare ratings by position\n    let arr_positions = {}\n    for (let i in arr) {\n      let string = arr[i]\n      arr_positions[string] = i\n    }\n    // compile ratings\n    // ${this} in [].sort()\n    let that = {\n      min_length: ascending[0].length,\n      max_length: ascending[ascending.length - 1].length,\n      min_position: 0,\n      max_position: arr.length,\n      delta_position: arr.length,\n      arr_positions: arr_positions,\n      prefer_position: prefer_position,\n    }\n    // ${this} fix & finish\n    if (fix_min_length) {\n      that.fix_min_length = fix_min_length\n      that.min_length = fix_min_length\n    }\n    that.delta_length = that.max_length - that.min_length\n    // done\n    return arr.sort(sort_strings_by_length_and_position_asc__helper.bind(that))\n  } catch (e) {\n    console.error('invalid input array to sort_strings_by_length_and_position()')\n    return arr\n  }\n};\n\n// helper function:\nfunction sort_strings_by_length_and_position_asc__helper(a, b) {\n  // if length is less than absolute minimum, use absolute minimum\n  let a_length = a.length\n  let b_length = b.length\n  if (this.fix_min_length) {\n    if (a.length < this.fix_min_length) a_length = this.fix_min_length\n    if (b.length < this.fix_min_length) b_length = this.fix_min_length\n  }\n  // lower number == good (prefer shorter words)\n  let a_rating_length = ((a_length - this.min_length) / this.delta_length)\n  let b_rating_length = ((b_length - this.min_length) / this.delta_length)\n  // lower number == good (lower index in array, so started closer to #1)\n  let a_position_length = ((this.arr_positions[a] - this.min_position) / this.delta_position) * this.prefer_position\n  let b_position_length = ((this.arr_positions[b] - this.min_position) / this.delta_position) * this.prefer_position\n  // combine the two\n  return (a_rating_length + a_position_length) - (b_rating_length + b_position_length)\n\n}\n","/**\n * Sort strings by relevance (matching words in list)\n * Strings will be promoted if they match most words in list, and have fewest remaining characters.\n * @param arr {Array<String>} - list of strings\n *      (this function modifies the original array, using .sort())\n * @param matchList {array} - list of words -\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @returns {array} - sorted array\n */\nexport default function sort_strings_by_matches_in_list(arr, matchList, immutable=false) {\n\tif (!arr) return []\n\tif (immutable) arr = [...arr]\n\tlet ratings = {};\n\tfor (let str of arr) {\n\t\tlet string = str.replace(/[^a-z0-9]/gi, '');\n\t\tlet count = 0;\n\t\tfor (let word of matchList) {\n\t\t\tif (string.includes(word)) {\n\t\t\t\tcount++;\n\t\t\t\tstring = string.replace(word, '');\n\t\t\t}\n\t\t}\n\t\tratings[str] = count;\n\t}\n\treturn arr.sort(sort_strings_by_matches_in_list__helper.bind(ratings));\n};\n\nfunction sort_strings_by_matches_in_list__helper(a, b) {\n\tlet a_score = this[a] || 0;\n\tlet b_score = this[b] || 0;\n\treturn b_score - a_score;\n}\n","/**\n * Sort array of strings by separate dictionary of [{string:rating},]\n * However, will be sorted not in relation to other ratings, but in relation to zero 0.\n * If higher than 0, will be promoted. Lower than 0 will be demoted to back of list.\n * (Todo: File/Function should be renamed, to reflect this relation to zero!)\n * @param arr {Array.<String>} - array of strings\n * @param preferences {object} - dictionary of {string:rating}\n *      rating lt 0 == bad, gt 0 == good, if undefined, default 0\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nexport default function sort_strings_by_rating(arr, preferences, immutable=false) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  // compile ratings\n  let ratings = {}\n  for (let string of arr) {\n    // from dictionary of {string:rating}\n    // good == above zero; bad == below zero;\n    ratings[string] = preferences[string] || 0\n  }\n  return arr.sort(sort_strings_by_rating__helper.bind(ratings))\n};\n\n// helper function:\nfunction sort_strings_by_rating__helper(a, b) {\n  let a_rating = this[a]\n  let b_rating = this[b]\n  // prefer higher number\n  // if b is higher, then rate it better than a\n  return b_rating - a_rating\n}\n\n","/**\n * Sort array of strings by separate dictionary of [{string:rating},], and\n * also by position in array. Items at front of array will be rated higher.\n * @param arr {Array.<String>} - array of strings\n * @param ratings {object} - dictionary of {string:rating}\n *      ratings does not have to contain an entry for each arr item\n *          if missing, will be given default 0\n *      likewise, it may contain more entries than arr,\n *          extras will be ignored\n * @param multiply_position {number} - make position x times more important than rating\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nexport default function sort_strings_by_rating_and_position(\n  arr,\n  ratings,\n  multiply_position = 1,\n  immutable=false\n) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  let that = {}\n\n  // ratings\n  that.min_rating = null\n  that.max_rating = null\n  that.ratings = ratings\n  for (let str in ratings) {\n    let rate = ratings[str]\n    // compare ratings to each other\n    if (that.min_rating === null || rate < that.min_rating) {\n      that.min_rating = rate\n    }\n    if (that.max_rating === null || rate > that.max_rating) {\n      that.max_rating = rate\n    }\n  }\n  that.delta_rating = that.max_rating - that.min_rating\n  that.median_rating = that.min_rating + that.delta_rating / 2\n\n  // prepare position indexes\n  that.min_index = 0\n  that.max_index = arr.length - 1\n  that.indexes = {}\n  for (let i in arr) {\n    // count up - first item = 0, last item = (length-1)\n    let string = arr[i]\n    that.indexes[string] = i\n  }\n  that.delta_index = that.max_index - that.min_index\n  that.multiply_position = multiply_position\n\n  // sort\n  return arr.sort(sort_strings_by_rating_and_position__helper.bind(that))\n}\n\n// helper function:\nfunction sort_strings_by_rating_and_position__helper(a, b) {\n  // higher == better\n  // normalized to 0-1 range\n  // highest rating gets 1, lowest rating gets 0\n  let a_rating =\n    (this.delta_rating -\n      (this.max_rating - (typeof this.ratings[a] !== \"undefined\" ? this.ratings[a] : this.median_rating))) /\n    this.delta_rating\n  let b_rating =\n    (this.delta_rating -\n      (this.max_rating - (typeof this.ratings[b] !== \"undefined\" ? this.ratings[b] : this.median_rating))) /\n    this.delta_rating\n\n  // higher == better\n  // normalized to 0-1 range\n  // lowest index gets 1, highest index gets 0\n  // (multiply_position to make position score more important than rating score)\n  let a_index = ((this.max_index - this.indexes[a]) / this.delta_index) * this.multiply_position\n  let b_index = ((this.max_index - this.indexes[b]) / this.delta_index) * this.multiply_position\n\n  // combine the two\n  // if b is higher, then sort it closer to front of array compared to a\n  return b_rating + b_index - (a_rating + a_index)\n}\n","/**\n * NOT [].sort(). Simply combines multiple arrays, one item from each array at a time.\n * Like taking two decks of cards, and making one double deck, by taking one card at a time from each deck.\n * But can be more than 2 arrays! Pass in as many as needed. Will take one item from each, at a time.\n * @param arr1 {Array.<String>} - array of strings\n * @param arr2 {Array.<String>} - array of strings\n * @return {Array.<String>} - array of strings, combined!\n */\nexport default function sort_strings_combine_lists(arr1, arr2) {\n  if (!arr1 && !arr2) return []\n  if (!arr1 && arr2) return arr2\n  if (arr1 && !arr2) return arr1\n  let list = new Set();\n\n  /*\n   * setup pointers (will be incremented each time new item is taken from array)\n   */\n  let ai = {};\n  for (let i in arguments) {\n    // will be incremented (ai[i]++) before each use\n    ai[i] = -1; // on first use will === 0\n  }\n\n  /*\n   * iterate all passed-in arrays, one by one, take one new item at a time\n   */\n  for (let y = 0; y < 50; y++) {\n    for (let i in arguments) {\n      let arr = arguments[i];\n      let str = arr[ai[i]++];\n      if (str) {\n        list.add(str)\n      }\n    }\n  }\n\n  // console.log('sort_strings_combine_lists list', list);\n  return [...list];\n  // return arr1;\n\n}\n\n","import _sort_strings_by_extension from './sort_strings/sort_strings_by_extension.js';\nimport _sort_strings_by_length_and_position from './sort_strings/sort_strings_by_length_and_position.js';\nimport _sort_strings_by_length_asc from './sort_strings/sort_strings_by_length_asc.js';\nimport _sort_strings_by_matches_in_list from './sort_strings/sort_strings_by_matches_in_list.js';\nimport _sort_strings_by_rating from './sort_strings/sort_strings_by_rating.js';\nimport _sort_strings_by_rating_and_position from './sort_strings/sort_strings_by_rating_and_position.js';\nimport _sort_strings_combine_lists from './sort_strings/sort_strings_combine_lists.js';\n\nexport let sort_strings_by_extension = _sort_strings_by_extension\nexport let sort_strings_by_length_and_position = _sort_strings_by_length_and_position\nexport let sort_strings_by_length_asc = _sort_strings_by_length_asc\nexport let sort_strings_by_matches_in_list = _sort_strings_by_matches_in_list\nexport let sort_strings_by_rating = _sort_strings_by_rating\nexport let sort_strings_by_rating_and_position = _sort_strings_by_rating_and_position\nexport let sort_strings_combine_lists = _sort_strings_combine_lists\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","/**\n * Sort array of objects by property\n *    ```\n *      let list = [{name:'Pasha',age:8}, {name:'Masha',age:9}]\n *      sort_objects_by_property(list, 'age') // Masha will move up to first place\n *    ```\n *    Like `sort_objects_by_property_and_position()`, but without caring about the position.\n *    NOTE: your original array will be modified. Use [...arr] destructuring to keep immutable.\n * @param arr {Array.<Object>} - array of objects to be sorted\n * @param prop1_key {string} - property to use, to sort by. Each object in array must contain this key\n * @param prop1_asc {boolean} - by default, will sort DESC, but if this is true, will sort ASC\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<Object>} - array of objects, sorted\n */\nexport default function sort_objects_by_property(arr, prop1_key, prop1_asc = false, immutable=false) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  return arr.sort(sort_objects_by_property__helper.bind({ arr, prop1_key, prop1_asc }));\n};\n// helper function:\nfunction sort_objects_by_property__helper(a, b) {\n  // sort by rating\n  let a_rating = a[this.prop1_key];\n  let b_rating = b[this.prop1_key];\n  // sort order\n  if (this.prop1_asc) {\n    // prefer lower number\n    // if b is lower, then rate it better than a\n    return a_rating - b_rating;\n  } else {\n    // prefer higher number\n    // if b is higher, then rate it better than a\n    return b_rating - a_rating;\n  }\n}\n","/**\n * Sort array of strings by separate dictionary of [{string:rating},], and\n * also by position in array. Items at front of array will be rated higher.\n * @param arr {Array.<String>} - array of strings\n * @param rating_key {string} - which property of object to use as sort rating (must be a number)\n * @param multiply_position {number} - make position x times more important than rating\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nexport default function (arr, rating_key, multiply_position = 1, immutable=false) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  let that = {}\n\n  // rating_key\n  that.min_rating = null\n  that.max_rating = null\n  that.rating_key = rating_key\n  for (let obj of arr) {\n    let rate = obj[rating_key]\n    // compare ratings to each other\n    if (that.min_rating === null || rate < that.min_rating) {\n      that.min_rating = rate\n    }\n    if (that.max_rating === null || rate > that.max_rating) {\n      that.max_rating = rate\n    }\n  }\n  that.delta_rating = that.max_rating - that.min_rating\n  that.median_rating = that.min_rating + (that.delta_rating/2)\n\n  // prepare position\n  that.min_index = 0\n  that.max_index = arr.length - 1\n  for (let i in arr) {\n    // count up - first item = 0, last item = (length-1)\n    arr[i].index = i\n  }\n  that.delta_index = that.max_index - that.min_index\n  that.multiply_position = multiply_position\n\n  // sort\n  return arr.sort(sort_strings_by_rating_and_position__helper.bind(that))\n};\n\n// helper function:\nfunction sort_strings_by_rating_and_position__helper(a, b) {\n\n  // higher == better\n  // normalized to 0-1 range\n  // highest rating gets 1, lowest rating gets 0\n  let a_rating = (this.delta_rating - (this.max_rating - (typeof a[this.rating_key]!=='undefined' ? a[this.rating_key] : this.median_rating))) / this.delta_rating\n  let b_rating = (this.delta_rating - (this.max_rating - (typeof b[this.rating_key]!=='undefined' ? b[this.rating_key] : this.median_rating))) / this.delta_rating\n\n  // higher == better\n  // normalized to 0-1 range\n  // lowest index gets 1, highest index gets 0\n  // (multiply_position to make position score more important than rating score)\n  let a_index = ((this.max_index - a.index) / this.delta_index) * this.multiply_position\n  let b_index = ((this.max_index - b.index) / this.delta_index) * this.multiply_position\n\n  // combine the two\n  // if b is higher, then sort it closer to front of array compared to a\n  return (b_rating + b_index) - (a_rating + a_index)\n}\n","import _sort_objects_by_property from './sort_objects/sort_objects_by_property.js'\nimport _sort_objects_by_property_and_position from './sort_objects/sort_objects_by_property_and_position.js'\n\nexport let sort_objects_by_property = _sort_objects_by_property\nexport let sort_objects_by_property_and_position = _sort_objects_by_property_and_position\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","/**\n * Flatten a matrix of strings -\n *    - generate list of all unique possible cases, from matrix of strings\n * @params matrix {array} - array of arrays of strings, in a matrix format\n * @returns {array} - array of arrays of strings -\n *    - no longer a matrix, but just lists of phrases (phrase = array of strings)\n */\n// export const matrix_flatten_to_arrays = function (matrix) {\n//   if (matrix.length === 1) {\n//     return matrix[0]\n//   } else {\n//     let result = []\n//     let allCasesOfRest = matrix_flatten_to_arrays(matrix.slice(1)) // recur with the rest of matrixay\n//     for (let i = 0; i < allCasesOfRest.length; i++) {\n//       for (let j = 0; j < matrix[0].length; j++) {\n//         result.push(matrix[0][j] + allCasesOfRest[i])\n//       }\n//     }\n//     return result\n//   }\n// }\n/**\n * Flatten a matrix of strings -\n *    - generate list of all unique possible cases, from matrix of strings\n * @params matrix {array} - array of arrays of strings, in a matrix format\n * @returns {array} - array of combined strings, separated by space\n */\nexport const matrix_flatten_to_strings = function (matrix) {\n  if (!matrix.length) {\n    return []\n  } else if (matrix.length === 1) {\n    return matrix[0]\n  } else {\n    let result = []\n    let allCasesOfRest = matrix_flatten_to_strings(matrix.slice(1)) // recur with the rest of matrixay\n    for (let i = 0; i < allCasesOfRest.length; i++) {\n      for (let j = 0; j < matrix[0].length; j++) {\n        result.push(matrix[0][j] + \" \" + allCasesOfRest[i])\n      }\n    }\n    return result\n  }\n}\n\n/**\n * Shuffle some strings\n *    do not allow two strings to repeat which have the same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_last_strict = function (strs) {\n  let output = []\n  let prev_ll = \"\" // last letter\n  let prev_strs_length = 0\n\n  // while loop as long as it takes! (should only be for a few milliseconds)\n  while (true) {\n    // prevent infinite loop - if strs arr length has not been changed,\n    // then we've reached a stalemate - no new items will be used\n    if (strs.length === prev_strs_length) {\n      break\n    } else {\n      prev_strs_length = strs.length\n    }\n    // each while loop, we'll take items out of the strs arr\n    for (let i = 0; i < strs.length; i++) {\n      // examine current item\n      let str = strs[i]\n      let ll = str[str.length - 1]\n      // if current string starts with different letter than previous string,\n      // add it to output. Else, ignore it, to examine it again next iteration\n      if (prev_ll !== ll) {\n        // add current item to output arr\n        output.push(str)\n        prev_ll = ll\n        // remove current item from input arr\n        strs.splice(i, 1)\n        i--\n      }\n    }\n  }\n\n  return [...new Set([...output, ...strs])]\n}\n\n/**\n * Shuffle some strings\n *    do not allow two strings to repeat which have the same first letter or same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_first_last_strict = function (strs) {\n  let output = []\n  let prev_fl = \"\" // first letter\n  let prev_ll = \"\" // last letter\n  let prev_strs_length = 0\n\n  // while loop as long as it takes! (should only be for a few milliseconds)\n  while (true) {\n    // prevent infinite loop - if strs arr length has not been changed,\n    // then we've reached a stalemate - no new items will be used\n    if (strs.length === prev_strs_length) {\n      break\n    } else {\n      prev_strs_length = strs.length\n    }\n    // each while loop, we'll take items out of the strs arr\n    for (let i = 0; i < strs.length; i++) {\n      // examine current item\n      let str = strs[i]\n      let fl = str[0]\n      let ll = str[str.length - 1]\n      // if current string starts with different letter than previous string,\n      // add it to output. Else, ignore it, to examine it again next iteration\n      if (prev_ll !== ll && prev_fl !== fl) {\n        // add current item to output arr\n        output.push(str)\n        prev_fl = fl\n        prev_ll = ll\n        // remove current item from input arr\n        strs.splice(i, 1)\n        i--\n      }\n    }\n  }\n\n  return [...new Set([...output, ...strs])]\n}\n\n/**\n * Shuffle list of strings\n *    do not allow two strings to repeat which have the same first letter or same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_last = function (input_strs = []) {\n  let memory_strs = []\n  let unique_strs = []\n\n  // console.time(\"1000 loops\")\n  let loops = 0\n  let old_strs = \"\"\n  infinite_loop: while (loops < 1000) {\n    loops++\n\n    // don't waste time on the same value\n    let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0]\n    if (new_strs === old_strs) {\n      break infinite_loop\n    }\n    old_strs = new_strs\n\n    // no more inputs\n    if (!input_strs.length && !memory_strs.length) {\n      break infinite_loop\n    }\n\n    // first time\n    if (!unique_strs.length) {\n      unique_strs.push(input_strs.shift())\n      continue infinite_loop\n    }\n\n    // last added string\n    let unique_str = unique_strs[unique_strs.length - 1] || \"\" // last added\n    let unique_str_ll = unique_str[unique_str.length - 1] || \"\"\n\n    let unique_str2 = unique_strs[unique_strs.length - 2] || \"\" // 2nd to last added\n    let unique_str2_ll = unique_str2[unique_str2.length - 1] || \"\"\n\n    // insert new str\n    // from memory\n    if (memory_strs.length) {\n      for (let str of memory_strs) {\n        if (!str) continue\n        let str_ll = str[str.length - 1]\n        if (str_ll === unique_str_ll && str_ll === unique_str2_ll) {\n          // not unique\n          continue\n        } else {\n          // add unique\n          unique_strs.push(memory_strs.shift())\n          continue infinite_loop\n        }\n      }\n    }\n\n    // insert new str\n    // from input\n    if (input_strs[0]) {\n      let str = input_strs.shift()\n      let str_ll = str[str.length - 1]\n      if (str_ll === unique_str_ll && str_ll === unique_str2_ll) {\n        // not unique\n        memory_strs.push(str)\n      } else {\n        // add unique\n        unique_strs.push(str)\n      }\n    }\n  }\n  // console.timeEnd(\"1000 loops\")\n\n  return [...unique_strs, ...memory_strs, ...input_strs]\n}\n\n/**\n * Shuffle list of strings\n *    do not allow two strings to repeat which have the same first letter or same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_first_last = function (input_strs = []) {\n  let memory_strs = []\n  let unique_strs = []\n\n  // console.time(\"1000 loops\")\n  let loops = 0\n  let old_strs = \"\"\n  infinite_loop: while (loops < 1000) {\n    loops++\n\n    // don't waste time on the same value\n    let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0]\n    if (new_strs === old_strs) {\n      break infinite_loop\n    }\n    old_strs = new_strs\n\n    // no more inputs\n    if (!input_strs.length && !memory_strs.length) {\n      break infinite_loop\n    }\n\n    // first time\n    if (!unique_strs.length) {\n      unique_strs.push(input_strs.shift())\n      continue infinite_loop\n    }\n\n    // last added string\n    let unique_str = unique_strs[unique_strs.length - 1] || \"\" // last added\n    let unique_str_fl = unique_str[0] || \"\"\n    let unique_str_ll = unique_str[unique_str.length - 1] || \"\"\n\n    let unique_str2 = unique_strs[unique_strs.length - 2] || \"\" // 2nd to last added\n    let unique_str2_fl = unique_str2[0] || \"\"\n    let unique_str2_ll = unique_str2[unique_str2.length - 1] || \"\"\n\n    // insert new str\n    // from memory\n    if (memory_strs.length) {\n      for (let str of memory_strs) {\n        if (!str) continue\n        let str_fl = str[0]\n        let str_ll = str[str.length - 1]\n        if (\n          (str_fl === unique_str_fl && str_fl === unique_str2_fl) ||\n          (str_ll === unique_str_ll && str_ll === unique_str2_ll)\n        ) {\n          // not unique\n          continue\n        } else {\n          // add unique\n          unique_strs.push(memory_strs.shift())\n          continue infinite_loop\n        }\n      }\n    }\n\n    // insert new str\n    // from input\n    if (input_strs[0]) {\n      let str = input_strs.shift()\n      let str_fl = str[0]\n      let str_ll = str[str.length - 1]\n      if (\n        (str_fl === unique_str_fl && str_fl === unique_str2_fl) ||\n        (str_ll === unique_str_ll && str_ll === unique_str2_ll)\n      ) {\n        // not unique\n        memory_strs.push(str)\n      } else {\n        // add unique\n        unique_strs.push(str)\n      }\n    }\n  }\n  // console.timeEnd(\"1000 loops\")\n\n  return [...unique_strs, ...memory_strs, ...input_strs]\n}\n\n/**\n * Shuffle some strings\n *    do not allow two strings to repeat which have the same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_last3_strict = function (strs) {\n  let output = []\n  let prev_ll = \"\" // last letter\n  let prev_strs_length = 0\n\n  // while loop as long as it takes! (should only be for a few milliseconds)\n  while (true) {\n    // prevent infinite loop - if strs arr length has not been changed,\n    // then we've reached a stalemate - no new items will be used\n    if (strs.length === prev_strs_length) {\n      break\n    } else {\n      prev_strs_length = strs.length\n    }\n    // each while loop, we'll take items out of the strs arr\n    for (let i = 0; i < strs.length; i++) {\n      // examine current item\n      let str = strs[i]\n      let ll = str[str.length - 3] + str[str.length - 2] + str[str.length - 1]\n      // if current string starts with different letter than previous string,\n      // add it to output. Else, ignore it, to examine it again next iteration\n      if (prev_ll !== ll) {\n        // add current item to output arr\n        output.push(str)\n        prev_ll = ll\n        // remove current item from input arr\n        strs.splice(i, 1)\n        i--\n      }\n    }\n  }\n\n  return [...new Set([...output, ...strs])]\n}\n\n/**\n * Shuffle list of strings\n *    do not allow two strings to repeat which have the same first letter or same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_first_last_loose = function (input_strs = []) {\n  let memory_strs = []\n  let unique_strs = []\n\n  // console.time(\"1000 loops\")\n  let loops = 0\n  let old_strs = \"\"\n  infinite_loop: while (loops < 1000) {\n    loops++\n\n    // don't waste time on the same value\n    let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0]\n    if (new_strs === old_strs) {\n      break infinite_loop\n    }\n    old_strs = new_strs\n\n    // no more inputs\n    if (!input_strs.length && !memory_strs.length) {\n      break infinite_loop\n    }\n\n    // first time\n    if (!unique_strs.length) {\n      unique_strs.push(input_strs.shift())\n      continue infinite_loop\n    }\n\n    // last added string\n    let unique_str = unique_strs[unique_strs.length - 1] || \"\" // last added\n    let unique_str_fl = unique_str[0] || \"\"\n    let unique_str_ll = unique_str[unique_str.length - 1] || \"\"\n\n    let unique_str2 = unique_strs[unique_strs.length - 2] || \"\" // 2nd to last added\n    let unique_str2_fl = unique_str2[0] || \"\"\n    let unique_str2_ll = unique_str2[unique_str2.length - 1] || \"\"\n\n    let unique_str3 = unique_strs[unique_strs.length - 3] || \"\" // 2nd to last added\n    let unique_str3_fl = unique_str3[0] || \"\"\n    let unique_str3_ll = unique_str3[unique_str3.length - 1] || \"\"\n\n    // insert new str\n    // from memory\n    if (memory_strs.length) {\n      for (let str of memory_strs) {\n        if (!str) continue\n        let str_fl = str[0]\n        let str_ll = str[str.length - 1]\n        if (\n          (str_fl === unique_str_fl && str_fl === unique_str2_fl && str_fl === unique_str3_fl) ||\n          (str_ll === unique_str_ll && str_ll === unique_str2_ll && str_ll === unique_str3_ll)\n        ) {\n          // not unique\n          continue\n        } else {\n          // add unique\n          unique_strs.push(memory_strs.shift())\n          continue infinite_loop\n        }\n      }\n    }\n\n    // insert new str\n    // from input\n    if (input_strs[0]) {\n      let str = input_strs.shift()\n      let str_fl = str[0]\n      let str_ll = str[str.length - 1]\n      if (\n        (str_fl === unique_str_fl && str_fl === unique_str2_fl && str_fl === unique_str3_fl) ||\n        (str_ll === unique_str_ll && str_ll === unique_str2_ll && str_ll === unique_str3_ll)\n      ) {\n        // not unique\n        memory_strs.push(str)\n      } else {\n        // add unique\n        unique_strs.push(str)\n      }\n    }\n  }\n  // console.timeEnd(\"1000 loops\")\n\n  return [...unique_strs, ...memory_strs, ...input_strs]\n}\n\n/**\n * Shuffle list of strings\n *    do not allow two strings to repeat which have the same first letter or same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_last3 = function (input_strs = []) {\n  let memory_strs = []\n  let unique_strs = []\n\n  // console.time(\"1000 loops\")\n  let loops = 0\n  let old_strs = \"\"\n  infinite_loop: while (loops < 1000) {\n    loops++\n\n    // don't waste time on the same value\n    let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0]\n    if (new_strs === old_strs) {\n      break infinite_loop\n    }\n    old_strs = new_strs\n\n    // no more inputs\n    if (!input_strs.length && !memory_strs.length) {\n      break infinite_loop\n    }\n\n    // first time\n    if (!unique_strs.length) {\n      unique_strs.push(input_strs.shift())\n      continue infinite_loop\n    }\n\n    // last added string\n    let unique_str = unique_strs[unique_strs.length - 1] || \"\" // last added\n    let unique_str_ll = unique_str[unique_str.length - 1] || \"\"\n\n    let unique_str2 = unique_strs[unique_strs.length - 2] || \"\" // 2nd to last added\n    let unique_str2_ll = unique_str2[unique_str2.length - 1] || \"\"\n\n    // insert new str\n    // from memory\n    if (memory_strs.length) {\n      for (let str of memory_strs) {\n        if (!str) continue\n        let str_ll = str[str.length - 1]\n        if (str_ll === unique_str_ll && str_ll === unique_str2_ll) {\n          // not unique\n          continue\n        } else {\n          // add unique\n          unique_strs.push(memory_strs.shift())\n          continue infinite_loop\n        }\n      }\n    }\n\n    // insert new str\n    // from input\n    if (input_strs[0]) {\n      let str = input_strs.shift()\n      let str_ll = str[str.length - 1]\n      if (str_ll === unique_str_ll && str_ll === unique_str2_ll) {\n        // not unique\n        memory_strs.push(str)\n      } else {\n        // add unique\n        unique_strs.push(str)\n      }\n    }\n  }\n  // console.timeEnd(\"1000 loops\")\n\n  return [...unique_strs, ...memory_strs, ...input_strs]\n}\n\n/**\n * Shuffle list of strings\n *    do not allow two strings to repeat which have the same first letter or same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_first3 = function (input_strs = []) {\n  let memory_strs = []\n  let unique_strs = []\n\n  // console.time(\"1000 loops\")\n  let loops = 0\n  let old_strs = \"\"\n  infinite_loop: while (loops < 1000) {\n    loops++\n\n    // don't waste time on the same value\n    let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0]\n    if (new_strs === old_strs) {\n      break infinite_loop\n    }\n    old_strs = new_strs\n\n    // no more inputs\n    if (!input_strs.length && !memory_strs.length) {\n      break infinite_loop\n    }\n\n    // first time\n    if (!unique_strs.length) {\n      unique_strs.push(input_strs.shift())\n      continue infinite_loop\n    }\n\n    // last added string\n    let unique_str = unique_strs[unique_strs.length - 1] || \"\" // last added\n    let unique_str_fl = unique_str[0] || \"\"\n\n    let unique_str2 = unique_strs[unique_strs.length - 2] || \"\" // 2nd to last added\n    let unique_str2_fl = unique_str2[0] || \"\"\n\n    let unique_str3 = unique_strs[unique_strs.length - 3] || \"\" // 3rd to last added\n    let unique_str3_fl = unique_str3[0] || \"\"\n\n    // insert new str\n    // from memory\n    if (memory_strs.length) {\n      for (let str of memory_strs) {\n        if (!str) continue\n        let str_fl = str[0]\n        if (str_fl === unique_str_fl && str_fl === unique_str2_fl && str_fl === unique_str3_fl) {\n          // not unique\n          continue\n        } else {\n          // add unique\n          unique_strs.push(memory_strs.shift())\n          continue infinite_loop\n        }\n      }\n    }\n\n    // insert new str\n    // from input\n    if (input_strs[0]) {\n      let str = input_strs.shift()\n      let str_fl = str[0]\n      if (str_fl === unique_str_fl && str_fl === unique_str2_fl && str_fl === unique_str3_fl) {\n        // not unique\n        memory_strs.push(str)\n      } else {\n        // add unique\n        unique_strs.push(str)\n      }\n    }\n  }\n  // console.timeEnd(\"1000 loops\")\n  // console.log(\"unique_strs\", unique_strs)\n  return [...unique_strs, ...memory_strs, ...input_strs]\n}\n\n/**\n * Shuffle list of strings\n *    do not allow two strings to repeat which have the same first letter or same last letter\n * @params strs {array} - array of strings\n * @returns {array} - new array (immutable), of shuffled strs\n */\nexport const strings_shuffle_first2 = function (input_strs = []) {\n  let memory_strs = []\n  let unique_strs = []\n\n  // console.time(\"1000 loops\")\n  let loops = 0\n  let old_strs = \"\"\n  infinite_loop: while (loops < 1000) {\n    loops++\n\n    // don't waste time on the same value\n    let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0]\n    if (new_strs === old_strs) {\n      break infinite_loop\n    }\n    old_strs = new_strs\n\n    // no more inputs\n    if (!input_strs.length && !memory_strs.length) {\n      break infinite_loop\n    }\n\n    // first time\n    if (!unique_strs.length) {\n      unique_strs.push(input_strs.shift())\n      continue infinite_loop\n    }\n\n    // last added string\n    let unique_str = unique_strs[unique_strs.length - 1] || \"\" // last added\n    let unique_str_fl = unique_str[0] || \"\"\n\n    let unique_str2 = unique_strs[unique_strs.length - 2] || \"\" // 2nd to last added\n    let unique_str2_fl = unique_str2[0] || \"\"\n\n    // insert new str\n    // from memory\n    if (memory_strs.length) {\n      for (let str of memory_strs) {\n        if (!str) continue\n        let str_fl = str[0]\n        if (str_fl === unique_str_fl && str_fl === unique_str2_fl) {\n          // not unique\n          continue\n        } else {\n          // add unique\n          unique_strs.push(memory_strs.shift())\n          continue infinite_loop\n        }\n      }\n    }\n\n    // insert new str\n    // from input\n    if (input_strs[0]) {\n      let str = input_strs.shift()\n      let str_fl = str[0]\n      if (str_fl === unique_str_fl && str_fl === unique_str2_fl) {\n        // not unique\n        memory_strs.push(str)\n      } else {\n        // add unique\n        unique_strs.push(str)\n      }\n    }\n  }\n  // console.timeEnd(\"1000 loops\")\n  // console.log(\"unique_strs\", unique_strs)\n  return [...unique_strs, ...memory_strs, ...input_strs]\n}\n\n//\n// export const strings_shuffle = function(input_strs, {first=false, last=false, repeat=3, chars=1}) {\n//\n//   let memory_strs = []\n//   let unique_strs = []\n//\n//   // console.time(\"1000 loops\")\n//   let loops = 0\n//   let old_strs = \"\"\n//   infinite_loop: while (loops < 1000) {\n//     loops++\n//\n//     // don't waste time on the same value\n//     let new_strs = input_strs[0] + memory_strs[0] + unique_strs[0]\n//     if (new_strs === old_strs) {\n//       break infinite_loop\n//     }\n//     old_strs = new_strs\n//\n//     // no more inputs\n//     if (!input_strs.length && !memory_strs.length) {\n//       break infinite_loop\n//     }\n//\n//     // first time\n//     if (!unique_strs.length) {\n//       unique_strs.push(input_strs.shift())\n//       continue infinite_loop\n//     }\n//\n//     // last string\n//     let unique_str = unique_strs[unique_strs.length - 1] || \"\"\n//     let unique_str_fl = unique_str[0] || \"\"\n//     let unique_str_ll = unique_str[unique_str.length - 1] || \"\" // last character\n//     // 2nd last string\n//     let unique_str2 = unique_strs[unique_strs.length - 2] || \"\"\n//     let unique_str2_fl = unique_str2[0] || \"\"\n//     let unique_str2_ll = unique_str2[unique_str2.length - 1] || \"\" // last character\n//     // 3rd last string\n//     let unique_str3 = unique_strs[unique_strs.length - 3] || \"\"\n//     let unique_str3_fl = unique_str3[0] || \"\"\n//     let unique_str3_ll = unique_str3[unique_str3.length - 1] || \"\" // last character\n//\n//     // insert new str\n//     // from memory\n//     if (memory_strs.length) {\n//       for (let str of memory_strs) {\n//         if (!str) continue\n//         let str_fl = str[0]\n//         let str_ll = str[str.length - 1]\n//         if (\n//           (str_fl === unique_str_fl && str_fl === unique_str2_fl && str_fl === unique_str3_fl) ||\n//           (str_ll === unique_str_ll && str_ll === unique_str2_ll && str_ll === unique_str3_ll)\n//         ) {\n//           // not unique\n//           continue\n//         } else {\n//           // add unique\n//           unique_strs.push(memory_strs.shift())\n//           continue infinite_loop\n//         }\n//       }\n//     }\n//\n//     // insert new str\n//     // from input\n//     labeled_if:\n//     if (input_strs[0]) {\n//       let str = input_strs.shift()\n//       let str_fl = str[0]\n//       let str_ll = str[str.length - 1]\n//       if (\n//         (str_fl === unique_str_fl && str_fl === unique_str2_fl && str_fl === unique_str3_fl) ||\n//         (str_ll === unique_str_ll && str_ll === unique_str2_ll && str_ll === unique_str3_ll)\n//       ) {\n//         // not unique\n//         memory_strs.push(str)\n//       } else {\n//         // add unique\n//         unique_strs.push(str)\n//       }\n//     }\n//   }\n//\n//   return [...unique_strs, ...memory_strs, ...input_strs]\n// }\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\n PARSE CLI ARGS\n\n Example: `node myScript.js -f1 --flag2 var1=whatever`\n args = {\n  __node__: '/usr/local/bin/node',\n  __file__: '~/my/path/myScript.js',\n  -f1: undefined,\n  --flag2: undefined,\n  var1: 'whatever',\n }\n Use args.hasOwnProperty('--flag2') to check for usage of\n flags which have no value.\n\n NOTE:\n Too keep things simple, limit arguments to the format shown\n in example above.\n This particular parser is not compatible with args values\n which come after a space ' ' instead of an '=' equal symbol.\n\n */\nexport function parse_cli_args() {\n  // BROWSER JS (front-end) DOES NOT HAVE CLI ARGUMENTS\n  if (typeof process === \"undefined\") {\n    return {}\n  }\n  // NODE JS (back-end)\n  let args = {}\n  for (let j = 0; j < process.argv.length; j++) {\n    let argv = process.argv[j]\n    if (j === 0) {\n      // first arg is node path\n      args[\"__node__\"] = argv\n    } else if (j === 1) {\n      // first arg is script path\n      args[\"__file__\"] = argv\n    } else {\n      // read each CLI argument as {key:value}\n      let arr = argv.split(\"=\")\n      // if no value (arr[1] is undefined), that's ok\n      args[arr[0]] = arr[1]\n    }\n  }\n  return args\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","/**\n * If you want to execute a function LATER\n * but want to set its arguments NOW...\n * Let the curry simmer in the slow cooker until you're ready to eat it. :)\n * Useful with Promise.all or lists of values each of which you'd like to run through a function.\n * ```\n *    __.for_each_promise_all([1000,2000,3000], __.call_later(__.sleep, 1000))\n * ```\n * @param {function} func - function you want to call later (to curry). It can be bound\n * @param {array} args - array of arguments (optional, but no need to use this without arguments)\n */\nexport const call_later = function(func, args){\n  return function(){\n    return func(args)\n  }\n}\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","export const average = function (values) {\n\tlet sum = values.reduce((previous, current) => current += previous);\n\treturn sum / values.length;\n};\n\nexport const mean = function (values) {\n\tvalues.sort((a, b) => a - b);\n\tlet lowMiddle = Math.floor((values.length - 1) / 2);\n\tlet highMiddle = Math.ceil((values.length - 1) / 2);\n\treturn (values[lowMiddle] + values[highMiddle]) / 2;\n};\n\nexport const is_number = function (variable) {\n\tif (variable === null) {\n\t\treturn false;\n\t}\n\tif (typeof variable === 'string') {\n\t\tvariable = Number(variable);\n\t}\n\tif (isNaN(variable)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","/**\n * @param {object} obj1\n * @param {object} obj2\n * @returns {boolean} - true if equal\n */\nexport const objects_are_equal = function objects_are_equal(obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2)\n}\n\n/**\n * Create an object from array. Object's keys will made from Array's values.\n *    Use this to filter an array, keep only unique values, and maybe make something of them.\n *    This might be faster than using ES6 `[...new Set(...arr)]`, because it loops only once.\n * @param {array} arr - array values will be used, keys ignored\n * @param {*} value - any value to assign to each new item in object. Default value = true.\n * @returns {object} - from array values. Duplicate array values have been removed.\n */\nexport const object_keys_from_array_values = function obj_from_array(arr, value=true) {\n  let obj = {}\n  for (let key of arr) {\n    obj[key] = value\n  }\n  return obj\n}\n\n/**\n * Return the first value in an object\n *    Iterate the object only once. Return the first value.\n * @param {object} obj\n * @returns value of first item in object\n */\nexport const obj_first_value = function obj_first_value(obj) {\n  for (let key in obj) { // doesn't loop, but that's the point!\n    return obj[key]\n    break // idk, just paranoid\n  }\n}\n\n/**\n * Return the first entry (key and value tuple) in an object\n *    Iterate the object only once. Return the first entry.\n * @param {object} obj\n * @returns value of first item in object\n */\nexport const obj_first_entry = function obj_first_value(obj) {\n  for (let key in obj) { // doesn't loop, but that's the point!\n    return [key, obj[key]]\n    break // idk, just paranoid\n  }\n}\n\n/**\n * @param {object} obj\n * @returns {boolean} - true if empty\n */\nexport const obj_is_empty = function obj_is_empty(obj) {\n  for (let prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Parse JSON variable - recursively\n * @param {*} value - Any variable type\n * @returns {*} value - Intelligently parsed. Note: Will convert stringified number to type number!\n * NOTE: JSON can not stringify ES6 types Set and Map. Stringify/parse, changes value to empty object.\n * As a workaround, before stringifying, convert Set to Array, and Map to Array of tuples.\n */\nexport const json_parse = function json_parse(value) {\n  let variable\n  // Simple parse variable\n  if (typeof value === \"string\" && (value.includes(\"[\") || value.includes(\"{\"))) {\n    try {\n      variable = JSON.parse(value) // JSON stringified array or object\n    } catch (e) {\n      try {\n        variable = JSON.parse(value.replace(/[\\r\\n]+/g, \"\").replace(/[\\t]+/g, \" \")) // edge case\n      } catch (e) {\n        variable = value.includes(\"[\") ? [] : {} // broken JSON array or object\n      }\n    }\n  } else if (value === \"true\" || value === \"false\" || \"null\" || \"undefined\") {\n    // boolean/null should NOT have been stringified\n    variable = value // string\n  } else {\n    // simple value (JSON.parse converts numbers in quotes to type number)\n    try {\n      variable = JSON.parse(value) // number\n    } catch (e) {\n      variable = value // string or undefined\n    }\n  }\n  // Parse recursively - if Object/Array\n  if (typeof variable === \"object\") {\n    // iterate all props/values\n    for (let key in variable) {\n      if (!variable.hasOwnProperty(key)) continue\n      // parse each prop/value\n      variable[key] = json_parse(variable[key])\n    }\n  }\n\n  return variable\n}\n\n/**\n * Merge key/values of two objects into one - recursively\n * @param {object} obj1 - First object, the default one\n * @param {object} obj2 - Second object, will overwrite first!\n * @returns {object} obj - Combined object\n */\nexport const obj_merge = function obj_merge(obj1, obj2) {\n  // console.log('obj1', JSON.parse(JSON.stringify(obj1)));\n  // console.log('obj2', JSON.parse(JSON.stringify(obj2)));\n  let obj = {}\n  // get keys from both objects\n  let keys = [...new Set([...Object.keys(obj1), ...Object.keys(obj2)])]\n  for (let key of keys) {\n    // both assigned ? then merge\n    if (obj1.hasOwnProperty(key) && obj2.hasOwnProperty(key)) {\n      let obj1v = obj1[key]\n      let obj2v = obj2[key]\n      // if both objects have same key, then merge\n      if (typeof obj1v !== typeof obj2v) {\n        // oh no! same key, but value is different type!\n        obj[key] = obj2v || obj1v\n        // console.warn('obj_merge(obj1, obj2) could not merge types: key/value type of each must be same: ', typeof obj1v, typeof obj2v);\n      } else {\n        // same type of value - lets try to combine...\n        switch (typeof obj1v) {\n          case \"object\":\n            // type = object\n            if (!!obj2v && !!obj1v) {\n              // both are truthy...\n              if (Array.isArray(obj2v) && Array.isArray(obj1v)) {\n                // both arrays...\n                obj[key] = [...new Set([...obj1[key], ...obj2[key]])]\n              } else if (!Array.isArray(obj2v) && !Array.isArray(obj1v)) {\n                // both dictionaries...\n                obj[key] = obj_merge(obj1[key], obj2[key])\n              } else {\n                // one is dictionary, other is array.\n                // cannot combine unlike types. Use first...\n                obj[key] = obj1[key]\n              }\n            } else {\n              // at least one is null...\n              obj[key] = obj2v || obj1v\n            }\n            break\n          default:\n            // type = undefined, function, boolean, string, number\n            obj[key] = obj2v || obj1v\n            break\n        }\n      }\n    } else if (obj2.hasOwnProperty(key)) {\n      // otherwise, use whichever one has a value\n      obj[key] = obj2[key]\n    } else {\n      // otherwise, use whichever one has a value\n      obj[key] = obj1[key]\n    }\n  }\n  // console.log('obj', obj);\n  return obj\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","export const sleep = function(ms = 0) {\n  return new Promise(r => setTimeout(r, ms))\n}\n\n/**\n * Returns output of function when executed on each item in array\n *    when fn is asynchronous (returns a Promise)\n */\nexport const for_each_promise_all = function(array, fn) {\n  return Promise.all(array.map(function(item){\n    return fn(item)\n  }))\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","/**\n * Parse and combine POST data and URL params into JavaScript object\n * @param req {object} - IMPORTANT: does not have to be real api request. Can be simple object.\n * @param req.body {object} - key/value pairs, already parsed and ready to use\n * @param req.query {object} - object of key/value pairs from URL query string\n *    This function will decodeURIComponent then parse each value.\n *    These req.query values will override values from req.body!\n * @returns {{}} - combined keys/values. Original request object will NOT be modified.\n */\nexport const aggregate_req_body_query = function (req) {\n  let query = {}\n  // body (POST data)\n  if (req.body) {\n    query = req.body\n  }\n  // query (URL parameters)\n  if (req.query) {\n    for (let key in req.query) {\n      let val = req.query[key]\n      if (val === 0) {\n        query[key] = 0\n        continue\n      }\n      if (!val) continue\n      val = decodeURIComponent(val).trim()\n      if (!val) continue\n      if (val === \"undefined\") {\n        query[key] = \"undefined\"\n        continue\n      }\n      if (val === \"null\") {\n        query[key] = \"null\"\n        continue\n      }\n      if (val === \"true\") {\n        query[key] = true\n        continue\n      }\n      if (val === \"false\") {\n        query[key] = false\n        continue\n      }\n      if (['\"', \"{\", \"[\"].includes(val[0])) {\n        try {\n          val = JSON.parse(val)\n        } catch (e) {\n          val = \"\"\n        }\n      }\n      query[key] = val\n    }\n  }\n  // combined\n  return query\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","export function str_hash (str) {\n  let hash = 0\n  if (str.length === 0) {\n    return hash\n  }\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    hash = hash & hash // Convert to 32bit integer\n  }\n  return hash+''\n}\n\nexport function str_capitalize (word) {\n  return word.charAt(0).toUpperCase() + word.slice(1)\n}\n\nexport function str_sanitize_loosely (word) {\n  return word\n    .replace(/_-/g, \" \")\n    .replace(/[^\\w ]+/g, \"\")\n    .toLowerCase()\n    .trim()\n}\nexport function str_sanitize_strictly (word) {\n  return word\n    .replace(/[^\\w]+/g, \"\")\n    .toLowerCase()\n    .trim()\n}\n\nexport function str_insert (string = \"\", index = 0, insert = \"\") {\n  return string.substring(0, index) + insert + string.substring(index, string.length)\n}\n\n/**\n * Trim a character other than whitespace\n * @param s {string} - string\n * @param c {string} - remove this character (or characters) from start/end\n * @returns {void | string}\n */\nexport function str_trim_char(s, c) {\n  if (c === \"]\") c = \"\\\\]\"\n  if (c === \"\\\\\") c = \"\\\\\\\\\"\n  return s.replace(new RegExp(\"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"), \"\")\n}\n\n/**\n * Trim all non-alphabetical (not a-zA-Z) characters\n * @param str {string} - string\n * @returns {string}\n */\nexport function str_trim_non_alpha(str) {\n  return str.replace(new RegExp(\"^[^a-z]+|[^a-z]+$\", \"gi\"), \"\")\n}\n\nexport function str_syllables_count(word) {\n  word = word.toLowerCase() //word.downcase!\n  if (word.length <= 3) {\n    return 1\n  } //return 1 if word.length <= 3\n  word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, \"\") //word.sub!(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '')\n  word = word.replace(/^y/, \"\") //word.sub!(/^y/, '')\n  let match = word.match(/[aeiouy]{1,2}/g)\n  return match ? match.length : 0 //word.scan(/[aeiouy]{1,2}/).size\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","import { str_trim_char } from \"./string.js\"\n\n/**\n * Convert JavaScript Object to URL querystring\n * ex: \"?one=1&two=something\"\n */\nexport function querystring_from_object(params = {}) {\n  let qs = Object.keys(params)\n    .map((k) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\n    .join(\"&\")\n  if (qs) {\n    qs = \"?\" + qs\n  }\n  return qs\n}\n\n/**\n * Convert URL querystring to JavaScript Object\n * ex: \"?one=1&two=something\" => {one:1,two:'something'}\n */\nexport function object_from_querystring(str = \"\") {\n  // make object\n  let obj = {}\n  let pairs = str.replace(\"?\", \"\").split(\"&\")\n  for (let pair of pairs) {\n    if (!pair) continue\n    let tuple = pair.split(\"=\")\n    let key = tuple[0]\n    if (!key) continue\n    obj[key] = tuple[1] || \"\"\n  }\n  // decode value\n  for (let key in obj) {\n    obj[key] = decodeURIComponent(obj[key] || \"\").trim()\n  }\n  // done\n  return obj\n}\n\n/**\n * Change a url (GET) parameter in queryString string\n * @param queryString {string} - ex: \"?start=10&fruit=apple\"\n * @param key {string} - ex: \"fruit\"\n * @param value {string} - ex: \"species\"\n * @return {string} - ex: \"?start=10&species=apple\"\n */\nexport function querystring_replace_key_value(queryString, key, value) {\n  // clean input\n  queryString = str_trim_char(queryString, \"&\")\n  queryString = str_trim_char(queryString, \"?\")\n  let obj = JSON.parse(\n    '{\"' + decodeURI(queryString).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}'\n  )\n  // replace value\n  obj[key] = value\n  // rebuild queryString with replaced value\n  let output = \"?\"\n  for (let pair of Object.entries(obj)) {\n    output += pair[0] + \"=\"\n    output += pair[1] + \"&\"\n  }\n  return str_trim_char(output, \"&\")\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","import { querystring_from_object } from \"./urls.js\"\n\n/**\n * Parse Axios error message\n * @param {string} source - external URL to load\n * @param {object} beforeEl - DOM element before which to insert the new <script> tag\n * @param {object} scriptAttrs - object of attributes to add to the new <script> tag\n */\nexport function load_script (source, beforeEl, scriptAttrs = {}) {\n  if (!source) return false\n  if (typeof window !== \"object\" || typeof document !== \"object\") return false\n  return new Promise((resolve, reject) => {\n    let script = document.createElement(\"script\")\n\n    // force certain attributes\n    script.async = true\n    script.defer = true\n    for (let key in scriptAttrs) {\n      script[key] = scriptAttrs[key]\n    }\n\n    // NOTE: needs refactor: maybe .bind(script)\n    function onloadHander(_, isAbort) {\n      if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n        script.onload = null\n        script.onreadystatechange = null\n        script = undefined\n\n        if (isAbort) {\n          reject()\n        } else {\n          resolve()\n        }\n      }\n    }\n\n    script.onload = onloadHander\n    script.onreadystatechange = onloadHander\n\n    script.src = source\n    window.document.body.append(script)\n    resolve(true)\n  })\n}\n\n/**\n * Parse simple message string from HTTP JSON response, GraphQL, or Error() object\n *    Too many libraries to fetch HTTP requests, too many non-standard response formats.\n *    This handles Axios or standard XMLHTTPRequest, or an Error() object\n *    Supports either convention, of Twitter or Facebook\n *    Supports \"non-legacy\" format described in: https://www.mediawiki.org/wiki/API:Errors_and_warnings\n *    Response and parsed error can be any type. This will figure it out, with just a few if/else rules.\n *      NOTE:\n *      Unless you don't care about performance, this should NOT be used to detect if a variable is an error,\n *      only to parse the message string from some object/response which you know contains an error message.\n * @param {object} response - response from HTTP request or Error object\n * @returns {string} - nice readable text, meant for an alert popup in your front-end user interface\n */\nexport function parse_error_message (response) {\n  if (!response) return \"!error\"\n  //\n  // maybe input was a string, which is already an error message,\n  // or null/undefined/false, whatever, just output that as is\n  if (typeof response !== \"object\") return response.toString()\n  //\n  // content from HTTP response:\n  let content = response.response\n    ? response.response.data\n      ? response.response.data\n      : response.response\n    : response.data || response\n  //\n  // error object:\n  let error = content\n  if (content.errors) error = content.errors[0] || content.errors\n  else if (content.warnings) error = content.warnings[0] || content.warnings\n  else if (content.error) error = content.error\n  else if (content.warning) error = content.warning\n  //\n  // something weird:\n  if (typeof error !== \"object\") return error.toString()\n  //\n  // JS Error object - cut off extra stuff about files/lines:\n  if (error[0] && error[0].length > 3) return error[0]\n  //\n  // JSON object:\n  return error.message || error.toString()\n}\n\n/**\n * GET request\n * @param {string} url\n * @param {object} data\n * @returns {Promise}\n */\nexport function http_get (url = ``, data = {}) {\n  // Auth\n  // url = url;\n  // Default options are marked with *\n  return fetch(url + querystring_from_object(data), {\n    method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n      // \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\" // no-referrer, *client\n  })\n    .then((response) => response.json()) // parses response to JSON\n    .then((response) => response.data)\n}\n\n/**\n * POST request\n * @param {string} url\n * @param {object} data\n * @returns {Promise}\n */\nexport function http_post (url = ``, data = {}) {\n  // Auth\n  // url = url;\n  // Default options are marked with *\n  return fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n      // \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\", // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  }).then((response) => response.json()) // parses response to JSON\n}\n\n/**\n * PUT request\n * @param {string} url\n * @param {object} data\n * @returns {Promise}\n */\nexport function http_put (url = ``, data = {}) {\n  // Auth\n  // url = url;\n  // Default options are marked with *\n  return fetch(url, {\n    method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n      // \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\", // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  }).then((response) => response.json()) // parses response to JSON\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","export const jss = function (val) {\n\treturn JSON.stringify(val);\n};\n\nexport const jsp = function (val) {\n\treturn JSON.parse(JSON.stringify(val));\n};\n\n\n// import PropTypes from 'prop-types';\n//\n// let propTypeShapeOf = function (value) {\n// \t// console.log('propTypeShapeOf', value);\n// \tlet output = 'PropTypes.shape({\\n';\n// \tfor (let key in value) {\n// \t\tconsole.log('that.' + key);\n// \t\t// output += `  ${key}: PropTypes.${propTypeOf(value[key])}.isRequired,\\n`;\n// \t}\n// \toutput += '}),';\n// \treturn output;\n// };\n// let propTypeOf = function (value) {\n// \tswitch (typeof value) {\n// \t\tcase 'function':\n// \t\t\treturn 'func';\n// \t\tcase 'boolean':\n// \t\t\treturn 'bool';\n// \t\tcase 'object':\n// \t\t\tif (Array.isArray(value)) {\n// \t\t\t\treturn 'array';\n// \t\t\t} else if (value === null) {\n// \t\t\t\treturn 'null';\n// \t\t\t} else {\n// \t\t\t\treturn propTypeShapeOf(value);\n// \t\t\t}\n// \t\t\treturn 'bool';\n// \t\tdefault:\n// \t\t\treturn typeof value;\n// \t}\n// };\n// DomainsResults.propTypes = {\n// \tthat: pt.shape({\n// \t\tstate: pt.shape({}),\n// \t\tprops: pt.shape({}),\n// \t\ttoggleResults: pt.func({}),\n// \t}),\n// };\n\n// /*\n//  * build propTypes declaration, recursively\n//  */\n// let pt = 'that: ' + propTypeShapeOf(that);\n// console.log(pt);\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","export const is_retina = function () {\n  // return boolean:\n  return typeof window === 'object'\n      ? window.matchMedia(\n        '(-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n      ).matches\n      : false\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","export const syllable_count = function syllable_count(str) {\n  if (!str) return 0\n  let original = str\n  str = str.replace(\"ue\", \"e\")\n  str = str.substr(0, str.length - 1)\n  str = str.replace(/[^aeiouy]+/g, \" \")\n  let words = str\n    .split(\" \")\n    .map((w) => w.trim())\n    .filter((w) => !!w)\n  let syllables = words.length\n  return syllables === 0 ? original.length : syllables\n}\nexport const is_vowel = function syllable_count(str) {\n  return [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"].includes(str)\n}\nexport const ends_in_vowel = function syllable_count(str) {\n  return [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"].includes(str[str.length-1])\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n","import * as arrays from \"./arrays.js\"\nimport * as sort_words from \"./sort_words.js\"\nimport * as sort_strings from \"./sort_strings.js\"\nimport * as sort_objects from \"./sort_objects.js\"\nimport * as strings from \"./strings.js\"\nimport * as cli from \"./cli.js\"\nimport * as curry from \"./curry.js\"\nimport * as functions from \"./etc.js\"\nimport * as numbers from \"./numbers.js\"\nimport * as objects from \"./objects.js\"\nimport * as promises from \"./promises.js\"\nimport * as req from \"./req.js\"\nimport * as requests from \"./requests.js\"\nimport * as json from \"./json.js\"\nimport * as string from \"./string.js\"\nimport * as ui from \"./ui.js\"\nimport * as urls from \"./urls.js\"\nimport * as words from \"./words.js\"\n\nlet all = {\n  arrays,\n  sort_objects,\n  sort_strings,\n  sort_words,\n  strings,\n  cli,\n  curry,\n  functions,\n  numbers,\n  objects,\n  promises,\n  req,\n  requests,\n  json,\n  string,\n  ui,\n  urls,\n  words\n}\n\n\n/**\n * Export as a flat list\n */\nlet __ = {_map:{}}\nfor (let type in all) {\n  __._map[type] = []\n  for (let func in all[type]) {\n    __[func] = all[type][func]\n    __._map[type].push(func)\n  }\n}\n\n/**\n * Export for browser window\n */\nif (typeof window === 'object') {\n  window.__ = __\n}\n\n\nexport default __\n","/**\n * Anonymous function wrapper - more reliable than ;(()=>{ ... })()\n *    Probem is anonymous function sometimes fails silently, even in try/catch !\n *    This try/catch implementation is more reliable.\n *    Also, don't need leading semicolon, if you're into not using semicolons.\n * @param tryCode\n * @param catchAction\n */\nexport const try_catch = (tryCode, catchAction) => {\n  try {\n    // hopefully it works:\n    tryCode()\n  } catch (err) {\n    // something broke!\n    typeof cconsole === \"object\" ? cconsole.error(err) : console.error(err)\n    // stop and inspect\n    if (catchAction === \"exit\" && typeof process !== \"undefined\") {\n      // exit - only on node\n      process.exit()\n    } else {\n      // debug - will only stop script if you have DevTools opened\n      debugger\n    }\n  }\n}\n\n\n/**\n * Export to browser window\n */\nimport exports from '.' // this is lazy, and temporary - will later rewrite object of exports manually\nif (typeof window === 'object') {\n  // set up for export\n  window.__ = window.__||{}\n  // flatten\n  for (let func in exports) {\n    window.__[func] = exports[func]\n  }\n  // alternatively, maybe export to namespace?\n  // window.ppf['arrays'] = exports// flatten\n}\n\n"]}