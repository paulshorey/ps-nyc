{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "dir",
      "name": "Basics",
      "children": [
        {
          "type": "file",
          "value": "Basics/CLI.md"
        },
        {
          "type": "dir",
          "name": "Front End",
          "children": [
            {
              "type": "dir",
              "name": "CSS",
              "children": [
                {
                  "type": "file",
                  "value": "Basics/Front End/CSS/index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "JavaScript",
              "children": [
                {
                  "type": "file",
                  "value": "Basics/Front End/JavaScript/index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "value": "Basics/cli GIT + SSH.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Pro Tips",
      "children": [
        {
          "type": "dir",
          "name": "Basics",
          "children": [
            {
              "type": "dir",
              "name": "CLI",
              "children": [
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/CLI/Nice-Editor.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/CLI/index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "GIT + SSH",
              "children": [
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/GIT + SSH/index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "IDE + Code",
              "children": [
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/IDE + Code/index.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/IDE + Code/auto-formatting.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/IDE + Code/edit-over-SSH.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "RegEx",
              "children": [
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/RegEx/Basics.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/RegEx/HTML.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/RegEx/Javascript.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/RegEx/Markdown.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Basics/RegEx/index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "dir",
          "name": "Front End",
          "children": [
            {
              "type": "dir",
              "name": "CSS",
              "children": [
                {
                  "type": "file",
                  "value": "Pro Tips/Front End/CSS/index.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Front End/CSS/frameworks.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Front End/CSS/unusually responsive.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "JavaScript",
              "children": [
                {
                  "type": "file",
                  "value": "Pro Tips/Front End/JavaScript/ES6.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Front End/JavaScript/index.md"
                },
                {
                  "type": "dir",
                  "name": "React",
                  "children": [
                    {
                      "type": "file",
                      "value": "Pro Tips/Front End/JavaScript/React/index.md"
                    }
                  ]
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Front End/JavaScript/looping.md"
                },
                {
                  "type": "file",
                  "value": "Pro Tips/Front End/JavaScript/sorting.md"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "SysAdmin",
      "children": [
        {
          "type": "dir",
          "name": "Containers",
          "children": [
            {
              "type": "dir",
              "name": "Docker",
              "children": [
                {
                  "type": "file",
                  "value": "SysAdmin/Containers/Docker/index.md"
                },
                {
                  "type": "file",
                  "value": "SysAdmin/Containers/Docker/docker-compose.md"
                },
                {
                  "type": "file",
                  "value": "SysAdmin/Containers/Docker/docker.md"
                },
                {
                  "type": "file",
                  "value": "SysAdmin/Containers/Docker/help docker-compose.md"
                },
                {
                  "type": "file",
                  "value": "SysAdmin/Containers/Docker/help docker-run.md"
                },
                {
                  "type": "file",
                  "value": "SysAdmin/Containers/Docker/help docker.md"
                }
              ]
            }
          ]
        },
        {
          "type": "dir",
          "name": "Linux",
          "children": [
            {
              "type": "file",
              "value": "SysAdmin/Linux/easy-deployment.md"
            },
            {
              "type": "file",
              "value": "SysAdmin/Linux/linux-from-scratch.md"
            }
          ]
        },
        {
          "type": "file",
          "value": "SysAdmin/Ports.md"
        },
        {
          "type": "file",
          "value": "SysAdmin/SSL.md"
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Paul's Web Development Notes  \n1. **From a front-end perspective, for a JavaScript tech stack...** a repository of useful tips, tricks, shortcuts, and general knowledge about web application development. I've been doing this for 10 years now, and have regularly found myself coming back to a set of technologies after 6 months or more, and forgetting their settings and gotchas. Maybe this will also help others.  \n2. **This is an experiment, and a WIP...** I've been trying to find a decent solution for documenting small web projects. So far, this is a great success! Very easy to edit (markdown files), very easy to collaborate (same repository as the project), and very easy to convert to html (`npm run docs`).  \n<br />  \n  \n# This is not a replacement for real documentation  \n### Still use [Documentation.JS](https://github.com/documentationjs/documentation/blob/master/docs/GETTING_STARTED.md)  \n```javascript  \n    /**  \n     * This function adds one to its input.  \n     * @param {number} input any number  \n     * @returns {number} that number, plus one.  \n     */  \n    function addOne(input) {  \n      return input + 1;  \n    }  \n```  \nInstead, this is a way to document more abstract or trivial ideas, in a more literary format.  \n<br /><br />  \n  \n  \n# This is a work in progress  \n  \n**Unfortunate issues:**  \n* **Folders and files must be in alphabetical order.** So, naming is like writing poetry.  \n* File names can have spaces, but a space in the filename prevents you from linking to the file from other markdown files (this is a markdown issue).  \n  \n  \n**Todo:**  \n* Fix mobile layout  \n* When compiling .html files, to modify the original .md file... add double space at the end of every line (for Github-flavor compatibility). Currently implemented as a `git commit` hook, but needs to first remove spaces before adding new ones.  \n* Maybe fix underlying codebase to not convert filename strings to (a href=\"\") elements  \n* Experiment with this: https://markdowntomedium.com/  \n<br /><br />  \n  \n  \n# This website was auto-generated  \nfrom [my repository](http://github.com/paulshorey/ps) `./docs` folder, using [paulshorey/markdown-folder-to-html](https://github.com/paulshorey/markdown-folder-to-html), which is an experimental copy of [joakin/markdown-folder-to-html](https://github.com/joakin/markdown-folder-to-html).  \n<br /><br />  ",
      "html": "<h1>Paul’s Web Development Notes</h1>\n<ol>\n<li><strong>From a front-end perspective, for a JavaScript tech stack…</strong> a repository of useful tips, tricks, shortcuts, and general knowledge about web application development. I’ve been doing this for 10 years now, and have regularly found myself coming back to a set of technologies after 6 months or more, and forgetting their settings and gotchas. Maybe this will also help others.</li>\n<li><strong>This is an experiment, and a WIP…</strong> I’ve been trying to find a decent solution for documenting small web projects. So far, this is a great success! Very easy to edit (markdown files), very easy to collaborate (same repository as the project), and very easy to convert to html (<code>npm run docs</code>).<br>\n<br /></li>\n</ol>\n<h1>This is not a replacement for real documentation</h1>\n<h3>Still use <a href=\"https://github.com/documentationjs/documentation/blob/master/docs/GETTING_STARTED.md\">Documentation.JS</a></h3>\n<pre><code class=\"language-javascript\">    /**  \n     * This function adds one to its input.  \n     * @param {number} input any number  \n     * @returns {number} that number, plus one.  \n     */  \n    function addOne(input) {  \n      return input + 1;  \n    }  \n</code></pre>\n<p>Instead, this is a way to document more abstract or trivial ideas, in a more literary format.<br>\n<br /><br /></p>\n<h1>This is a work in progress</h1>\n<p><strong>Unfortunate issues:</strong></p>\n<ul>\n<li><strong>Folders and files must be in alphabetical order.</strong> So, naming is like writing poetry.</li>\n<li>File names can have spaces, but a space in the filename prevents you from linking to the file from other markdown files (this is a markdown issue).</li>\n</ul>\n<p><strong>Todo:</strong></p>\n<ul>\n<li>Fix mobile layout</li>\n<li>When compiling .html files, to modify the original .md file… add double space at the end of every line (for Github-flavor compatibility). Currently implemented as a <code>git commit</code> hook, but needs to first remove spaces before adding new ones.</li>\n<li>Maybe fix underlying codebase to not convert filename strings to (a href=&quot;&quot;) elements</li>\n<li>Experiment with this: <a href=\"https://markdowntomedium.com/\">https://markdowntomedium.com/</a><br>\n<br /><br /></li>\n</ul>\n<h1>This website was auto-generated</h1>\n<p>from <a href=\"http://github.com/paulshorey/ps\">my repository</a> <code>./docs</code> folder, using <a href=\"https://github.com/paulshorey/markdown-folder-to-html\">paulshorey/markdown-folder-to-html</a>, which is an experimental copy of <a href=\"https://github.com/joakin/markdown-folder-to-html\">joakin/markdown-folder-to-html</a>.<br>\n<br /><br /></p>\n",
      "id": 0
    },
    {
      "path": "Basics/CLI.md",
      "url": "Basics/CLI.html",
      "content": "#### Common Commands:  \n  \n**`cd`** enter directory of choice, like this for example:  \n```bash  \ncd ~  \ncd ..  \ncd /tmp  \ncd Documents  \ncd /Volumes/Media/Photos\\ 2018  \n```  \n**`Ctrl C`** quit running process (to re-gain control of the CLI)  \n**`fg`** resume suspended process, after accidentally doing `Ctrl X`  \n<br /><br />  \n  \n  \n  \n#### Files and Folders:  \n**`ls`** see contents of current directory  \n**`ls -a`** see all contents, including hidden files/folders  \n  \nEditing files inside the terminal:  \n**`vim Filename.txt`** \"vim\" is usually the default CLI text editor. Nice Editor is much nicer!  \n**`Esc`**, then **`q!`**, then **`Enter`** exit vim without saving  \n**`Esc`**, then **`wq`**, then **`Enter`** save changes, and exit  \n  \nAlternately, in Nice Editor:  \n**`ne Filename.txt`**  \n**`^s ^q`** save changes, and exit  \n**`^q`**, then **`y`** to exit without saving changes (y was to confirm prompt)  \n<br /><br />  \n  \n  \n<br /><br />  \n  \n  \n",
      "html": "<h4>Common Commands:</h4>\n<p><strong><code>cd</code></strong> enter directory of choice, like this for example:</p>\n<pre><code class=\"language-bash\">cd ~  \ncd ..  \ncd /tmp  \ncd Documents  \ncd /Volumes/Media/Photos\\ 2018  \n</code></pre>\n<p><strong><code>Ctrl C</code></strong> quit running process (to re-gain control of the CLI)<br>\n<strong><code>fg</code></strong> resume suspended process, after accidentally doing <code>Ctrl X</code><br>\n<br /><br /></p>\n<h4>Files and Folders:</h4>\n<p><strong><code>ls</code></strong> see contents of current directory<br>\n<strong><code>ls -a</code></strong> see all contents, including hidden files/folders</p>\n<p>Editing files inside the terminal:<br>\n<strong><code>vim Filename.txt</code></strong> “vim” is usually the default CLI text editor. Nice Editor is much nicer!<br>\n<strong><code>Esc</code></strong>, then <strong><code>q!</code></strong>, then <strong><code>Enter</code></strong> exit vim without saving<br>\n<strong><code>Esc</code></strong>, then <strong><code>wq</code></strong>, then <strong><code>Enter</code></strong> save changes, and exit</p>\n<p>Alternately, in Nice Editor:<br>\n<strong><code>ne Filename.txt</code></strong><br>\n<strong><code>^s ^q</code></strong> save changes, and exit<br>\n<strong><code>^q</code></strong>, then <strong><code>y</code></strong> to exit without saving changes (y was to confirm prompt)<br>\n<br /><br /></p>\n<p><br /><br /></p>\n",
      "id": 1
    },
    {
      "path": "Basics/Front End/CSS/index.md",
      "url": "Basics/Front End/CSS/index.html",
      "content": "### CSS is not hard. Just review the properties at the bottom of this page, and know these gotchas/oddities:  \n\n#### Aligning vs. Centering  \n* To **\"vertically-align\"** something, we mean to align some text or image, or icon relative to its siblings. To make text or a link look good next to a button or icon. To accomplish this, simply put **`vertical-align:middle`** on every **SIBLING**. The container doesn't matter.  \n* To **\"vertically-center\"** something is to actually place a small element visibly in the middle of a larger element. You may think to off-set the child from the top with `padding` or `margin-top` or just `top`, but that would require you to know the exact height of the parent and child, and any other contents which could shove the child out of center. Instead, use  **`display:flex;align-items:center`** on the **PARENT**, and the web browser will take care of the sizing.  \n* To **\"horizontally align\"** or **\"horizontally center\"** something is usually the same thing, but is done differently for \"inline\" vs \"block\" level elements.  \n    * To center some text or an image in a line, you would add **`text-align:center`** to its **PARENT**.  \n    * To center some block (like a div) on the page, add **`margin-left:auto;margin-right:auto;`** on **ITSELF**, the **CHILD**. For this block centering to work, the child must have some width, and the parent must also be a block element, with a greater width.  \n#### Negative Margin-Top vs. Negative Top  \n* **`margin-left: -10px`** or **`margin-top: -10px`** is totally allowed, and can make your UI pixel perfect by nudging your element slightly to the side. But **BEWARE**. It is a hack. It will shift the element you're nudging in unpredictable ways, and thus shift all its children and parents. **INSTEAD**, you may use **`position:relative; top:-10px`** to accomplish the same thing. This will nudge the element just as well, but will not affect any other elements. To the sibling and parent elements, it will be as if the child was never nudged at all.  \n#### Box-Sizing, and Width Surprises  \n* You make a button of **`width:100px`**. It fits nicely into your UI. But then you add a **`padding: 20px`**, and it no longer fits. In fact, it looks now more like **`140px`**. **Why?** The padding was added to the element's width. If you now add a border of **`2px`**, now the total width grows again to **`144px`**. This is because your container element has property **`box-sizing: content-box;`**. To make the **padding** and **border** widths fit **INSIDE** the specified element width (and height), change the parent (or entire page) to use **`box-sizing: border-box;`**.  \n  \n##  \n# Basic Properties:  \n* position:  \n    * **static** ~ default value, makes element think it has NO position property.  \n    * **relative** ~ relative to its surroundings. Lets you to add **top, left, bottom, right**, to shift it a bit to any direction  \n    * **fixed** ~ relative to the window - use **top, left, bottom, right** to position the element any number of units from the top/left/bottom/right of the screen boundaries.  \n    * **absolute** ~ same as fixed, but relative to the parent element (well, the closest parent which has a specified positon property)  \n* display:  \n    * **block** ~ wrap to their own line, and take up 100% available width! Used to layout visual blocks on the page, with height, padding, border, etc. (**div, blockquote, header, article, main** have this by default)  \n    * **inline** ~ for text elements which do not have height or width or margin or vertical padding (**span, b, i, u, img, code** have this by default)  \n    * **inline-block** ~ best of both worlds. Can have vertical height and padding, but do not wrap to their own line! So, can style a padded button or highlight in the middle of a paragraph.  \n    * **flex** ~ read about it. It will change your life. **Note:** it affects the children, not itself! Simple example: Lets you have a fixed-width left column, and a main article section which takes up the remaining page width, no matter how wide or narrow the screen is.  \n    * **inline-flex** ~ flex content inline! Like a pill-button, with left/right sections.  \n    * **grid** ~ new hotness. Not like \"masonry\", but still very useful.  \n* margin:  \n    * **0 0 0 10px** add 10px margin outside of the element to the left  \n    * **0 10px** add 10px margin to left and right. Zero to top/bottom  \n    * **10px** add to all sides  \n    * **10px 0 0 0** same as margin-top:10px  \n    * Margin adds space **outside** of the element's boundaries. So, **outside** of the element's width/height, padding, border, background.  \n* padding:  \n    * like margin, but adds space **inside** the element's boundarids. So, **inside** the border. Increases width/height, and is covered by background.  \n* float:  \n    * never copy from some answer on some website. Only use if you know its gotchas and glitches  \n* top, left, right, bottom:  \n    * move the element some distance in any direction, used with the `position` prop  \n* text-align  \n    * horizontal-align **text** or images, or any **`display:inline`**  or **`display:inline-block`** element - **left/center/right**  \n    * put this on the **parent** element!  \n* vertical-align  \n    * **vertically** align any inline or inline-block element, relative to its siblings  \n    * put this on the element itself!!! unlike text-align, which you put on the parent  \n    * this does not, unfortunately, vertically center text inside a larger container  \n* box-sizing  \n    * see in the top gotchas/oddities  \n  \n#### Also, read about \"flexbox\", or \"css display flex\"  \nAnd learn about its related properties, which can be used to build dynamic, responsive, flexible layouts, and center content on the page - horizontally and vertically: `flex-direction`, `flex-grow`, `align-items`, `justify-content`, etc.",
      "html": "<h3>CSS is not hard. Just review the properties at the bottom of this page, and know these gotchas/oddities:</h3>\n<h4>Aligning vs. Centering</h4>\n<ul>\n<li>To <strong>“vertically-align”</strong> something, we mean to align some text or image, or icon relative to its siblings. To make text or a link look good next to a button or icon. To accomplish this, simply put <strong><code>vertical-align:middle</code></strong> on every <strong>SIBLING</strong>. The container doesn’t matter.</li>\n<li>To <strong>“vertically-center”</strong> something is to actually place a small element visibly in the middle of a larger element. You may think to off-set the child from the top with <code>padding</code> or <code>margin-top</code> or just <code>top</code>, but that would require you to know the exact height of the parent and child, and any other contents which could shove the child out of center. Instead, use  <strong><code>display:flex;align-items:center</code></strong> on the <strong>PARENT</strong>, and the web browser will take care of the sizing.</li>\n<li>To <strong>“horizontally align”</strong> or <strong>“horizontally center”</strong> something is usually the same thing, but is done differently for “inline” vs “block” level elements.\n<ul>\n<li>To center some text or an image in a line, you would add <strong><code>text-align:center</code></strong> to its <strong>PARENT</strong>.</li>\n<li>To center some block (like a div) on the page, add <strong><code>margin-left:auto;margin-right:auto;</code></strong> on <strong>ITSELF</strong>, the <strong>CHILD</strong>. For this block centering to work, the child must have some width, and the parent must also be a block element, with a greater width.</li>\n</ul>\n</li>\n</ul>\n<h4>Negative Margin-Top vs. Negative Top</h4>\n<ul>\n<li><strong><code>margin-left: -10px</code></strong> or <strong><code>margin-top: -10px</code></strong> is totally allowed, and can make your UI pixel perfect by nudging your element slightly to the side. But <strong>BEWARE</strong>. It is a hack. It will shift the element you’re nudging in unpredictable ways, and thus shift all its children and parents. <strong>INSTEAD</strong>, you may use <strong><code>position:relative; top:-10px</code></strong> to accomplish the same thing. This will nudge the element just as well, but will not affect any other elements. To the sibling and parent elements, it will be as if the child was never nudged at all.</li>\n</ul>\n<h4>Box-Sizing, and Width Surprises</h4>\n<ul>\n<li>You make a button of <strong><code>width:100px</code></strong>. It fits nicely into your UI. But then you add a <strong><code>padding: 20px</code></strong>, and it no longer fits. In fact, it looks now more like <strong><code>140px</code></strong>. <strong>Why?</strong> The padding was added to the element’s width. If you now add a border of <strong><code>2px</code></strong>, now the total width grows again to <strong><code>144px</code></strong>. This is because your container element has property <strong><code>box-sizing: content-box;</code></strong>. To make the <strong>padding</strong> and <strong>border</strong> widths fit <strong>INSIDE</strong> the specified element width (and height), change the parent (or entire page) to use <strong><code>box-sizing: border-box;</code></strong>.</li>\n</ul>\n<h2></h2>\n<h1>Basic Properties:</h1>\n<ul>\n<li>position:\n<ul>\n<li><strong>static</strong> ~ default value, makes element think it has NO position property.</li>\n<li><strong>relative</strong> ~ relative to its surroundings. Lets you to add <strong>top, left, bottom, right</strong>, to shift it a bit to any direction</li>\n<li><strong>fixed</strong> ~ relative to the window - use <strong>top, left, bottom, right</strong> to position the element any number of units from the top/left/bottom/right of the screen boundaries.</li>\n<li><strong>absolute</strong> ~ same as fixed, but relative to the parent element (well, the closest parent which has a specified positon property)</li>\n</ul>\n</li>\n<li>display:\n<ul>\n<li><strong>block</strong> ~ wrap to their own line, and take up 100% available width! Used to layout visual blocks on the page, with height, padding, border, etc. (<strong>div, blockquote, header, article, main</strong> have this by default)</li>\n<li><strong>inline</strong> ~ for text elements which do not have height or width or margin or vertical padding (<strong>span, b, i, u, img, code</strong> have this by default)</li>\n<li><strong>inline-block</strong> ~ best of both worlds. Can have vertical height and padding, but do not wrap to their own line! So, can style a padded button or highlight in the middle of a paragraph.</li>\n<li><strong>flex</strong> ~ read about it. It will change your life. <strong>Note:</strong> it affects the children, not itself! Simple example: Lets you have a fixed-width left column, and a main article section which takes up the remaining page width, no matter how wide or narrow the screen is.</li>\n<li><strong>inline-flex</strong> ~ flex content inline! Like a pill-button, with left/right sections.</li>\n<li><strong>grid</strong> ~ new hotness. Not like “masonry”, but still very useful.</li>\n</ul>\n</li>\n<li>margin:\n<ul>\n<li><strong>0 0 0 10px</strong> add 10px margin outside of the element to the left</li>\n<li><strong>0 10px</strong> add 10px margin to left and right. Zero to top/bottom</li>\n<li><strong>10px</strong> add to all sides</li>\n<li><strong>10px 0 0 0</strong> same as margin-top:10px</li>\n<li>Margin adds space <strong>outside</strong> of the element’s boundaries. So, <strong>outside</strong> of the element’s width/height, padding, border, background.</li>\n</ul>\n</li>\n<li>padding:\n<ul>\n<li>like margin, but adds space <strong>inside</strong> the element’s boundarids. So, <strong>inside</strong> the border. Increases width/height, and is covered by background.</li>\n</ul>\n</li>\n<li>float:\n<ul>\n<li>never copy from some answer on some website. Only use if you know its gotchas and glitches</li>\n</ul>\n</li>\n<li>top, left, right, bottom:\n<ul>\n<li>move the element some distance in any direction, used with the <code>position</code> prop</li>\n</ul>\n</li>\n<li>text-align\n<ul>\n<li>horizontal-align <strong>text</strong> or images, or any <strong><code>display:inline</code></strong>  or <strong><code>display:inline-block</code></strong> element - <strong>left/center/right</strong></li>\n<li>put this on the <strong>parent</strong> element!</li>\n</ul>\n</li>\n<li>vertical-align\n<ul>\n<li><strong>vertically</strong> align any inline or inline-block element, relative to its siblings</li>\n<li>put this on the element itself!!! unlike text-align, which you put on the parent</li>\n<li>this does not, unfortunately, vertically center text inside a larger container</li>\n</ul>\n</li>\n<li>box-sizing\n<ul>\n<li>see in the top gotchas/oddities</li>\n</ul>\n</li>\n</ul>\n<h4>Also, read about “flexbox”, or “css display flex”</h4>\n<p>And learn about its related properties, which can be used to build dynamic, responsive, flexible layouts, and center content on the page - horizontally and vertically: <code>flex-direction</code>, <code>flex-grow</code>, <code>align-items</code>, <code>justify-content</code>, etc.</p>\n",
      "id": 2
    },
    {
      "path": "Basics/Front End/JavaScript/index.md",
      "url": "Basics/Front End/JavaScript/index.html",
      "content": "# How to loop over Arrays  \n```javascript  \n    /*  \"forEach\" is preferred because of this option to skip the loop item */  \n    arr.forEach(function(item, i){  \n        if (!item) {  \n            return;  \n        }  \n        console.log(item);  \n    });  \n```  \n```javascript  \n    /* \"for\" works well, but is verbose */  \n    for (let i = 0; i < arr.length; i++) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n```  \n```javascript  \n    /* \"for of\" works fine, but is annoying because I have to manage all my own variables */  \n    let i = 0;  \n    for (let item of arr) {  \n        console.log(item, i);  \n        i++;  \n    }  \n```  \n```javascript  \n    /* \"while\" is not recommended because you have to remember to increment the index */  \n    let i = 0;  \n    while (i<arr.length) {  \n        const item = arr[i];  \n        console.log(item, i);  \n        i++;  \n    }  \n```  \n```javascript  \n    /* \"for in\" is not recommended. It iterates indexed items, as well as named properties! */  \n    /* yes, btw, Arrays can have named properties, just like Objects */  \n    for (const i in arr) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n```  \n##  \n# How to loop over Objects  \n```javascript  \n    /* \"for in\" */  \n    for (const key in obj) {  \n        const value = obj[key];  \n        console.log(value, key);  \n    }  \n```  \n##  \n# How to loop over Strings  \n```javascript  \n    /*  \"forEach\" */  \n    \"some word\".forEach(function(letter, i){  \n        if (letter===\" \") {  \n            return;  \n        }  \n        console.log(letter);  \n    });  \n```  \n##  \n# How to loop over Numbers (well, you can't, but...)  \n```javascript  \n    const loop_min = 0;  \n    const loop_max = 100;  \n    const loop_inc = 1;  \n```  \n```javascript  \n    /* \"while\" */  \n    let num = loop_min;  \n    while (num<loop_max) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n```  \n```javascript  \n    /* \"for\" */  \n    for (let i = loop_min; i < loop_max; i++) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n```",
      "html": "<h1>How to loop over Arrays</h1>\n<pre><code class=\"language-javascript\">    /*  &quot;forEach&quot; is preferred because of this option to skip the loop item */  \n    arr.forEach(function(item, i){  \n        if (!item) {  \n            return;  \n        }  \n        console.log(item);  \n    });  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for&quot; works well, but is verbose */  \n    for (let i = 0; i &lt; arr.length; i++) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for of&quot; works fine, but is annoying because I have to manage all my own variables */  \n    let i = 0;  \n    for (let item of arr) {  \n        console.log(item, i);  \n        i++;  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;while&quot; is not recommended because you have to remember to increment the index */  \n    let i = 0;  \n    while (i&lt;arr.length) {  \n        const item = arr[i];  \n        console.log(item, i);  \n        i++;  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for in&quot; is not recommended. It iterates indexed items, as well as named properties! */  \n    /* yes, btw, Arrays can have named properties, just like Objects */  \n    for (const i in arr) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n</code></pre>\n<h2></h2>\n<h1>How to loop over Objects</h1>\n<pre><code class=\"language-javascript\">    /* &quot;for in&quot; */  \n    for (const key in obj) {  \n        const value = obj[key];  \n        console.log(value, key);  \n    }  \n</code></pre>\n<h2></h2>\n<h1>How to loop over Strings</h1>\n<pre><code class=\"language-javascript\">    /*  &quot;forEach&quot; */  \n    &quot;some word&quot;.forEach(function(letter, i){  \n        if (letter===&quot; &quot;) {  \n            return;  \n        }  \n        console.log(letter);  \n    });  \n</code></pre>\n<h2></h2>\n<h1>How to loop over Numbers (well, you can’t, but…)</h1>\n<pre><code class=\"language-javascript\">    const loop_min = 0;  \n    const loop_max = 100;  \n    const loop_inc = 1;  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;while&quot; */  \n    let num = loop_min;  \n    while (num&lt;loop_max) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for&quot; */  \n    for (let i = loop_min; i &lt; loop_max; i++) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n</code></pre>\n",
      "id": 3
    },
    {
      "path": "Basics/cli GIT + SSH.md",
      "url": "Basics/cli GIT + SSH.html",
      "content": "# Configs  \n#### Install ssh key on new device  \n```bash  \necho \"{paste your ssh key contents}\" >> ~/.ssh/newssh  \nchmod -R 600 ~/.ssh/newssh  \n```  \n  \n#### then, every time the CLI starts:  \n```bash  \neval \"$(ssh-agent -s)\"  \nssh-add ~/.ssh/newssh  \n```  \n#### set `~/.gitconfig` variables:  \n```bash  \ngit config --global color.ui true  \ngit config --global user.name Paul\\ Shorey  \ngit config --global user.email pshorey@beyond.ai  \ngit config --global push.default simple  \ngit config --global core.editor=ne  \ngit config --global submodule.recurse=true  \n```  \nWithout `--global`, it edits local `./.git/config` file.  ",
      "html": "<h1>Configs</h1>\n<h4>Install ssh key on new device</h4>\n<pre><code class=\"language-bash\">echo &quot;{paste your ssh key contents}&quot; &gt;&gt; ~/.ssh/newssh  \nchmod -R 600 ~/.ssh/newssh  \n</code></pre>\n<h4>then, every time the CLI starts:</h4>\n<pre><code class=\"language-bash\">eval &quot;$(ssh-agent -s)&quot;  \nssh-add ~/.ssh/newssh  \n</code></pre>\n<h4>set <code>~/.gitconfig</code> variables:</h4>\n<pre><code class=\"language-bash\">git config --global color.ui true  \ngit config --global user.name Paul\\ Shorey  \ngit config --global user.email pshorey@beyond.ai  \ngit config --global push.default simple  \ngit config --global core.editor=ne  \ngit config --global submodule.recurse=true  \n</code></pre>\n<p>Without <code>--global</code>, it edits local <code>./.git/config</code> file.</p>\n",
      "id": 4
    },
    {
      "path": "Pro Tips/Basics/CLI/Nice-Editor.md",
      "url": "Pro Tips/Basics/CLI/Nice-Editor.html",
      "content": "# EDITOR=ne  \nA \"nice\" editor. By far the most intuitive CLI editor to use, supports some basic features and bindings. `Ctr S` to save. `Ctr Q` to quit. `Esc Esc` for an actual dropdown UI, right in the terminal. It's magic!  \n  \n#### Make Default:  \n```  \necho \"export EDITOR=ne\" >> ~/.profile  # if you use the standard Mac terminal  \necho \"export EDITOR=ne\" >> ~/.zprofile  # if you use Zsh  \necho \"[core]\\n\\teditor = ne\" >> ~/.gitconfig  # to use it for git messages  \n```  \nRestart the terminal, then you'll be able to do:  \n```  \nne myFile.txt # to edit stuff  \ngit commit # to commit, as usual, but without having to use Vim  \n```  \n  \n#### Documentation:  \n[NiceEditorDocs.pdf](../../assets/files/NiceEditorDocs.pdf)  \n  \n## Keyboard Shortcuts:  \n(when using the custom ~/.ne/.keys configuration below)  \n  \n> **^s**, **^q** - save, quit  \n> **^z**, **^r**  - undo, redo  \n> **^x**, **^c**, **^v**  - cut, copy, paste  \n> **^y**  - delete current line  \n> **^u**  - paste deleted line  \n>  \n> **^d** - delete line  \n> **^w**, **^e** - start of, end of line  \n  \n## Custom Key Bindings:  \n1. hit: **`^k`**  \n2. type: **`kc`**  \n3. hit **`key`** to see its hex code and currently bound command  \n4. **`echo 'KEY {CODE} {ACTION}' >> ~/.ne/.keys`**  \n  \n> **`fn + a`**  \n> To convert any key (`delete`) to fn-key (`fn + delete`), just add a prefix `0x` before the key code.  \n> Key code for `delete` is `115`. So, key code for `fn + delete` would be `0x115`.  \n  \n**Documentation:** http://www.emerson.emory.edu/services/editors/ne/Key_Bindings.html  \n**Defaults:** https://github.com/vigna/ne/blob/master/doc/default.keys​  \n  \n## Sample ~/.ne/.keys file:  \n  \n    # [delete]  \n    KEY     0x7f    Backspace  \n    # [ctrl]+[z]  \n    KEY     0x1a    Undo  \n    # [ctrl]+[r]  \n    KEY     0x12    Redo  \n  \n    # [ctrl]+[d](delete line)  \n    KEY     0x04    DL  \n    # [ctrl]+[w]=(start of line)  \n    KEY     0x17    SOL  \n    # [ctrl]+[e]=(end of line)  \n    KEY     0x05    EOL  \n",
      "html": "<h1>EDITOR=ne</h1>\n<p>A “nice” editor. By far the most intuitive CLI editor to use, supports some basic features and bindings. <code>Ctr S</code> to save. <code>Ctr Q</code> to quit. <code>Esc Esc</code> for an actual dropdown UI, right in the terminal. It’s magic!</p>\n<h4>Make Default:</h4>\n<pre><code>echo &quot;export EDITOR=ne&quot; &gt;&gt; ~/.profile  # if you use the standard Mac terminal  \necho &quot;export EDITOR=ne&quot; &gt;&gt; ~/.zprofile  # if you use Zsh  \necho &quot;[core]\\n\\teditor = ne&quot; &gt;&gt; ~/.gitconfig  # to use it for git messages  \n</code></pre>\n<p>Restart the terminal, then you’ll be able to do:</p>\n<pre><code>ne myFile.txt # to edit stuff  \ngit commit # to commit, as usual, but without having to use Vim  \n</code></pre>\n<h4>Documentation:</h4>\n<p><a href=\"../../assets/files/NiceEditorDocs.pdf\">NiceEditorDocs.pdf</a></p>\n<h2>Keyboard Shortcuts:</h2>\n<p>(when using the custom ~/.ne/.keys configuration below)</p>\n<blockquote>\n<p><strong>^s</strong>, <strong>^q</strong> - save, quit<br>\n<strong>^z</strong>, <strong>^r</strong>  - undo, redo<br>\n<strong>^x</strong>, <strong>^c</strong>, <strong>^v</strong>  - cut, copy, paste<br>\n<strong>^y</strong>  - delete current line<br>\n<strong>^u</strong>  - paste deleted line</p>\n<p><strong>^d</strong> - delete line<br>\n<strong>^w</strong>, <strong>^e</strong> - start of, end of line</p>\n</blockquote>\n<h2>Custom Key Bindings:</h2>\n<ol>\n<li>hit: <strong><code>^k</code></strong></li>\n<li>type: <strong><code>kc</code></strong></li>\n<li>hit <strong><code>key</code></strong> to see its hex code and currently bound command</li>\n<li><strong><code>echo 'KEY {CODE} {ACTION}' &gt;&gt; ~/.ne/.keys</code></strong></li>\n</ol>\n<blockquote>\n<p><strong><code>fn + a</code></strong><br>\nTo convert any key (<code>delete</code>) to fn-key (<code>fn + delete</code>), just add a prefix <code>0x</code> before the key code.<br>\nKey code for <code>delete</code> is <code>115</code>. So, key code for <code>fn + delete</code> would be <code>0x115</code>.</p>\n</blockquote>\n<p><strong>Documentation:</strong> <a href=\"http://www.emerson.emory.edu/services/editors/ne/Key_Bindings.html\">http://www.emerson.emory.edu/services/editors/ne/Key_Bindings.html</a><br>\n<strong>Defaults:</strong> <a href=\"https://github.com/vigna/ne/blob/master/doc/default.keys%E2%80%8B\">https://github.com/vigna/ne/blob/master/doc/default.keys​</a></p>\n<h2>Sample ~/.ne/.keys file:</h2>\n<pre><code># [delete]  \nKEY     0x7f    Backspace  \n# [ctrl]+[z]  \nKEY     0x1a    Undo  \n# [ctrl]+[r]  \nKEY     0x12    Redo  \n\n# [ctrl]+[d](delete line)  \nKEY     0x04    DL  \n# [ctrl]+[w]=(start of line)  \nKEY     0x17    SOL  \n# [ctrl]+[e]=(end of line)  \nKEY     0x05    EOL  \n</code></pre>\n",
      "id": 5
    },
    {
      "path": "Pro Tips/Basics/CLI/index.md",
      "url": "Pro Tips/Basics/CLI/index.html",
      "content": "#### Common Commands:  \n  \n**`mkdir -p`** recursively create directory  \n**`ls -a`** show hidden files  \n**`ls -a ~ | grep \"^.n\"`** find files in current folder that start with \".n\"  \n  \n**`ps cax | grep node`** or **`ps aux | grep node`** find running processes matching \"node\"  \n  \n**`fg`** resume suspended process, after accidentally doing `Ctrl X`  \n<br /><br />  \n  \n  \n  \n#### Files and Folders:  \n  \n**`cat file.js`** to view file contents, without bothering to open in a text editor  \n  \nor use **`rsub`** to open the remote file in your local editor like Sublime/VsCode  \n  \n**`sudo echo \"export PATH=\\\"$PATH:/usr/local/bin\\\"\" >> /etc/profile`** write to bottom of file  \n  \n**`vim`** is a built-in and usually default text editor. Nice Editor is much nicer!  \n<br /><br />  \n  \n#### Permissions:  \n  \n**`chmod -R 600 ~/.ssh/YOUR-FILE`** you'll need to apply this to any newly created SSH key file before GIT can use it  \n  \n**`chown $USER -R /www`** or whatever folder or file you want to take back ownership of, if you run into write permission issues  \n​  \n#### Advanced Commands:  \n  \n<br /><br />  \n  \n  \n",
      "html": "<h4>Common Commands:</h4>\n<p><strong><code>mkdir -p</code></strong> recursively create directory<br>\n<strong><code>ls -a</code></strong> show hidden files<br>\n<strong><code>ls -a ~ | grep &quot;^.n&quot;</code></strong> find files in current folder that start with “.n”</p>\n<p><strong><code>ps cax | grep node</code></strong> or <strong><code>ps aux | grep node</code></strong> find running processes matching “node”</p>\n<p><strong><code>fg</code></strong> resume suspended process, after accidentally doing <code>Ctrl X</code><br>\n<br /><br /></p>\n<h4>Files and Folders:</h4>\n<p><strong><code>cat file.js</code></strong> to view file contents, without bothering to open in a text editor</p>\n<p>or use <strong><code>rsub</code></strong> to open the remote file in your local editor like Sublime/VsCode</p>\n<p><strong><code>sudo echo &quot;export PATH=\\&quot;$PATH:/usr/local/bin\\&quot;&quot; &gt;&gt; /etc/profile</code></strong> write to bottom of file</p>\n<p><strong><code>vim</code></strong> is a built-in and usually default text editor. Nice Editor is much nicer!<br>\n<br /><br /></p>\n<h4>Permissions:</h4>\n<p><strong><code>chmod -R 600 ~/.ssh/YOUR-FILE</code></strong> you’ll need to apply this to any newly created SSH key file before GIT can use it</p>\n<p><strong><code>chown $USER -R /www</code></strong> or whatever folder or file you want to take back ownership of, if you run into write permission issues<br>\n​</p>\n<h4>Advanced Commands:</h4>\n<p><br /><br /></p>\n",
      "id": 6
    },
    {
      "path": "Pro Tips/Basics/GIT + SSH/index.md",
      "url": "Pro Tips/Basics/GIT + SSH/index.html",
      "content": "# Best Practices  \n  \n#### pull (update)  \nWhen updating your local codebase, but a team mate changed some lines on the remote codebase, **`git pull`** actually does a **`merge`**. This leaves a mess of post-merge commit messages in your commit history.  \n* Try doing **`git pull --rebase`** which does not leave so many \"merge\" commits when working with others.  \n* **or**, try `git stash` first, then `git pull`, then `git stash pop` to avoid having a merge/commit message for each pull operation.  \n  \n#### rebase  \n**`git rebase -i HEAD~3`** # 3, or however many commits you'd like to rename/squash  \n\n\n\n# Automate\n* ####Emacs has Magit, which is agreed to be the best set of GIT shortcuts  \n* #### VsCode has GitLens, and a very handy Diff UI  \n  \n## I have some custom shortcuts  \n#### include them, and other settings in `~/.profile` or `~/.zprofile`:  \n```bash  \n# GIT  \nsource ~/.aliases.sh;  \n  \neval \"$(ssh-agent -s)\";  \nssh-add ~/.ssh/newssh;  \n  \n# EDITORS  \nalias sublime='open -a /Applications/Sublime\\ Text.app/Contents/MacOS/Sublime\\ Text';  \nalias vscode='open -a /Applications/Visual\\ Studio\\ Code.app/Contents/MacOS/Electron';  \nalias webstorm='open -a /Applications/WebStorm.app/Contents/MacOS/webstorm';  \n  \nexport EDITOR=ne  \n  \n# ETC  \n```  \n  \n#### `~/.aliases.sh`:  \n```bash  \n#!/usr/bin/env bash  \n  \n# RESET TO HEAD  \nfunction yx() {  \n\t# reset  \n\techo resetting to HEAD;  \n\tgit add .;  \n\tgit reset HEAD -\\-hard; # revert to remote  \n\tgit pull;  \n\t# log  \n\techo \"\\n\\n\";  \n\techo \"STATUS:\";  \n\tgit status;  \n}  \n  \n# UNDO LAST COMMIT  \nfunction yxx() {  \n\techo resetting to previous commit;  \n\tgit add .;  \n\tgit reset HEAD^ -\\-hard;  \n\tgit pull;  \n}  \nfunction yz() {  \n\tgit reset HEAD~1; # undo LOCAL commit which has not been pushed  \n}  \n  \n# DELETE LOCAL  \nfunction yd() {  \n\t# delete  \n\techo DELETING LOCAL $1;  \n\tgit branch -D $1;  \n\t# log  \n\techo \"\\n\\n\";  \n\techo \"STATUS:\";  \n\tgit status;  \n}  \n  \n# DELETE LOCAL AND REMOTE  \nfunction ydd() {  \n\techo DELETING REMOTE $1;  \n\techo \"\\n\\n\";  \n\t# delete  \n\tif [ \"$1\" = \"master\" ]  \n\tthen  \n\t\techo cannot delete master;  \n\telif [ \"$1\" = \"dev\" ]  \n\tthen  \n\t\techo CANNOT DELETE DEV;  \n\telse  \n\t\tgit branch -D $1;  \n\t\tgit push origin :$1;  \n\tfi;  \n}  \n  \n# UPDATE  \nfunction ya() {  \n\techo PULLING $1;  \n\techo \"\\n\";  \n\t# update  \n\tgit fetch;  \n\tif [ $1 ]  \n\tthen  \n\t\tgit checkout $1;  \n\t\tgit pull;  \n\telse  \n\t\tgit pull;  \n\tfi;  \n\t# log  \n\techo \"\\n\\n\";  \n\techo \"STATUS:\";  \n\tgit status;  \n}  \n  \n# UPDATE (WITH GIT STASH / POP) - USE WHEN COLLABORATION  \nfunction yaa() {  \n\techo STASHING AND PULLING $1;  \n\techo \"\\n\";  \n\t# update  \n\tgit stash;  \n\tgit pull;  \n\tgit stash pop;  \n\t# log  \n\techo \"\\n\\n\";  \n\techo \"STATUS:\";  \n\tgit status;  \n}  \n  \n# FIX MARKDOWN for GitHub flavor  \n function ghmd() {  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' *.md;  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' */*.md;  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' */*/*.md;  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' */*/*/*.md;  \n }  \n  \n# SAVE (BUT FIRST RUN DOCS)  \nfunction yds() {  \n\t# First, go through and fix markdown files to be GitHub compatible  \n\tghmd;  \n  \n\t# convert docs to html  \n    npm run docs;  \n  \n    # save  \n    ys $1;  \n}  \n  \n# SAVE  \nfunction ys() {  \n\t# First, go through and fix markdown files to be GitHub compatible  \n\tghmd;  \n  \n\t# branch=$(git symbolic-ref --short HEAD);  \n\t# if [ $branch = dev ]  \n\t# then  \n\t# \techo cannot merge $branch;  \n\t# elif [ $1 = staging ] || [ $1 = master ]  \n\t# then  \n\t# \techo cannot merge to $1;  \n\t# else  \n\t\techo COMMITTING $1;  \n\t\techo \"\\n\\n\";  \n\t\t# pull  \n\t\tgit pull;  \n\t\t# git stash;  \n\t\t# git pull;  \n\t\t# git stash pop;  \n\t\t# save  \n\t\tgit add .;  \n\t\tgit commit -m $1;  \n\t\t# push  \n\t\techo \"\\n\\n\";  \n\t\techo PUSHING TO $branch;  \n\t\tgit push;  \n\t\t# log  \n\t\techo \"\\n\\n\";  \n\t\techo \"STATUS:\";  \n\t\tgit status;  \n\t# fi;  \n}  \nfunction yss() {  \n\t# First, go through and fix markdown files to be GitHub compatible  \n\tghmd;  \n  \n\t# branch=$(git symbolic-ref --short HEAD);  \n\t# if [ $branch = dev ]  \n\t# then  \n\t# \techo cannot merge $branch;  \n\t# elif [ $1 = staging ] || [ $1 = master ]  \n\t# then  \n\t# \techo cannot merge to $1;  \n\t# else  \n\t\techo COMMITTING $1;  \n\t\techo \"\\n\\n\";  \n\t\t# pull  \n\t\tgit stash;  \n\t\tgit pull;  \n\t\tgit stash pop;  \n\t\t# save  \n\t\tgit add .;  \n\t\tgit commit -m $1;  \n\t\t# push  \n\t\techo \"\\n\\n\";  \n\t\techo PUSHING TO $branch;  \n\t\tgit push;  \n\t\t# log  \n\t\techo \"\\n\\n\";  \n\t\techo \"STATUS:\";  \n\t\tgit status;  \n\t# fi;  \n}  \n  \n# MERGE  \nfunction ym() {  \n\tbranch=$(git symbolic-ref --short HEAD);  \n\techo MERGING $branch TO $1;  \n\techo \"\\n\\n\";  \n  \n\t# if [ $branch = dev ]  \n\t# then  \n\t# \techo cannot merge $branch;  \n\t# elif [ $1 = staging ] || [ $1 = master ]  \n\t# then  \n\t# \techo cannot merge to $1;  \n\t# else  \n\t\tif [ $1 ]  \n\t\tthen  \n  \n\t\t\tgit fetch;  \n\t\t\tgit checkout $1;  \n\t\t\tgit pull;  \n  \n\t\t\tif [ $2 ]  \n\t\t\tthen  \n\t\t\t\t2=merging$branch$2;  \n\t\t\telse  \n\t\t\t\t2=merging$branch;  \n\t\t\tfi;  \n  \n\t\t\techo $2;  \n\t\t\tgit merge $branch -m $2;  \n\t\t\tgit push;  \n  \n\t\t\t# log  \n\t\t\techo \"\\n\\n\";  \n\t\t\techo \"STATUS:\";  \n\t\t\tgit status;  \n\t\tfi;  \n\t# fi;  \n}  \n  \n```",
      "html": "<h1>Best Practices</h1>\n<h4>pull (update)</h4>\n<p>When updating your local codebase, but a team mate changed some lines on the remote codebase, <strong><code>git pull</code></strong> actually does a <strong><code>merge</code></strong>. This leaves a mess of post-merge commit messages in your commit history.</p>\n<ul>\n<li>Try doing <strong><code>git pull --rebase</code></strong> which does not leave so many “merge” commits when working with others.</li>\n<li><strong>or</strong>, try <code>git stash</code> first, then <code>git pull</code>, then <code>git stash pop</code> to avoid having a merge/commit message for each pull operation.</li>\n</ul>\n<h4>rebase</h4>\n<p><strong><code>git rebase -i HEAD~3</code></strong> # 3, or however many commits you’d like to rename/squash</p>\n<h1>Automate</h1>\n<ul>\n<li>####Emacs has Magit, which is agreed to be the best set of GIT shortcuts</li>\n<li>\n<h4>VsCode has GitLens, and a very handy Diff UI</h4>\n</li>\n</ul>\n<h2>I have some custom shortcuts</h2>\n<h4>include them, and other settings in <code>~/.profile</code> or <code>~/.zprofile</code>:</h4>\n<pre><code class=\"language-bash\"># GIT  \nsource ~/.aliases.sh;  \n  \neval &quot;$(ssh-agent -s)&quot;;  \nssh-add ~/.ssh/newssh;  \n  \n# EDITORS  \nalias sublime='open -a /Applications/Sublime\\ Text.app/Contents/MacOS/Sublime\\ Text';  \nalias vscode='open -a /Applications/Visual\\ Studio\\ Code.app/Contents/MacOS/Electron';  \nalias webstorm='open -a /Applications/WebStorm.app/Contents/MacOS/webstorm';  \n  \nexport EDITOR=ne  \n  \n# ETC  \n</code></pre>\n<h4><code>~/.aliases.sh</code>:</h4>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash  \n  \n# RESET TO HEAD  \nfunction yx() {  \n\t# reset  \n\techo resetting to HEAD;  \n\tgit add .;  \n\tgit reset HEAD -\\-hard; # revert to remote  \n\tgit pull;  \n\t# log  \n\techo &quot;\\n\\n&quot;;  \n\techo &quot;STATUS:&quot;;  \n\tgit status;  \n}  \n  \n# UNDO LAST COMMIT  \nfunction yxx() {  \n\techo resetting to previous commit;  \n\tgit add .;  \n\tgit reset HEAD^ -\\-hard;  \n\tgit pull;  \n}  \nfunction yz() {  \n\tgit reset HEAD~1; # undo LOCAL commit which has not been pushed  \n}  \n  \n# DELETE LOCAL  \nfunction yd() {  \n\t# delete  \n\techo DELETING LOCAL $1;  \n\tgit branch -D $1;  \n\t# log  \n\techo &quot;\\n\\n&quot;;  \n\techo &quot;STATUS:&quot;;  \n\tgit status;  \n}  \n  \n# DELETE LOCAL AND REMOTE  \nfunction ydd() {  \n\techo DELETING REMOTE $1;  \n\techo &quot;\\n\\n&quot;;  \n\t# delete  \n\tif [ &quot;$1&quot; = &quot;master&quot; ]  \n\tthen  \n\t\techo cannot delete master;  \n\telif [ &quot;$1&quot; = &quot;dev&quot; ]  \n\tthen  \n\t\techo CANNOT DELETE DEV;  \n\telse  \n\t\tgit branch -D $1;  \n\t\tgit push origin :$1;  \n\tfi;  \n}  \n  \n# UPDATE  \nfunction ya() {  \n\techo PULLING $1;  \n\techo &quot;\\n&quot;;  \n\t# update  \n\tgit fetch;  \n\tif [ $1 ]  \n\tthen  \n\t\tgit checkout $1;  \n\t\tgit pull;  \n\telse  \n\t\tgit pull;  \n\tfi;  \n\t# log  \n\techo &quot;\\n\\n&quot;;  \n\techo &quot;STATUS:&quot;;  \n\tgit status;  \n}  \n  \n# UPDATE (WITH GIT STASH / POP) - USE WHEN COLLABORATION  \nfunction yaa() {  \n\techo STASHING AND PULLING $1;  \n\techo &quot;\\n&quot;;  \n\t# update  \n\tgit stash;  \n\tgit pull;  \n\tgit stash pop;  \n\t# log  \n\techo &quot;\\n\\n&quot;;  \n\techo &quot;STATUS:&quot;;  \n\tgit status;  \n}  \n  \n# FIX MARKDOWN for GitHub flavor  \n function ghmd() {  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' *.md;  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' */*.md;  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' */*/*.md;  \n \tperl -pi -e 's/[\\s]*?\\n/\\ \\ \\n/g' */*/*/*.md;  \n }  \n  \n# SAVE (BUT FIRST RUN DOCS)  \nfunction yds() {  \n\t# First, go through and fix markdown files to be GitHub compatible  \n\tghmd;  \n  \n\t# convert docs to html  \n    npm run docs;  \n  \n    # save  \n    ys $1;  \n}  \n  \n# SAVE  \nfunction ys() {  \n\t# First, go through and fix markdown files to be GitHub compatible  \n\tghmd;  \n  \n\t# branch=$(git symbolic-ref --short HEAD);  \n\t# if [ $branch = dev ]  \n\t# then  \n\t# \techo cannot merge $branch;  \n\t# elif [ $1 = staging ] || [ $1 = master ]  \n\t# then  \n\t# \techo cannot merge to $1;  \n\t# else  \n\t\techo COMMITTING $1;  \n\t\techo &quot;\\n\\n&quot;;  \n\t\t# pull  \n\t\tgit pull;  \n\t\t# git stash;  \n\t\t# git pull;  \n\t\t# git stash pop;  \n\t\t# save  \n\t\tgit add .;  \n\t\tgit commit -m $1;  \n\t\t# push  \n\t\techo &quot;\\n\\n&quot;;  \n\t\techo PUSHING TO $branch;  \n\t\tgit push;  \n\t\t# log  \n\t\techo &quot;\\n\\n&quot;;  \n\t\techo &quot;STATUS:&quot;;  \n\t\tgit status;  \n\t# fi;  \n}  \nfunction yss() {  \n\t# First, go through and fix markdown files to be GitHub compatible  \n\tghmd;  \n  \n\t# branch=$(git symbolic-ref --short HEAD);  \n\t# if [ $branch = dev ]  \n\t# then  \n\t# \techo cannot merge $branch;  \n\t# elif [ $1 = staging ] || [ $1 = master ]  \n\t# then  \n\t# \techo cannot merge to $1;  \n\t# else  \n\t\techo COMMITTING $1;  \n\t\techo &quot;\\n\\n&quot;;  \n\t\t# pull  \n\t\tgit stash;  \n\t\tgit pull;  \n\t\tgit stash pop;  \n\t\t# save  \n\t\tgit add .;  \n\t\tgit commit -m $1;  \n\t\t# push  \n\t\techo &quot;\\n\\n&quot;;  \n\t\techo PUSHING TO $branch;  \n\t\tgit push;  \n\t\t# log  \n\t\techo &quot;\\n\\n&quot;;  \n\t\techo &quot;STATUS:&quot;;  \n\t\tgit status;  \n\t# fi;  \n}  \n  \n# MERGE  \nfunction ym() {  \n\tbranch=$(git symbolic-ref --short HEAD);  \n\techo MERGING $branch TO $1;  \n\techo &quot;\\n\\n&quot;;  \n  \n\t# if [ $branch = dev ]  \n\t# then  \n\t# \techo cannot merge $branch;  \n\t# elif [ $1 = staging ] || [ $1 = master ]  \n\t# then  \n\t# \techo cannot merge to $1;  \n\t# else  \n\t\tif [ $1 ]  \n\t\tthen  \n  \n\t\t\tgit fetch;  \n\t\t\tgit checkout $1;  \n\t\t\tgit pull;  \n  \n\t\t\tif [ $2 ]  \n\t\t\tthen  \n\t\t\t\t2=merging$branch$2;  \n\t\t\telse  \n\t\t\t\t2=merging$branch;  \n\t\t\tfi;  \n  \n\t\t\techo $2;  \n\t\t\tgit merge $branch -m $2;  \n\t\t\tgit push;  \n  \n\t\t\t# log  \n\t\t\techo &quot;\\n\\n&quot;;  \n\t\t\techo &quot;STATUS:&quot;;  \n\t\t\tgit status;  \n\t\tfi;  \n\t# fi;  \n}  \n  \n</code></pre>\n",
      "id": 7
    },
    {
      "path": "Pro Tips/Basics/IDE + Code/index.md",
      "url": "Pro Tips/Basics/IDE + Code/index.html",
      "content": "# Consider [WebStorm](https://www.jetbrains.com/webstorm/)  \n  \n### Lately, I've had trouble with both Sublime Text and Vs Code.  \n  \n**VsCode** just does not indent JSX correctly, no matter what options I set, using the popular plugin \"js-beautify\" or \"prettier\" or the default formatter. After figuring out the best plugin and settings - it still sometimes breaks JSX.  \n  \n**Sublime Text** can format JSX using \"Sublime-HTMLPrettify\", but with this I could not enable \"format on save\" no matter what I did. It can do format on save with \"js-beautify\", but then it mangles JSX even worse than in VsCode (using the same engine and same .jsbeautifyrc file).  \n  \nThis has been spurred by the **Prettier** plugin for Sublime text being broken recently. It had a bad release, and it took me forever to figure out that was actually the problem, because I have just come back to React programming after doing other things, so did not remember every setting. I tried every other plugin, switched to VsCode and messed around with that, but VsCode had its own issues. Even if I get Prettier to work again, it would be too little too late.  \n  \nWhat do you use? I will be asking around. Meanwhile...  \n  \n  \n### WebStorm simply works,  \n**and I have confidence that it will still behave a year from now.**  \n  \nIt indents JSX correctly every time, and has program settings which all actually do what they're supposed to when you change them. WebStorm is a good little robot that does as you command it.  \n  \nAlso, it lets you choose to put arguments on the same line as the brackets, or each on its own line. This is huge for readability. Sometimes one format is more legible. Other times it's not. Now you, the human, can decide which to use.  \n  \nExamples at the bottom of this page.  \n  \n  \n### Other benefits...  \n  \nIt has several more sophisticated features - ones you would have to spend a long time finding and configuring just right in open source editors.  \n  \n* When you re-name a file or folder, it can search all the source code in the project, and rename any references to that file, to prevent broken links.  \n  \n* Key mapping has a very easy search interface. Feel free to remap all your favorite shortcuts, including Macros.  \n  \n* Pressing \"Backspace\" (Delete on Mac) when all you have to the left is whitespace, WebStorm deletes all the way to the end of the previous line, with one key stroke.  \n    * Vs Code deletes one indentation level at a time, then you must press again to delete the new line  \n    * Sublime Text actually is even worse. When indenting using spaces (for example 4), instead of deleting 4 spaces at a time, it deletes one space at a time.  \n  \n* Lint tooltips are easier to use and read  \n  \n* Syntax highlighting - customizing the scheme takes a bit of getting used to when coming from Sublime/VsCode. But it has more powerful and more sophisticated syntax coloring! For example, WebStorm is smart enough to color function curly brackets differently than React variable curly brackets which contain the function.  \n  \n  \n### Unfortunately,  \n* It costs $130+. But, if you are trying to get paid for the code you write, then you can't afford not to use this. I have seen a productivity increase after just a couple days of getting used to it.  \n  \n  \n### Code Example 1 (JSX)  \n**Worst case scenario** (SublimeText using JsBeautify):  \nTotally broken.  \n```  \n    Options.push( <  \n        option value = {  \n            option  \n        } > {  \n            option  \n        } <  \n        /option>  \n    );  \n```  \n**Best case scenario** (VsCode using Prettier or default or JsBeautify):  \nNotice the broken indentation. Also, why is that `<SuggestedRow...` indented by 2 spaces, while others by 4 spaces? Idk.  \n```  \n    SuggestedSelects.push(  \n      <SuggestRow  \n                    words={lists}  \n                    domains={domains}  \n                />  \n    );  \n```  \n<br /><br />  \n  \n  \n### Code Example 2 (code blocks: imports, if/else, functions, etc)  \nLong-form:  \n```  \nimport {  \n  ValidateForm,  \n  ValidateField,  \n  ValidateButton,  \n  validations  \n} from 'src/containers/validateForm';  \n```  \nShort-form:  \n```  \nimport { ValidateForm, ValidateField, ValidateButton, validations } from 'src/containers/validateForm';  \n```  \nImagine many of these imports.  \n**WebStorm** allows you to use either format. You just code it. WebStorm will detect which format you're using, and fix your indentation and spaces accordingly. VsCode and others force you to use the longer one, unless you specify in the setting to always use the all-in-line version.  \n**Same case for open/closed functions and if statements.** Now you can choose how to organize the code.  \n <br /><br /><br />  \n  \n # Getting Started with WebStorm  \n  \n ### Hints:  \nDisable all unnecessary left/bottom/top menus, to have a clean interface.  \nIn file browser left column, open file with one click instead of two:  \n```  \n    Project settings [...] > Autoscroll to source  \n```  \n Best syntax highlighting:  \n ```  \n    WebStorm > Preferences > Editor > Color Scheme > General > \"Monokai Pro\"  \n```  \nInstall **Material Theme** when first installing WebStorm, or as a Plugin. Material refers to the WebStorm application UI (not the code/text) styling. Theme refers to the header,menus,file browser, status bar, etc. Use this Material `One Dark` \"Theme\" to nicely match the Monokai \"Scheme\" above.  \n  \n### Import Settings:  \nIncludes auto-format macro and key binding `Cmd + S` to Esc, Format, Save.  \nAlso key binding `Cmd + D` to do incremental find + add word to multiple cursor, like in Sublime/VsCode.  \nAnd theme/colors/plugins.  \n[WebStormSettings](../../assets/files/WebStormSettings.zip)  \n```  \n    File > Import Settings  \n```  \n**Keyboard shortcuts (for above settings file)**  \n* Ctrl + F        ~ new folder  \n* Ctrl + N        ~ new file  \n* Ctrl + R        ~ rename file/folder  \n ",
      "html": "<h1>Consider <a href=\"https://www.jetbrains.com/webstorm/\">WebStorm</a></h1>\n<h3>Lately, I’ve had trouble with both Sublime Text and Vs Code.</h3>\n<p><strong>VsCode</strong> just does not indent JSX correctly, no matter what options I set, using the popular plugin “js-beautify” or “prettier” or the default formatter. After figuring out the best plugin and settings - it still sometimes breaks JSX.</p>\n<p><strong>Sublime Text</strong> can format JSX using “Sublime-HTMLPrettify”, but with this I could not enable “format on save” no matter what I did. It can do format on save with “js-beautify”, but then it mangles JSX even worse than in VsCode (using the same engine and same .jsbeautifyrc file).</p>\n<p>This has been spurred by the <strong>Prettier</strong> plugin for Sublime text being broken recently. It had a bad release, and it took me forever to figure out that was actually the problem, because I have just come back to React programming after doing other things, so did not remember every setting. I tried every other plugin, switched to VsCode and messed around with that, but VsCode had its own issues. Even if I get Prettier to work again, it would be too little too late.</p>\n<p>What do you use? I will be asking around. Meanwhile…</p>\n<h3>WebStorm simply works,</h3>\n<p><strong>and I have confidence that it will still behave a year from now.</strong></p>\n<p>It indents JSX correctly every time, and has program settings which all actually do what they’re supposed to when you change them. WebStorm is a good little robot that does as you command it.</p>\n<p>Also, it lets you choose to put arguments on the same line as the brackets, or each on its own line. This is huge for readability. Sometimes one format is more legible. Other times it’s not. Now you, the human, can decide which to use.</p>\n<p>Examples at the bottom of this page.</p>\n<h3>Other benefits…</h3>\n<p>It has several more sophisticated features - ones you would have to spend a long time finding and configuring just right in open source editors.</p>\n<ul>\n<li>\n<p>When you re-name a file or folder, it can search all the source code in the project, and rename any references to that file, to prevent broken links.</p>\n</li>\n<li>\n<p>Key mapping has a very easy search interface. Feel free to remap all your favorite shortcuts, including Macros.</p>\n</li>\n<li>\n<p>Pressing “Backspace” (Delete on Mac) when all you have to the left is whitespace, WebStorm deletes all the way to the end of the previous line, with one key stroke.</p>\n<ul>\n<li>Vs Code deletes one indentation level at a time, then you must press again to delete the new line</li>\n<li>Sublime Text actually is even worse. When indenting using spaces (for example 4), instead of deleting 4 spaces at a time, it deletes one space at a time.</li>\n</ul>\n</li>\n<li>\n<p>Lint tooltips are easier to use and read</p>\n</li>\n<li>\n<p>Syntax highlighting - customizing the scheme takes a bit of getting used to when coming from Sublime/VsCode. But it has more powerful and more sophisticated syntax coloring! For example, WebStorm is smart enough to color function curly brackets differently than React variable curly brackets which contain the function.</p>\n</li>\n</ul>\n<h3>Unfortunately,</h3>\n<ul>\n<li>It costs $130+. But, if you are trying to get paid for the code you write, then you can’t afford not to use this. I have seen a productivity increase after just a couple days of getting used to it.</li>\n</ul>\n<h3>Code Example 1 (JSX)</h3>\n<p><strong>Worst case scenario</strong> (SublimeText using JsBeautify):<br>\nTotally broken.</p>\n<pre><code>    Options.push( &lt;  \n        option value = {  \n            option  \n        } &gt; {  \n            option  \n        } &lt;  \n        /option&gt;  \n    );  \n</code></pre>\n<p><strong>Best case scenario</strong> (VsCode using Prettier or default or JsBeautify):<br>\nNotice the broken indentation. Also, why is that <code>&lt;SuggestedRow...</code> indented by 2 spaces, while others by 4 spaces? Idk.</p>\n<pre><code>    SuggestedSelects.push(  \n      &lt;SuggestRow  \n                    words={lists}  \n                    domains={domains}  \n                /&gt;  \n    );  \n</code></pre>\n<p><br /><br /></p>\n<h3>Code Example 2 (code blocks: imports, if/else, functions, etc)</h3>\n<p>Long-form:</p>\n<pre><code>import {  \n  ValidateForm,  \n  ValidateField,  \n  ValidateButton,  \n  validations  \n} from 'src/containers/validateForm';  \n</code></pre>\n<p>Short-form:</p>\n<pre><code>import { ValidateForm, ValidateField, ValidateButton, validations } from 'src/containers/validateForm';  \n</code></pre>\n<p>Imagine many of these imports.<br>\n<strong>WebStorm</strong> allows you to use either format. You just code it. WebStorm will detect which format you’re using, and fix your indentation and spaces accordingly. VsCode and others force you to use the longer one, unless you specify in the setting to always use the all-in-line version.<br>\n<strong>Same case for open/closed functions and if statements.</strong> Now you can choose how to organize the code.<br>\n<br /><br /><br /></p>\n<h1>Getting Started with WebStorm</h1>\n<h3>Hints:</h3>\n<p>Disable all unnecessary left/bottom/top menus, to have a clean interface.<br>\nIn file browser left column, open file with one click instead of two:</p>\n<pre><code>    Project settings [...] &gt; Autoscroll to source  \n</code></pre>\n<p>Best syntax highlighting:</p>\n<pre><code>   WebStorm &gt; Preferences &gt; Editor &gt; Color Scheme &gt; General &gt; &quot;Monokai Pro&quot;  \n</code></pre>\n<p>Install <strong>Material Theme</strong> when first installing WebStorm, or as a Plugin. Material refers to the WebStorm application UI (not the code/text) styling. Theme refers to the header,menus,file browser, status bar, etc. Use this Material <code>One Dark</code> “Theme” to nicely match the Monokai “Scheme” above.</p>\n<h3>Import Settings:</h3>\n<p>Includes auto-format macro and key binding <code>Cmd + S</code> to Esc, Format, Save.<br>\nAlso key binding <code>Cmd + D</code> to do incremental find + add word to multiple cursor, like in Sublime/VsCode.<br>\nAnd theme/colors/plugins.<br>\n<a href=\"../../assets/files/WebStormSettings.zip\">WebStormSettings</a></p>\n<pre><code>    File &gt; Import Settings  \n</code></pre>\n<p><strong>Keyboard shortcuts (for above settings file)</strong></p>\n<ul>\n<li>Ctrl + F        ~ new folder</li>\n<li>Ctrl + N        ~ new file</li>\n<li>Ctrl + R        ~ rename file/folder</li>\n</ul>\n",
      "id": 8
    },
    {
      "path": "Pro Tips/Basics/IDE + Code/auto-formatting.md",
      "url": "Pro Tips/Basics/IDE + Code/auto-formatting.html",
      "content": "# Important for collaborating:  \n  \nAfter agreeing on and sticking to **tabs** or 2 spaces or 4 spaces, maybe the most useful thing to do next is:  \n  \nMake sure your **and your teammates'** text-editor or IDE will not format your code unexpectedly.  \n  \n### If using VS CODE:  \n* Install the **`js beautify`** plugin  \n* Add **`.jsbeautifyrc`** file to the root of your project, to specify formatting rules.  \n* By default, it formats every file on save! To turn this off, toggle **`files.autoSave`** in Vs Code preferences.  \n  \n### If using Sublime Text:  \n* Install `htmlprettify` plugin: https://github.com/victorporof/Sublime-HTMLPrettify  \n* Use the same **`.jsbeautifyrc`** file as your teammates use for Vs Code.  \n* Sublime does not format on save by default. Toggle **`format_on_save`** in HTMLPrettify plugin options.  \n  \n### If using WebStorm:  \n* `Webstorm > Preferences > Editor > Code Style > JavaScript` no manually editing a JSON file, use checkboxes/dropdowns  \n* To auto-format on save, you must create a Macro, which is also different...  \n    1. `Edit > Macros > Start Macro Recording`  \n    2. Press `Esc`, to clear any selected text, which will affect your formatting  \n    3. Press `Cmd + Opt + L` to format the current file  \n    4. Select `File > Save All` in top bar. Do NOT just hit `Cmd + S`.  \n    5. Click `Stop` in Macro notification on the bottom, to stop recording.  \n    6. `Webstorm > Preferences > Keymap`  \n        * Find your newly created Macro. Right click, and add key binding `Cmd + S`.  \n        * Agree to un-bind that key from its other function (simple save-all).  \n  \n### If using something else:  \n* Just make sure whatever settings you use matches your teammates' settings.  \n  \n### Otherwise, note:  \n* This is a great online code beautifier: <br />https://www.10bestdesign.com/dirtymarkup/  \n* Unlike others, this one actually maintains HTML tags hierarchy and indentation  \n  \n",
      "html": "<h1>Important for collaborating:</h1>\n<p>After agreeing on and sticking to <strong>tabs</strong> or 2 spaces or 4 spaces, maybe the most useful thing to do next is:</p>\n<p>Make sure your <strong>and your teammates’</strong> text-editor or IDE will not format your code unexpectedly.</p>\n<h3>If using VS CODE:</h3>\n<ul>\n<li>Install the <strong><code>js beautify</code></strong> plugin</li>\n<li>Add <strong><code>.jsbeautifyrc</code></strong> file to the root of your project, to specify formatting rules.</li>\n<li>By default, it formats every file on save! To turn this off, toggle <strong><code>files.autoSave</code></strong> in Vs Code preferences.</li>\n</ul>\n<h3>If using Sublime Text:</h3>\n<ul>\n<li>Install <code>htmlprettify</code> plugin: <a href=\"https://github.com/victorporof/Sublime-HTMLPrettify\">https://github.com/victorporof/Sublime-HTMLPrettify</a></li>\n<li>Use the same <strong><code>.jsbeautifyrc</code></strong> file as your teammates use for Vs Code.</li>\n<li>Sublime does not format on save by default. Toggle <strong><code>format_on_save</code></strong> in HTMLPrettify plugin options.</li>\n</ul>\n<h3>If using WebStorm:</h3>\n<ul>\n<li><code>Webstorm &gt; Preferences &gt; Editor &gt; Code Style &gt; JavaScript</code> no manually editing a JSON file, use checkboxes/dropdowns</li>\n<li>To auto-format on save, you must create a Macro, which is also different…\n<ol>\n<li><code>Edit &gt; Macros &gt; Start Macro Recording</code></li>\n<li>Press <code>Esc</code>, to clear any selected text, which will affect your formatting</li>\n<li>Press <code>Cmd + Opt + L</code> to format the current file</li>\n<li>Select <code>File &gt; Save All</code> in top bar. Do NOT just hit <code>Cmd + S</code>.</li>\n<li>Click <code>Stop</code> in Macro notification on the bottom, to stop recording.</li>\n<li><code>Webstorm &gt; Preferences &gt; Keymap</code>\n<ul>\n<li>Find your newly created Macro. Right click, and add key binding <code>Cmd + S</code>.</li>\n<li>Agree to un-bind that key from its other function (simple save-all).</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3>If using something else:</h3>\n<ul>\n<li>Just make sure whatever settings you use matches your teammates’ settings.</li>\n</ul>\n<h3>Otherwise, note:</h3>\n<ul>\n<li>This is a great online code beautifier: <br /><a href=\"https://www.10bestdesign.com/dirtymarkup/\">https://www.10bestdesign.com/dirtymarkup/</a></li>\n<li>Unlike others, this one actually maintains HTML tags hierarchy and indentation</li>\n</ul>\n",
      "id": 9
    },
    {
      "path": "Pro Tips/Basics/IDE + Code/edit-over-SSH.md",
      "url": "Pro Tips/Basics/IDE + Code/edit-over-SSH.html",
      "content": "# How To:  \n### Edit remote files over SSH connection  \n...not in the terminal, but using your favorite local IDE!  \n<br /><br />  \n  \n#### On server,  \nInstall rsub:  \n```  \nwget -O /usr/local/bin/rsub \\https://raw.github.com/aurora/rmate/master/rmate  \nchmod a+x /usr/local/bin/rsub  \n```  \n#### On local,  \nFor _SublimeText3_, or _Textmate_, install **`rsub`** package.  \nOr on _VsCode_, install **`remote-vscode`** package.  \nAdd proxy:  \n```  \necho \"RemoteForward 52698 localhost:52698\" >> ~/.ssh/config  \n```  \n#### Now you can connect to the server and edit any file:  \n```  \nssh user@hostname  \nrsub ~/.profile  \n```  \n<br /><br />  \n  \n## Emacs text editor  \nin addition to simply editing the file, it can act as the connection agent, and the remote filebrowser too ~~ so you can connect, browse, open, and edit files all in Emacs!",
      "html": "<h1>How To:</h1>\n<h3>Edit remote files over SSH connection</h3>\n<p>…not in the terminal, but using your favorite local IDE!<br>\n<br /><br /></p>\n<h4>On server,</h4>\n<p>Install rsub:</p>\n<pre><code>wget -O /usr/local/bin/rsub \\https://raw.github.com/aurora/rmate/master/rmate  \nchmod a+x /usr/local/bin/rsub  \n</code></pre>\n<h4>On local,</h4>\n<p>For <em>SublimeText3</em>, or <em>Textmate</em>, install <strong><code>rsub</code></strong> package.<br>\nOr on <em>VsCode</em>, install <strong><code>remote-vscode</code></strong> package.<br>\nAdd proxy:</p>\n<pre><code>echo &quot;RemoteForward 52698 localhost:52698&quot; &gt;&gt; ~/.ssh/config  \n</code></pre>\n<h4>Now you can connect to the server and edit any file:</h4>\n<pre><code>ssh user@hostname  \nrsub ~/.profile  \n</code></pre>\n<p><br /><br /></p>\n<h2>Emacs text editor</h2>\n<p>in addition to simply editing the file, it can act as the connection agent, and the remote filebrowser too ~~ so you can connect, browse, open, and edit files all in Emacs!</p>\n",
      "id": 10
    },
    {
      "path": "Pro Tips/Basics/RegEx/Basics.md",
      "url": "Pro Tips/Basics/RegEx/Basics.html",
      "content": "### Basics:  \n\nAny new line (including existing trailing spaces)  \n`([\\ ]*?)\\n`  \nReplace with two spaces and a new line  \n`  \\n`  \n<br />  \n  \n",
      "html": "<h3>Basics:</h3>\n<p>Any new line (including existing trailing spaces)<br>\n<code>([\\ ]*?)\\n</code><br>\nReplace with two spaces and a new line<br>\n<code>\\n</code><br>\n<br /></p>\n",
      "id": 11
    },
    {
      "path": "Pro Tips/Basics/RegEx/HTML.md",
      "url": "Pro Tips/Basics/RegEx/HTML.html",
      "content": "### HTML:  \n\nsearch `(\\s*)</script>` replace `</script>` puts all closing tags on same line  \n  \n`\\ ?data-(.*?)\"(.*?)\" `  \n`\\ ?tabindex=(\".*\") `  \nmatch all tag attributes starting with with or without leading spaces  \n  \n  \n`li\\ class(.*?)\"(.*?)\" `  \nstrip out class attribute from matching elements  \n  \n`<!--(.*?)\\.(.*?)-->`  \nmatch comments containing phrase \".\"  \n  \nsearch `href=\"(.*?)\"` replace `href=\"\"` clears all href attributes  \n  \nsearch `(\\ *?)((?!\\ ).*?)><span(.*?)</span> `  \nreplace `$1$2>\\n$1  <span$3\\n$1  </span> `  \nto add indent span elements  \n  \n",
      "html": "<h3>HTML:</h3>\n<p>search <code>(\\s*)&lt;/script&gt;</code> replace <code>&lt;/script&gt;</code> puts all closing tags on same line</p>\n<p><code>\\ ?data-(.*?)&quot;(.*?)&quot;</code><br>\n<code>\\ ?tabindex=(&quot;.*&quot;)</code><br>\nmatch all tag attributes starting with with or without leading spaces</p>\n<p><code>li\\ class(.*?)&quot;(.*?)&quot;</code><br>\nstrip out class attribute from matching elements</p>\n<p><code>&lt;!--(.*?)\\.(.*?)--&gt;</code><br>\nmatch comments containing phrase “.”</p>\n<p>search <code>href=&quot;(.*?)&quot;</code> replace <code>href=&quot;&quot;</code> clears all href attributes</p>\n<p>search <code>(\\ *?)((?!\\ ).*?)&gt;&lt;span(.*?)&lt;/span&gt;</code><br>\nreplace <code>$1$2&gt;\\n$1 &lt;span$3\\n$1 &lt;/span&gt;</code><br>\nto add indent span elements</p>\n",
      "id": 12
    },
    {
      "path": "Pro Tips/Basics/RegEx/Javascript.md",
      "url": "Pro Tips/Basics/RegEx/Javascript.html",
      "content": "### Javascript:  \n\nRemove all console.logs (or .warn .error, etc):  \n`(\\s?)console.(.?)\\n([\\w\\s\\W\\t\\n]*?)`  \n  \n",
      "html": "<h3>Javascript:</h3>\n<p>Remove all console.logs (or .warn .error, etc):<br>\n<code>(\\s?)console.(.?)\\n([\\w\\s\\W\\t\\n]*?)</code></p>\n",
      "id": 13
    },
    {
      "path": "Pro Tips/Basics/RegEx/Markdown.md",
      "url": "Pro Tips/Basics/RegEx/Markdown.html",
      "content": "### Markdown:  \n\n**CLI command \"--help\" output lines to Markdown file**  \nFind `\\n(.*?) (([a-z]+) )?([A-Z])`  \nReplace `\\n**$1**\\t_$2_\\t$4`  \n  \n  \n**bold**  \n`\\*\\*([^\\n```.]*)\\*\\*`  \nReplace with bold inline code block  \n**`$1`**  \n  \n  \n**between parentheses and newline**  \n`\\)\\s?(.*?)\\s?\\n`  \nMake the non-whitespace sentence of it bold  \n`) \\t**$1**\\n`  \n  \n  \n**whitespace on the left side of bold stars**  \n`\\*\\*\\s?([A-Za-z])`  \nRemove that whitespace  \n`**$1`  \n  \n  \n  ",
      "html": "<h3>Markdown:</h3>\n<p><strong>CLI command “–help” output lines to Markdown file</strong><br>\nFind <code>\\n(.*?) (([a-z]+) )?([A-Z])</code><br>\nReplace <code>\\n**$1**\\t_$2_\\t$4</code></p>\n<p><strong>bold</strong><br>\n<code>\\*\\*([^\\n```.]*)\\*\\*</code><br>\nReplace with bold inline code block<br>\n<strong><code>$1</code></strong></p>\n<p><strong>between parentheses and newline</strong><br>\n<code>\\)\\s?(.*?)\\s?\\n</code><br>\nMake the non-whitespace sentence of it bold<br>\n<code>) \\t**$1**\\n</code></p>\n<p><strong>whitespace on the left side of bold stars</strong><br>\n<code>\\*\\*\\s?([A-Za-z])</code><br>\nRemove that whitespace<br>\n<code>**$1</code></p>\n",
      "id": 14
    },
    {
      "path": "Pro Tips/Basics/RegEx/index.md",
      "url": "Pro Tips/Basics/RegEx/index.html",
      "content": "# Regular Expressions  \n  \n> * **[Basics](./Basics.md)**  \n> * **[HTML](./HTML.md)**  \n> * **[Javascript](./Javascript.md)**  \n> * **[Markdown](./Markdown.md)**  \n  \n### Find/Replace  \nLets use the link above as an example. We want to convert local links from `.md` to `.html`...  \n#### in IDE:  \n```  \nFind: (\\[.*?\\]\\(\\./.*?).md(\\))  \nReplace: $1.html$2  \n```  \n#### using Javascript:  \n```  \nstr.replace(\\(\\[.*?\\]\\(\\./.*?).md(\\))\\g, \"$1.html$2\");  \n```  \nSo, no matter the complexity, just write the match/replace as:  \n```  \nstr.replace(\\        \\g, \"       \")  \n```  \n ",
      "html": "<h1>Regular Expressions</h1>\n<blockquote>\n<ul>\n<li><strong><a href=\"./Basics.html\">Basics</a></strong></li>\n<li><strong><a href=\"./HTML.html\">HTML</a></strong></li>\n<li><strong><a href=\"./Javascript.html\">Javascript</a></strong></li>\n<li><strong><a href=\"./Markdown.html\">Markdown</a></strong></li>\n</ul>\n</blockquote>\n<h3>Find/Replace</h3>\n<p>Lets use the link above as an example. We want to convert local links from <code>.md</code> to <code>.html</code>…</p>\n<h4>in IDE:</h4>\n<pre><code>Find: (\\[.*?\\]\\(\\./.*?).md(\\))  \nReplace: $1.html$2  \n</code></pre>\n<h4>using Javascript:</h4>\n<pre><code>str.replace(\\(\\[.*?\\]\\(\\./.*?).md(\\))\\g, &quot;$1.html$2&quot;);  \n</code></pre>\n<p>So, no matter the complexity, just write the match/replace as:</p>\n<pre><code>str.replace(\\        \\g, &quot;       &quot;)  \n</code></pre>\n",
      "id": 15
    },
    {
      "path": "Pro Tips/Front End/CSS/index.md",
      "url": "Pro Tips/Front End/CSS/index.html",
      "content": "### Units and Responsive design:\n#### With only a little work, your pixel sizes can scale proportionally with the viewer's screen size.  \nBut that's not all. Keep reading, and this applies also to ALL CSS properties, not just font-size. Also margin, padding, top, left, border, width, height, etc. They can all be responsive just by adding some dynamic text sizes.  \n  \n```css  \n/* set your default text size for the page */  \nhtml {  \n    font-size: 16.5px;  \n}  \n/* make smaller for smaller screens */  \n@media (max-width: 950px),(max-height: 750px) {  \n    html {  \n        font-size: 15px;  \n    }  \n}  \n@media (max-width: 750px),(max-height: 650px) {  \n    html {  \n        font-size: 12.5px;  \n    }  \n}  \n@media (max-width: 380px),(max-height: 380px) {  \n    html {  \n        font-size: 11.5px;  \n    }  \n}  \n@media (max-width: 330px),(max-height: 330px) {  \n    html {  \n        font-size: 10.5px;  \n    }  \n}  \n/* make bigger for extra large screens */  \n@media (min-width: 1600px) {  \n    html {  \n        font-size: 19px;  \n    }  \n}  \n```  \n  \n#### That's it. You're done. Now you can use responsive **`rem`** units instead of static pixels.  \n  \nNow, you can style an `<h1>` tag to have `font-size` of `2rem` pixels instead of `30px`. The difference is:  \n1. Traditionally, with static pixels, no matter what screen size, your text would be always 30px. On a big screen, it may be too small. On a phone screen, it would be too big.  \n2. Responsive size of `2rem` means that whatever you are sizing is 2 times the font-size of the `<html>` element. \n\n> **If the `<html>`  font size is \"16.5px\", then \"2rem\" equates to \"33px\". On a small screen, where the `<html>` font size is \"11.5px\", then \"2rem\" means only \"23px\".**  \n  \n> `3rem` is 3 times the `<html>` font size.  \n> `1.5rem` is 1.5 times.  \n> You can even do small amounts like `0.01rem`, instead of `1px` - useful for borders or padding.  \n  \n  \nWith no extra effort. Apply the same sizing to your padding, and widths, especially \"max-width\", to have larger UI distances on larger screens, and small compact styling for phones and tablets.  \n  \n  \n  \n  \n",
      "html": "<h3>Units and Responsive design:</h3>\n<h4>With only a little work, your pixel sizes can scale proportionally with the viewer’s screen size.</h4>\n<p>But that’s not all. Keep reading, and this applies also to ALL CSS properties, not just font-size. Also margin, padding, top, left, border, width, height, etc. They can all be responsive just by adding some dynamic text sizes.</p>\n<pre><code class=\"language-css\">/* set your default text size for the page */  \nhtml {  \n    font-size: 16.5px;  \n}  \n/* make smaller for smaller screens */  \n@media (max-width: 950px),(max-height: 750px) {  \n    html {  \n        font-size: 15px;  \n    }  \n}  \n@media (max-width: 750px),(max-height: 650px) {  \n    html {  \n        font-size: 12.5px;  \n    }  \n}  \n@media (max-width: 380px),(max-height: 380px) {  \n    html {  \n        font-size: 11.5px;  \n    }  \n}  \n@media (max-width: 330px),(max-height: 330px) {  \n    html {  \n        font-size: 10.5px;  \n    }  \n}  \n/* make bigger for extra large screens */  \n@media (min-width: 1600px) {  \n    html {  \n        font-size: 19px;  \n    }  \n}  \n</code></pre>\n<h4>That’s it. You’re done. Now you can use responsive <strong><code>rem</code></strong> units instead of static pixels.</h4>\n<p>Now, you can style an <code>&lt;h1&gt;</code> tag to have <code>font-size</code> of <code>2rem</code> pixels instead of <code>30px</code>. The difference is:</p>\n<ol>\n<li>Traditionally, with static pixels, no matter what screen size, your text would be always 30px. On a big screen, it may be too small. On a phone screen, it would be too big.</li>\n<li>Responsive size of <code>2rem</code> means that whatever you are sizing is 2 times the font-size of the <code>&lt;html&gt;</code> element.</li>\n</ol>\n<blockquote>\n<p><strong>If the <code>&lt;html&gt;</code>  font size is “16.5px”, then “2rem” equates to “33px”. On a small screen, where the <code>&lt;html&gt;</code> font size is “11.5px”, then “2rem” means only “23px”.</strong></p>\n</blockquote>\n<blockquote>\n<p><code>3rem</code> is 3 times the <code>&lt;html&gt;</code> font size.<br>\n<code>1.5rem</code> is 1.5 times.<br>\nYou can even do small amounts like <code>0.01rem</code>, instead of <code>1px</code> - useful for borders or padding.</p>\n</blockquote>\n<p>With no extra effort. Apply the same sizing to your padding, and widths, especially “max-width”, to have larger UI distances on larger screens, and small compact styling for phones and tablets.</p>\n",
      "id": 16
    },
    {
      "path": "Pro Tips/Front End/CSS/frameworks.md",
      "url": "Pro Tips/Front End/CSS/frameworks.html",
      "content": "### Bootstrap  \n  \nPeople only use Bootstrap because \"everyone\" uses Bootstrap, and because it has a great name, not because of the merits of that framework.  \n  \nUnfortunately, Bootstrap is poorely written, buggy, not aligned (sloppy), looks cheap, and most importantly, it badly clutters your global namespace. So, when you create a new class name like `.map` or `.error`, it may or may not be taken over by one of Bootstrap's hundreds of class names on the global namespace.  \n  \nIf you must use Bootstrap, try this:  \nhttps://www.google.com/search?q=bootstrap+namespace+conflict&oq=bootstrap+namespace&aqs=chrome.2.69i57j0l5.4104j1j7&sourceid=chrome&ie=UTF-8  \n  \n  \n### Consider these alternatives:  \n  \n**Static sites (with jQuery):**  \n* [Bulma](https://bulma.io/alternative-to-bootstrap/)  \n* [several alternatives](https://www.agriya.com/blog/15-alternatives-bootstrap-foundation-skeleton/)  \n  \n**React app:**  \n* [Material UI](https://material-ui.com/​) (standard)  \n* [Blueprint](https://blueprintjs.com/) (Powerful and customizable! Unfortunately, their documentation/examples are difficult)  \n* [Ant design](https://ant.design/docs/react/introduce)  \n  \n**Angular app:**  \n* Angular Material (standard)  \n* [Ant design](https://ng.ant.design/docs/introduce/en​) (alternative, minimal outlined look without so much solid color)  \n  \n**Worth considering:**  \n* [AUI (Atlassian UI)](https://docs.atlassian.com/aui)  \n<br />Two ways to use:  \n    * **CSS + Javascript** - perfect for static sites. Alternative to jQueryUI.  \n    * **CSS only** - can be used with React or Angular or anything, not for dynamic components like a datepicker, but just to give the page layout (like header, nav, menus, buttons) that polished \"enterprise\" feel.",
      "html": "<h3>Bootstrap</h3>\n<p>People only use Bootstrap because “everyone” uses Bootstrap, and because it has a great name, not because of the merits of that framework.</p>\n<p>Unfortunately, Bootstrap is poorely written, buggy, not aligned (sloppy), looks cheap, and most importantly, it badly clutters your global namespace. So, when you create a new class name like <code>.map</code> or <code>.error</code>, it may or may not be taken over by one of Bootstrap’s hundreds of class names on the global namespace.</p>\n<p>If you must use Bootstrap, try this:<br>\n<a href=\"https://www.google.com/search?q=bootstrap+namespace+conflict&amp;oq=bootstrap+namespace&amp;aqs=chrome.2.69i57j0l5.4104j1j7&amp;sourceid=chrome&amp;ie=UTF-8\">https://www.google.com/search?q=bootstrap+namespace+conflict&amp;oq=bootstrap+namespace&amp;aqs=chrome.2.69i57j0l5.4104j1j7&amp;sourceid=chrome&amp;ie=UTF-8</a></p>\n<h3>Consider these alternatives:</h3>\n<p><strong>Static sites (with jQuery):</strong></p>\n<ul>\n<li><a href=\"https://bulma.io/alternative-to-bootstrap/\">Bulma</a></li>\n<li><a href=\"https://www.agriya.com/blog/15-alternatives-bootstrap-foundation-skeleton/\">several alternatives</a></li>\n</ul>\n<p><strong>React app:</strong></p>\n<ul>\n<li><a href=\"https://material-ui.com/%E2%80%8B\">Material UI</a> (standard)</li>\n<li><a href=\"https://blueprintjs.com/\">Blueprint</a> (Powerful and customizable! Unfortunately, their documentation/examples are difficult)</li>\n<li><a href=\"https://ant.design/docs/react/introduce\">Ant design</a></li>\n</ul>\n<p><strong>Angular app:</strong></p>\n<ul>\n<li>Angular Material (standard)</li>\n<li><a href=\"https://ng.ant.design/docs/introduce/en%E2%80%8B\">Ant design</a> (alternative, minimal outlined look without so much solid color)</li>\n</ul>\n<p><strong>Worth considering:</strong></p>\n<ul>\n<li><a href=\"https://docs.atlassian.com/aui\">AUI (Atlassian UI)</a><br>\n<br />Two ways to use:\n<ul>\n<li><strong>CSS + Javascript</strong> - perfect for static sites. Alternative to jQueryUI.</li>\n<li><strong>CSS only</strong> - can be used with React or Angular or anything, not for dynamic components like a datepicker, but just to give the page layout (like header, nav, menus, buttons) that polished “enterprise” feel.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 17
    },
    {
      "path": "Pro Tips/Front End/CSS/unusually responsive.md",
      "url": "Pro Tips/Front End/CSS/unusually responsive.html",
      "content": "### A responsive case study, this very page...\n\nOn the phone or small device, all this content and nav column does not fit on the screen. However, the typical hamburger icon and dropdown menu is very cumbersome and forces the user to sit through several operations before seeing the desired content\n> 1. find hamburger icon\n> 2. click on it\n> 3. wait for it to drop down\n> 4. scroll the nav dropdown to the desired link   \n\nIdeally, on a mobile site, I want to access the navigation and content seamlessly, quickly, without much clicking and waiting. The problem isn't time, but that the content of the screen changes - appears, dissapears. This is stressful, a lack of control. Scrolling is sometimes more intuitive. The hamburger icon is great, when you want to preserve your layout, and present your brand in a clean and well designed way. But this is just a documentation note taking site.\n\nSo, I decided to keep the vertical nav menu as is, only limit the screen from getting too small. Text will always be big enough to be legible with this meta tag:\n```html\n<meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width\">\n```\n\nNow, to get to the content, all you have to do is scroll right. To get to the nav, scroll left. Quick and simple! Now the tricky part, to make the content legible on the small screen. Fortunately, that is very easy:\n```css\n.content {  max-width: 100vw;  } \n```\n\nUnfortunately, this page/site has a bunch of `<pre>` and other elements which sometimes take up `1000px` or more of width. So this makes it more complicated. The above fix would work with simple text, like blog posts. But, we need:\n```css\n/* mobile scrolling */\n.content {\n    max-width: 100vw;\n    overflow-x: hidden;\n    box-sizing: border-box;\n}\n.content pre,\n .content code {\n    max-width: 100vw;\n    overflow-x: auto;\n    position: relative;\n}\n@media (max-width: 720px) {\n    .content {\n        min-width: 100vw;\n    }\n}\n``` \n\n\n## The rest of the text, and even images, divs, padding, etc...\nSee the main index.html/README.md for this section.",
      "html": "<h3>A responsive case study, this very page…</h3>\n<p>On the phone or small device, all this content and nav column does not fit on the screen. However, the typical hamburger icon and dropdown menu is very cumbersome and forces the user to sit through several operations before seeing the desired content</p>\n<blockquote>\n<ol>\n<li>find hamburger icon</li>\n<li>click on it</li>\n<li>wait for it to drop down</li>\n<li>scroll the nav dropdown to the desired link</li>\n</ol>\n</blockquote>\n<p>Ideally, on a mobile site, I want to access the navigation and content seamlessly, quickly, without much clicking and waiting. The problem isn’t time, but that the content of the screen changes - appears, dissapears. This is stressful, a lack of control. Scrolling is sometimes more intuitive. The hamburger icon is great, when you want to preserve your layout, and present your brand in a clean and well designed way. But this is just a documentation note taking site.</p>\n<p>So, I decided to keep the vertical nav menu as is, only limit the screen from getting too small. Text will always be big enough to be legible with this meta tag:</p>\n<pre><code class=\"language-html\">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;&gt;\n</code></pre>\n<p>Now, to get to the content, all you have to do is scroll right. To get to the nav, scroll left. Quick and simple! Now the tricky part, to make the content legible on the small screen. Fortunately, that is very easy:</p>\n<pre><code class=\"language-css\">.content {  max-width: 100vw;  } \n</code></pre>\n<p>Unfortunately, this page/site has a bunch of <code>&lt;pre&gt;</code> and other elements which sometimes take up <code>1000px</code> or more of width. So this makes it more complicated. The above fix would work with simple text, like blog posts. But, we need:</p>\n<pre><code class=\"language-css\">/* mobile scrolling */\n.content {\n    max-width: 100vw;\n    overflow-x: hidden;\n    box-sizing: border-box;\n}\n.content pre,\n .content code {\n    max-width: 100vw;\n    overflow-x: auto;\n    position: relative;\n}\n@media (max-width: 720px) {\n    .content {\n        min-width: 100vw;\n    }\n}\n</code></pre>\n<h2>The rest of the text, and even images, divs, padding, etc…</h2>\n<p>See the main index.html/README.md for this section.</p>\n",
      "id": 18
    },
    {
      "path": "Pro Tips/Front End/JavaScript/ES6.md",
      "url": "Pro Tips/Front End/JavaScript/ES6.html",
      "content": "# ES6  \nIs simply EcmaScript version 6, or ES2015, or, the new web standards adopted in 2015.  \n  \n#### Spread Operator  \n```javascript  \n    // Arrays  \n    var listAll = [...listDefault, ...listNew]  \n    // vs ES5:  \n    var listAll = listDefault.concat(listNew)  \n  \n    // Objects  \n    var dictAll = {...dictDefault, ...dictNew}  \n    // vs ES5:  \n    var dictAll = Object.assign(dictDefault, dictNew)  \n```  \n  \n#### Destructuring Assignment  \n```javascript  \n    function(first, second, ...theRest) {}  \n    // vs ES6:  \n    function(){  \n        let first = arguments.shift();  \n        let second = arguments.shift();  \n        let theRest = arguments;  \n    }  \n```  \n  \n#### Functions  \n```javascript  \n    ()=>{};  \n    /* is the same thing as... */  \n    function(){}.bind(this);  \n    /* maybe a good idea to use ES6 methods to show there IS a `this` context, */  \n    /* and ES5 functions to show there is not, or that it's a `pure function` */  \n```  \n  \n#### Classes  \n```javascript  \n    // With a constructor  \n    function MyObjectA () {};  \n    var myInstanceA = new MyObjectA(); // {}  \n  \n    // With a function  \n    function MyObjectB () {  \n      return {};  \n    };  \n    var myInstanceB = MyObjectB(); // {}  \n  \n    // ES6 class  \n    class MyObjectC {}  \n    var myInstanceC = new MyObjectC(); // {}  \n```  \n  \n",
      "html": "<h1>ES6</h1>\n<p>Is simply EcmaScript version 6, or ES2015, or, the new web standards adopted in 2015.</p>\n<h4>Spread Operator</h4>\n<pre><code class=\"language-javascript\">    // Arrays  \n    var listAll = [...listDefault, ...listNew]  \n    // vs ES5:  \n    var listAll = listDefault.concat(listNew)  \n  \n    // Objects  \n    var dictAll = {...dictDefault, ...dictNew}  \n    // vs ES5:  \n    var dictAll = Object.assign(dictDefault, dictNew)  \n</code></pre>\n<h4>Destructuring Assignment</h4>\n<pre><code class=\"language-javascript\">    function(first, second, ...theRest) {}  \n    // vs ES6:  \n    function(){  \n        let first = arguments.shift();  \n        let second = arguments.shift();  \n        let theRest = arguments;  \n    }  \n</code></pre>\n<h4>Functions</h4>\n<pre><code class=\"language-javascript\">    ()=&gt;{};  \n    /* is the same thing as... */  \n    function(){}.bind(this);  \n    /* maybe a good idea to use ES6 methods to show there IS a `this` context, */  \n    /* and ES5 functions to show there is not, or that it's a `pure function` */  \n</code></pre>\n<h4>Classes</h4>\n<pre><code class=\"language-javascript\">    // With a constructor  \n    function MyObjectA () {};  \n    var myInstanceA = new MyObjectA(); // {}  \n  \n    // With a function  \n    function MyObjectB () {  \n      return {};  \n    };  \n    var myInstanceB = MyObjectB(); // {}  \n  \n    // ES6 class  \n    class MyObjectC {}  \n    var myInstanceC = new MyObjectC(); // {}  \n</code></pre>\n",
      "id": 19
    },
    {
      "path": "Pro Tips/Front End/JavaScript/index.md",
      "url": "Pro Tips/Front End/JavaScript/index.html",
      "content": "# EcmaScript  == JavaScript  \nhttp://2ality.com/2011/03/javascript-how-it-all-began.html  \n> '**We aimed to provide a “glue language” for the Web designers and part time programmers** who were building Web content from components such as images, plugins, and Java applets. We saw Java as the “component language” used by higher-priced programmers, where the glue programmers – the Web page designers – would assemble components and automate their interactions using JS.' ~ Brendan Eich, Netscape  \n  \n## Basics:\n> * [looping](looping.md)\n> * [sorting](sorting.md)\n\n### Next:\n> * [ES6](ES6.md)\n> * [React](React.md)\n\n\n",
      "html": "<h1>EcmaScript  == JavaScript</h1>\n<p><a href=\"http://2ality.com/2011/03/javascript-how-it-all-began.html\">http://2ality.com/2011/03/javascript-how-it-all-began.html</a></p>\n<blockquote>\n<p>‘<strong>We aimed to provide a “glue language” for the Web designers and part time programmers</strong> who were building Web content from components such as images, plugins, and Java applets. We saw Java as the “component language” used by higher-priced programmers, where the glue programmers – the Web page designers – would assemble components and automate their interactions using JS.’ ~ Brendan Eich, Netscape</p>\n</blockquote>\n<h2>Basics:</h2>\n<blockquote>\n<ul>\n<li><a href=\"looping.html\">looping</a></li>\n<li><a href=\"sorting.html\">sorting</a></li>\n</ul>\n</blockquote>\n<h3>Next:</h3>\n<blockquote>\n<ul>\n<li><a href=\"ES6.html\">ES6</a></li>\n<li><a href=\"React.html\">React</a></li>\n</ul>\n</blockquote>\n",
      "id": 20
    },
    {
      "path": "Pro Tips/Front End/JavaScript/React/index.md",
      "url": "Pro Tips/Front End/JavaScript/React/index.html",
      "content": "# React\n\n### Shorthand (only render method, no lifecycle):\n\n```javascript\nconst Profile = props => {\n    \n  // validate inputs\n  if (!props.someList || !props.someList.length) {\n      return null;\n  }\n  \n  // what are we rendering?\n  const Items = [];\n  for (let i=0; i<props.someList.length; i++) {\n      Items.push(<li>{props.someList[i]}</li>);\n  };\n  \n  // ok, lets render it\n  return (<ol>{Items}</ol>);\n};\n```\n\n## \n### this.state\n**Set state only after render(), in componentDidUpdate() and custom methods.**, always being paranoid to avoid infinite loops.  \n  \n**Also,**  \nBecause `this.props` and `this.state` may be updated asynchronously, you should not rely on their values for calculating the next state.\n```javascript\n    /* do this if there's any possibility of vars changing in the meanwhile */\n    this.setState((state, props)=>(\n        { counter: state.counter + props.increment }\n    ));\n``` \nhttps://medium.freecodecamp.org/get-pro-with-react-setstate-in-10-minutes-d38251d1c781\n\n## \n### Version 17 (new and renamed lifecycle methods):\n* UNSAFE_componentWillMount\n* UNSAFE_componentWillRecieveProps\n* UNSAFE_componentWillUpdate\n* **getDerivedStateFromProps** (prevProps, prevState) {}\n    * This method is going to handle what **componentWillRecieveProps** was able to do along with **componentDidUpdate**. It is static. It is called after a component is created and also called when it receives a new prop. This will be the safer alternative to **componentWillRecieveProps**.\n* **getSnapshotBeforeUpdate** (prevProps, prevState) {}\n    * This is going to handle what **componentWillUpdate** was able to do along with **componentDidUpdate**. This is called right before the DOM is updated. The value that is returned from **getSnapshotBeforeUpdate** is passed on to **componentDidUpdate**.\n",
      "html": "<h1>React</h1>\n<h3>Shorthand (only render method, no lifecycle):</h3>\n<pre><code class=\"language-javascript\">const Profile = props =&gt; {\n    \n  // validate inputs\n  if (!props.someList || !props.someList.length) {\n      return null;\n  }\n  \n  // what are we rendering?\n  const Items = [];\n  for (let i=0; i&lt;props.someList.length; i++) {\n      Items.push(&lt;li&gt;{props.someList[i]}&lt;/li&gt;);\n  };\n  \n  // ok, lets render it\n  return (&lt;ol&gt;{Items}&lt;/ol&gt;);\n};\n</code></pre>\n<h2></h2>\n<h3>this.state</h3>\n<p><strong>Set state only after render(), in componentDidUpdate() and custom methods.</strong>, always being paranoid to avoid infinite loops.</p>\n<p><strong>Also,</strong><br>\nBecause <code>this.props</code> and <code>this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state.</p>\n<pre><code class=\"language-javascript\">    /* do this if there's any possibility of vars changing in the meanwhile */\n    this.setState((state, props)=&gt;(\n        { counter: state.counter + props.increment }\n    ));\n</code></pre>\n<p><a href=\"https://medium.freecodecamp.org/get-pro-with-react-setstate-in-10-minutes-d38251d1c781\">https://medium.freecodecamp.org/get-pro-with-react-setstate-in-10-minutes-d38251d1c781</a></p>\n<h2></h2>\n<h3>Version 17 (new and renamed lifecycle methods):</h3>\n<ul>\n<li>UNSAFE_componentWillMount</li>\n<li>UNSAFE_componentWillRecieveProps</li>\n<li>UNSAFE_componentWillUpdate</li>\n<li><strong>getDerivedStateFromProps</strong> (prevProps, prevState) {}\n<ul>\n<li>This method is going to handle what <strong>componentWillRecieveProps</strong> was able to do along with <strong>componentDidUpdate</strong>. It is static. It is called after a component is created and also called when it receives a new prop. This will be the safer alternative to <strong>componentWillRecieveProps</strong>.</li>\n</ul>\n</li>\n<li><strong>getSnapshotBeforeUpdate</strong> (prevProps, prevState) {}\n<ul>\n<li>This is going to handle what <strong>componentWillUpdate</strong> was able to do along with <strong>componentDidUpdate</strong>. This is called right before the DOM is updated. The value that is returned from <strong>getSnapshotBeforeUpdate</strong> is passed on to <strong>componentDidUpdate</strong>.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 21
    },
    {
      "path": "Pro Tips/Front End/JavaScript/looping.md",
      "url": "Pro Tips/Front End/JavaScript/looping.html",
      "content": "# How to loop over Arrays  \n```javascript  \n    /*  \"forEach\" is preferred because of this option to skip the loop item */  \n    arr.forEach(function(item, i){  \n        if (!item) {  \n            return;  \n        }  \n        console.log(item);  \n    });  \n```  \n```javascript  \n    /* \"for\" works well, but is verbose */  \n    for (let i = 0; i < arr.length; i++) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n```  \n```javascript  \n    /* \"for of\" works fine, but is annoying because I have to manage all my own variables */  \n    let i = 0;  \n    for (let item of arr) {  \n        console.log(item, i);  \n        i++;  \n    }  \n```  \n```javascript  \n    /* \"while\" is not recommended because you have to remember to increment the index */  \n    let i = 0;  \n    while (i<arr.length) {  \n        const item = arr[i];  \n        console.log(item, i);  \n        i++;  \n    }  \n```  \n```javascript  \n    /* \"for in\" is not recommended. It iterates indexed items, as well as named properties! */  \n    /* yes, btw, Arrays can have named properties, just like Objects */  \n    for (const i in arr) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n```  \n##  \n# How to loop over Objects  \n```javascript  \n    /* \"for in\" */  \n    for (const key in obj) {  \n        const value = obj[key];  \n        console.log(value, key);  \n    }  \n```  \n##  \n# How to loop over Strings  \n```javascript  \n    /*  \"forEach\" */  \n    \"some word\".forEach(function(letter, i){  \n        if (letter===\" \") {  \n            return;  \n        }  \n        console.log(letter);  \n    });  \n```  \n##  \n# How to loop over Numbers (well, you can't, but...)  \n```javascript  \n    const loop_min = 0;  \n    const loop_max = 100;  \n    const loop_inc = 1;  \n```  \n```javascript  \n    /* \"while\" */  \n    let num = loop_min;  \n    while (num<loop_max) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n```  \n```javascript  \n    /* \"for\" */  \n    for (let i = loop_min; i < loop_max; i++) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n```",
      "html": "<h1>How to loop over Arrays</h1>\n<pre><code class=\"language-javascript\">    /*  &quot;forEach&quot; is preferred because of this option to skip the loop item */  \n    arr.forEach(function(item, i){  \n        if (!item) {  \n            return;  \n        }  \n        console.log(item);  \n    });  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for&quot; works well, but is verbose */  \n    for (let i = 0; i &lt; arr.length; i++) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for of&quot; works fine, but is annoying because I have to manage all my own variables */  \n    let i = 0;  \n    for (let item of arr) {  \n        console.log(item, i);  \n        i++;  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;while&quot; is not recommended because you have to remember to increment the index */  \n    let i = 0;  \n    while (i&lt;arr.length) {  \n        const item = arr[i];  \n        console.log(item, i);  \n        i++;  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for in&quot; is not recommended. It iterates indexed items, as well as named properties! */  \n    /* yes, btw, Arrays can have named properties, just like Objects */  \n    for (const i in arr) {  \n        const item = arr[i];  \n        console.log(item, i);  \n    }  \n</code></pre>\n<h2></h2>\n<h1>How to loop over Objects</h1>\n<pre><code class=\"language-javascript\">    /* &quot;for in&quot; */  \n    for (const key in obj) {  \n        const value = obj[key];  \n        console.log(value, key);  \n    }  \n</code></pre>\n<h2></h2>\n<h1>How to loop over Strings</h1>\n<pre><code class=\"language-javascript\">    /*  &quot;forEach&quot; */  \n    &quot;some word&quot;.forEach(function(letter, i){  \n        if (letter===&quot; &quot;) {  \n            return;  \n        }  \n        console.log(letter);  \n    });  \n</code></pre>\n<h2></h2>\n<h1>How to loop over Numbers (well, you can’t, but…)</h1>\n<pre><code class=\"language-javascript\">    const loop_min = 0;  \n    const loop_max = 100;  \n    const loop_inc = 1;  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;while&quot; */  \n    let num = loop_min;  \n    while (num&lt;loop_max) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n</code></pre>\n<pre><code class=\"language-javascript\">    /* &quot;for&quot; */  \n    for (let i = loop_min; i &lt; loop_max; i++) {  \n        /* do something with num */  \n        num += loop_inc;  \n    }  \n</code></pre>\n",
      "id": 22
    },
    {
      "path": "Pro Tips/Front End/JavaScript/sorting.md",
      "url": "Pro Tips/Front End/JavaScript/sorting.html",
      "content": "# Sorting Arrays:\n\nArray has a built in prototype method **sort**. Use it: **`myArr.sort(mySortFunction)`**\n\n* mySortFunction takes in a previous and current list item as its first two arguments(a, b)\n* it should return a higher number (1) if the **new** item is to be put higher in the list\n* return a lower number (-1) if the new item should be placed lower in the sorted list\n* return zero (0) if undecided, and let the other items get positioned above/below it\n\n```javascript\n// simple sort, from longest to shortest string length:\nvar mySortFunction = function (a, b) {\n    return a.length - b.length;\n}\n```\n\n```javascript\n// more complicated custom sort, getting a score for each item:\nconst mySortFunction = function (a, b) {\n    // rating\n    let rating_a = kw.dict[a].rating;\n    let rating_b = kw.dict[b].rating;\n    // sort by rating\n    if (rating_a > rating_b) {\n        return -1;\n    } else if (rating_a < rating_b) {\n        return 1;\n    } else {\n        // if same rating, prefer shorter strings\n        if (a.length < b.length) {\n            return -1;\n        } else if (a.length > b.length) {\n            return 1;\n        } else {\n            return 0;\n        }\n        return 0;\n    }\n}\n```\n\n## To sort an Object, first convert it to Array:\n```javascript\n    var myArr_values = Object.values();\n    var myArr_keys = Object.keys();\n    var myArr_pairs = Object.entries();\n```",
      "html": "<h1>Sorting Arrays:</h1>\n<p>Array has a built in prototype method <strong>sort</strong>. Use it: <strong><code>myArr.sort(mySortFunction)</code></strong></p>\n<ul>\n<li>mySortFunction takes in a previous and current list item as its first two arguments(a, b)</li>\n<li>it should return a higher number (1) if the <strong>new</strong> item is to be put higher in the list</li>\n<li>return a lower number (-1) if the new item should be placed lower in the sorted list</li>\n<li>return zero (0) if undecided, and let the other items get positioned above/below it</li>\n</ul>\n<pre><code class=\"language-javascript\">// simple sort, from longest to shortest string length:\nvar mySortFunction = function (a, b) {\n    return a.length - b.length;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">// more complicated custom sort, getting a score for each item:\nconst mySortFunction = function (a, b) {\n    // rating\n    let rating_a = kw.dict[a].rating;\n    let rating_b = kw.dict[b].rating;\n    // sort by rating\n    if (rating_a &gt; rating_b) {\n        return -1;\n    } else if (rating_a &lt; rating_b) {\n        return 1;\n    } else {\n        // if same rating, prefer shorter strings\n        if (a.length &lt; b.length) {\n            return -1;\n        } else if (a.length &gt; b.length) {\n            return 1;\n        } else {\n            return 0;\n        }\n        return 0;\n    }\n}\n</code></pre>\n<h2>To sort an Object, first convert it to Array:</h2>\n<pre><code class=\"language-javascript\">    var myArr_values = Object.values();\n    var myArr_keys = Object.keys();\n    var myArr_pairs = Object.entries();\n</code></pre>\n",
      "id": 23
    },
    {
      "path": "SysAdmin/Containers/Docker/index.md",
      "url": "SysAdmin/Containers/Docker/index.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n\n",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n",
      "id": 24
    },
    {
      "path": "SysAdmin/Containers/Docker/docker-compose.md",
      "url": "SysAdmin/Containers/Docker/docker-compose.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n\n# docker compose  \nhttps://docs.docker.com/engine/reference/builder/  \n  \n```bash  \n# Build everything defined in the .yml file  \ndocker-compose build  \n  \n# Bring up the whole application defined in .yml file (all the individual services)  \ndocker-compose up -d  \n  \n# Bring up only one service defined in the .yml file  \ndocker-compose up -d rte  \n  \n# Or force a build during with the up command  \ndocker-compose up -d --build  \n```  \n  \n#### Build current folder (Dockerfile), allow port 8080  \n```bash  \nversion: '3'  \n  \nservices:  \n  servicename1:  \n    image: localrepo/name1:0.0.1  \n    build: .  \n    ports:  \n      - \"8080:8080\"  \n```",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n<h1>docker compose</h1>\n<p><a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n<pre><code class=\"language-bash\"># Build everything defined in the .yml file  \ndocker-compose build  \n  \n# Bring up the whole application defined in .yml file (all the individual services)  \ndocker-compose up -d  \n  \n# Bring up only one service defined in the .yml file  \ndocker-compose up -d rte  \n  \n# Or force a build during with the up command  \ndocker-compose up -d --build  \n</code></pre>\n<h4>Build current folder (Dockerfile), allow port 8080</h4>\n<pre><code class=\"language-bash\">version: '3'  \n  \nservices:  \n  servicename1:  \n    image: localrepo/name1:0.0.1  \n    build: .  \n    ports:  \n      - &quot;8080:8080&quot;  \n</code></pre>\n",
      "id": 25
    },
    {
      "path": "SysAdmin/Containers/Docker/docker.md",
      "url": "SysAdmin/Containers/Docker/docker.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n\n# Dockerfiles and Docker Compose  \n  \n## Commands:  \n  \n* **`docker container ls`** see list of running containers  \n* **`docker stats`** see memory/cpu % of each container  \n  \n* **`docker build`** runs **`docker-compose.yml`** in the same folder  \n* **`docker-compose up`** runs **`docker-compose.yml`** in the same folder  \n  \n* **`docker stop $(docker ps -a -q)`** stop all (or specify container ID)  \n* **`docker rm $(docker ps -a -q)`** remove all (or specify container ID)  \n  \n* **`docker rmi $(docker images -a -q)`** remove all images (or specify image ID)  \n* **`docker images -f \"dangling=true\" -q`** list all dangling (untagged) images  \n* **`docker rmi $(docker images -f \"dangling=true\" -q)`** remove all dangling (untagged) images  \n  \n* **``**  \n  \n$(docker ps -a) can not be done over SSH, because it will be executed in the local terminal.  \n[coderwall.com/.../stop-remove-all-docker-containers](https://coderwall.com/p/ewk0mq/stop-remove-all-docker-containers)  \n  \n",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n<h1>Dockerfiles and Docker Compose</h1>\n<h2>Commands:</h2>\n<ul>\n<li>\n<p><strong><code>docker container ls</code></strong> see list of running containers</p>\n</li>\n<li>\n<p><strong><code>docker stats</code></strong> see memory/cpu % of each container</p>\n</li>\n<li>\n<p><strong><code>docker build</code></strong> runs <strong><code>docker-compose.yml</code></strong> in the same folder</p>\n</li>\n<li>\n<p><strong><code>docker-compose up</code></strong> runs <strong><code>docker-compose.yml</code></strong> in the same folder</p>\n</li>\n<li>\n<p><strong><code>docker stop $(docker ps -a -q)</code></strong> stop all (or specify container ID)</p>\n</li>\n<li>\n<p><strong><code>docker rm $(docker ps -a -q)</code></strong> remove all (or specify container ID)</p>\n</li>\n<li>\n<p><strong><code>docker rmi $(docker images -a -q)</code></strong> remove all images (or specify image ID)</p>\n</li>\n<li>\n<p><strong><code>docker images -f &quot;dangling=true&quot; -q</code></strong> list all dangling (untagged) images</p>\n</li>\n<li>\n<p><strong><code>docker rmi $(docker images -f &quot;dangling=true&quot; -q)</code></strong> remove all dangling (untagged) images</p>\n</li>\n<li>\n<p><strong>``</strong></p>\n</li>\n</ul>\n<p>$(docker ps -a) can not be done over SSH, because it will be executed in the local terminal.<br>\n<a href=\"https://coderwall.com/p/ewk0mq/stop-remove-all-docker-containers\">coderwall.com/…/stop-remove-all-docker-containers</a></p>\n",
      "id": 26
    },
    {
      "path": "SysAdmin/Containers/Docker/help docker-compose.md",
      "url": "SysAdmin/Containers/Docker/help docker-compose.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n\n# docker-compose --help\n```\nUsage:\n  docker-compose [-f <arg>...] [options] [COMMAND] [ARGS...]\n  docker-compose -h|--help\n\nOptions:\n  -f, --file FILE             Specify an alternate compose file\n                              (default: docker-compose.yml)\n  -p, --project-name NAME     Specify an alternate project name\n                              (default: directory name)\n  --verbose                   Show more output\n  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n  --no-ansi                   Do not print ANSI control characters\n  -v, --version               Print version and exit\n  -H, --host HOST             Daemon socket to connect to\n\n  --tls                       Use TLS; implied by --tlsverify\n  --tlscacert CA_PATH         Trust certs signed only by this CA\n  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file\n  --tlskey TLS_KEY_PATH       Path to TLS key file\n  --tlsverify                 Use TLS and verify the remote\n  --skip-hostname-check       Don't check the daemon's hostname against the\n                              name specified in the client certificate\n  --project-directory PATH    Specify an alternate working directory\n                              (default: the path of the Compose file)\n  --compatibility             If set, Compose will attempt to convert deploy\n                              keys in v3 files to their non-Swarm equivalent\n\nCommands:\n  build              Build or rebuild services\n  bundle             Generate a Docker bundle from the Compose file\n  config             Validate and view the Compose file\n  create             Create services\n  down               Stop and remove containers, networks, images, and volumes\n  events             Receive real time events from containers\n  exec               Execute a command in a running container\n  help               Get help on a command\n  images             List images\n  kill               Kill containers\n  logs               View output from containers\n  pause              Pause services\n  port               Print the public port for a port binding\n  ps                 List containers\n  pull               Pull service images\n  push               Push service images\n  restart            Restart services\n  rm                 Remove stopped containers\n  run                Run a one-off command\n  scale              Set number of containers for a service\n  start              Start services\n  stop               Stop services\n  top                Display the running processes\n  unpause            Unpause services\n  up                 Create and start containers\n  version            Show the Docker-Compose version information\n  ```",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n<h1>docker-compose --help</h1>\n<pre><code>Usage:\n  docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]\n  docker-compose -h|--help\n\nOptions:\n  -f, --file FILE             Specify an alternate compose file\n                              (default: docker-compose.yml)\n  -p, --project-name NAME     Specify an alternate project name\n                              (default: directory name)\n  --verbose                   Show more output\n  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n  --no-ansi                   Do not print ANSI control characters\n  -v, --version               Print version and exit\n  -H, --host HOST             Daemon socket to connect to\n\n  --tls                       Use TLS; implied by --tlsverify\n  --tlscacert CA_PATH         Trust certs signed only by this CA\n  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file\n  --tlskey TLS_KEY_PATH       Path to TLS key file\n  --tlsverify                 Use TLS and verify the remote\n  --skip-hostname-check       Don't check the daemon's hostname against the\n                              name specified in the client certificate\n  --project-directory PATH    Specify an alternate working directory\n                              (default: the path of the Compose file)\n  --compatibility             If set, Compose will attempt to convert deploy\n                              keys in v3 files to their non-Swarm equivalent\n\nCommands:\n  build              Build or rebuild services\n  bundle             Generate a Docker bundle from the Compose file\n  config             Validate and view the Compose file\n  create             Create services\n  down               Stop and remove containers, networks, images, and volumes\n  events             Receive real time events from containers\n  exec               Execute a command in a running container\n  help               Get help on a command\n  images             List images\n  kill               Kill containers\n  logs               View output from containers\n  pause              Pause services\n  port               Print the public port for a port binding\n  ps                 List containers\n  pull               Pull service images\n  push               Push service images\n  restart            Restart services\n  rm                 Remove stopped containers\n  run                Run a one-off command\n  scale              Set number of containers for a service\n  start              Start services\n  stop               Stop services\n  top                Display the running processes\n  unpause            Unpause services\n  up                 Create and start containers\n  version            Show the Docker-Compose version information\n</code></pre>\n",
      "id": 27
    },
    {
      "path": "SysAdmin/Containers/Docker/help docker-run.md",
      "url": "SysAdmin/Containers/Docker/help docker-run.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n\n# docker run --help  \n  ```\n  Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n     \n     Run a command in a new container\n     \n     Options:\n           --add-host list                  Add a custom host-to-IP mapping (host:ip)\n       -a, --attach list                    Attach to STDIN, STDOUT or STDERR\n           --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n           --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n           --cap-add list                   Add Linux capabilities\n           --cap-drop list                  Drop Linux capabilities\n           --cgroup-parent string           Optional parent cgroup for the container\n           --cidfile string                 Write the container ID to the file\n           --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n           --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n           --cpu-rt-period int              Limit CPU real-time period in microseconds\n           --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n       -c, --cpu-shares int                 CPU shares (relative weight)\n           --cpus decimal                   Number of CPUs\n           --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n           --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n       -d, --detach                         Run container in background and print container ID\n           --detach-keys string             Override the key sequence for detaching a container\n           --device list                    Add a host device to the container\n           --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n           --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n           --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n           --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n           --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n           --disable-content-trust          Skip image verification (default true)\n           --dns list                       Set custom DNS servers\n           --dns-option list                Set DNS options\n           --dns-search list                Set custom DNS search domains\n           --entrypoint string              Overwrite the default ENTRYPOINT of the image\n       -e, --env list                       Set environment variables\n           --env-file list                  Read in a file of environment variables\n           --expose list                    Expose a port or a range of ports\n           --group-add list                 Add additional groups to join\n           --health-cmd string              Command to run to check health\n           --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n           --health-retries int             Consecutive failures needed to report unhealthy\n           --health-start-period duration   Start period for the container to initialize before starting health-retries\n                                            countdown (ms|s|m|h) (default 0s)\n           --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n           --help                           Print usage\n       -h, --hostname string                Container host name\n           --init                           Run an init inside the container that forwards signals and reaps processes\n       -i, --interactive                    Keep STDIN open even if not attached\n           --ip string                      IPv4 address (e.g., 172.30.100.104)\n           --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n           --ipc string                     IPC mode to use\n           --isolation string               Container isolation technology\n           --kernel-memory bytes            Kernel memory limit\n       -l, --label list                     Set meta data on a container\n           --label-file list                Read in a line delimited file of labels\n           --link list                      Add link to another container\n           --link-local-ip list             Container IPv4/IPv6 link-local addresses\n           --log-driver string              Logging driver for the container\n           --log-opt list                   Log driver options\n           --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n       -m, --memory bytes                   Memory limit\n           --memory-reservation bytes       Memory soft limit\n           --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n           --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n           --mount mount                    Attach a filesystem mount to the container\n           --name string                    Assign a name to the container\n           --network string                 Connect a container to a network (default \"default\")\n           --network-alias list             Add network-scoped alias for the container\n           --no-healthcheck                 Disable any container-specified HEALTHCHECK\n           --oom-kill-disable               Disable OOM Killer\n           --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n           --pid string                     PID namespace to use\n           --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n           --platform string                Set platform if server is multi-platform capable\n           --privileged                     Give extended privileges to this container\n       -p, --publish list                   Publish a container's port(s) to the host\n       -P, --publish-all                    Publish all exposed ports to random ports\n           --read-only                      Mount the container's root filesystem as read only\n           --restart string                 Restart policy to apply when a container exits (default \"no\")\n           --rm                             Automatically remove the container when it exits\n           --runtime string                 Runtime to use for this container\n           --security-opt list              Security Options\n           --shm-size bytes                 Size of /dev/shm\n           --sig-proxy                      Proxy received signals to the process (default true)\n           --stop-signal string             Signal to stop a container (default \"SIGTERM\")\n           --stop-timeout int               Timeout (in seconds) to stop a container\n           --storage-opt list               Storage driver options for the container\n           --sysctl map                     Sysctl options (default map[])\n           --tmpfs list                     Mount a tmpfs directory\n       -t, --tty                            Allocate a pseudo-TTY\n           --ulimit ulimit                  Ulimit options (default [])\n       -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])\n           --userns string                  User namespace to use\n           --uts string                     UTS namespace to use\n       -v, --volume list                    Bind mount a volume\n           --volume-driver string           Optional volume driver for the container\n           --volumes-from list              Mount volumes from the specified container(s)\n       -w, --workdir string                 Working directory inside the container\n```",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n<h1>docker run --help</h1>\n<pre><code>Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n   \n   Run a command in a new container\n   \n   Options:\n         --add-host list                  Add a custom host-to-IP mapping (host:ip)\n     -a, --attach list                    Attach to STDIN, STDOUT or STDERR\n         --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n         --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n         --cap-add list                   Add Linux capabilities\n         --cap-drop list                  Drop Linux capabilities\n         --cgroup-parent string           Optional parent cgroup for the container\n         --cidfile string                 Write the container ID to the file\n         --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n         --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n         --cpu-rt-period int              Limit CPU real-time period in microseconds\n         --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n     -c, --cpu-shares int                 CPU shares (relative weight)\n         --cpus decimal                   Number of CPUs\n         --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n         --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n     -d, --detach                         Run container in background and print container ID\n         --detach-keys string             Override the key sequence for detaching a container\n         --device list                    Add a host device to the container\n         --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n         --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n         --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n         --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n         --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n         --disable-content-trust          Skip image verification (default true)\n         --dns list                       Set custom DNS servers\n         --dns-option list                Set DNS options\n         --dns-search list                Set custom DNS search domains\n         --entrypoint string              Overwrite the default ENTRYPOINT of the image\n     -e, --env list                       Set environment variables\n         --env-file list                  Read in a file of environment variables\n         --expose list                    Expose a port or a range of ports\n         --group-add list                 Add additional groups to join\n         --health-cmd string              Command to run to check health\n         --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n         --health-retries int             Consecutive failures needed to report unhealthy\n         --health-start-period duration   Start period for the container to initialize before starting health-retries\n                                          countdown (ms|s|m|h) (default 0s)\n         --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n         --help                           Print usage\n     -h, --hostname string                Container host name\n         --init                           Run an init inside the container that forwards signals and reaps processes\n     -i, --interactive                    Keep STDIN open even if not attached\n         --ip string                      IPv4 address (e.g., 172.30.100.104)\n         --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n         --ipc string                     IPC mode to use\n         --isolation string               Container isolation technology\n         --kernel-memory bytes            Kernel memory limit\n     -l, --label list                     Set meta data on a container\n         --label-file list                Read in a line delimited file of labels\n         --link list                      Add link to another container\n         --link-local-ip list             Container IPv4/IPv6 link-local addresses\n         --log-driver string              Logging driver for the container\n         --log-opt list                   Log driver options\n         --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n     -m, --memory bytes                   Memory limit\n         --memory-reservation bytes       Memory soft limit\n         --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n         --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n         --mount mount                    Attach a filesystem mount to the container\n         --name string                    Assign a name to the container\n         --network string                 Connect a container to a network (default &quot;default&quot;)\n         --network-alias list             Add network-scoped alias for the container\n         --no-healthcheck                 Disable any container-specified HEALTHCHECK\n         --oom-kill-disable               Disable OOM Killer\n         --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n         --pid string                     PID namespace to use\n         --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n         --platform string                Set platform if server is multi-platform capable\n         --privileged                     Give extended privileges to this container\n     -p, --publish list                   Publish a container's port(s) to the host\n     -P, --publish-all                    Publish all exposed ports to random ports\n         --read-only                      Mount the container's root filesystem as read only\n         --restart string                 Restart policy to apply when a container exits (default &quot;no&quot;)\n         --rm                             Automatically remove the container when it exits\n         --runtime string                 Runtime to use for this container\n         --security-opt list              Security Options\n         --shm-size bytes                 Size of /dev/shm\n         --sig-proxy                      Proxy received signals to the process (default true)\n         --stop-signal string             Signal to stop a container (default &quot;SIGTERM&quot;)\n         --stop-timeout int               Timeout (in seconds) to stop a container\n         --storage-opt list               Storage driver options for the container\n         --sysctl map                     Sysctl options (default map[])\n         --tmpfs list                     Mount a tmpfs directory\n     -t, --tty                            Allocate a pseudo-TTY\n         --ulimit ulimit                  Ulimit options (default [])\n     -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n         --userns string                  User namespace to use\n         --uts string                     UTS namespace to use\n     -v, --volume list                    Bind mount a volume\n         --volume-driver string           Optional volume driver for the container\n         --volumes-from list              Mount volumes from the specified container(s)\n     -w, --workdir string                 Working directory inside the container\n</code></pre>\n",
      "id": 28
    },
    {
      "path": "SysAdmin/Containers/Docker/help docker.md",
      "url": "SysAdmin/Containers/Docker/help docker.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n\n# docker --help\n```\nUsage:\tdocker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nOptions:\n      --config string      Location of client config files (default \"/Users/admin/.docker\")\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket(s) to connect to\n  -l, --log-level string   Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")\n      --tls                Use TLS; implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA (default \"/Users/admin/.docker/ca.pem\")\n      --tlscert string     Path to TLS certificate file (default \"/Users/admin/.docker/cert.pem\")\n      --tlskey string      Path to TLS key file (default \"/Users/admin/.docker/key.pem\")\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit\n\nManagement Commands:\n  builder     Manage builds\n  checkpoint  Manage checkpoints\n  config      Manage Docker configs\n  container   Manage containers\n  image       Manage images\n  network     Manage networks\n  node        Manage Swarm nodes\n  plugin      Manage plugins\n  secret      Manage Docker secrets\n  service     Manage services\n  stack       Manage Docker stacks\n  swarm       Manage Swarm\n  system      Manage Docker\n  trust       Manage trust on Docker images\n  volume      Manage volumes\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  build       Build an image from a Dockerfile\n  commit      Create a new image from a container's changes\n  cp          Copy files/folders between a container and the local filesystem\n  create      Create a new container\n  deploy      Deploy a new stack or update an existing stack\n  diff        Inspect changes to files or directories on a container's filesystem\n  events      Get real time events from the server\n  exec        Run a command in a running container\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  images      List images\n  import      Import the contents from a tarball to create a filesystem image\n  info        Display system-wide information\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  login       Log in to a Docker registry\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n```",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>\n<h1>docker --help</h1>\n<pre><code>Usage:\tdocker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nOptions:\n      --config string      Location of client config files (default &quot;/Users/admin/.docker&quot;)\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket(s) to connect to\n  -l, --log-level string   Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)\n      --tls                Use TLS; implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA (default &quot;/Users/admin/.docker/ca.pem&quot;)\n      --tlscert string     Path to TLS certificate file (default &quot;/Users/admin/.docker/cert.pem&quot;)\n      --tlskey string      Path to TLS key file (default &quot;/Users/admin/.docker/key.pem&quot;)\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit\n\nManagement Commands:\n  builder     Manage builds\n  checkpoint  Manage checkpoints\n  config      Manage Docker configs\n  container   Manage containers\n  image       Manage images\n  network     Manage networks\n  node        Manage Swarm nodes\n  plugin      Manage plugins\n  secret      Manage Docker secrets\n  service     Manage services\n  stack       Manage Docker stacks\n  swarm       Manage Swarm\n  system      Manage Docker\n  trust       Manage trust on Docker images\n  volume      Manage volumes\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  build       Build an image from a Dockerfile\n  commit      Create a new image from a container's changes\n  cp          Copy files/folders between a container and the local filesystem\n  create      Create a new container\n  deploy      Deploy a new stack or update an existing stack\n  diff        Inspect changes to files or directories on a container's filesystem\n  events      Get real time events from the server\n  exec        Run a command in a running container\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  images      List images\n  import      Import the contents from a tarball to create a filesystem image\n  info        Display system-wide information\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  login       Log in to a Docker registry\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n</code></pre>\n",
      "id": 29
    },
    {
      "path": "SysAdmin/Linux/easy-deployment.md",
      "url": "SysAdmin/Linux/easy-deployment.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n  \n### Continuous Integration the quick and easy way...  \nAssuming your codebase is in /www/$(hostname)  \n  \n#### Optionally, install Yarn. Othwerwise continue and use NPM:  \n```  \ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add  \necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list  \nsudo apt-get update && sudo apt-get install yarn  \n```  \n#### /etc/crontab:  \n```  \n@reboot root bash /www/$(hostname)/_cron/deploy.sh  \n```  \n#### /www/ps-api/_cron/deploy.sh:  \n```  \neval \"$(ssh-agent -s)\"  \nssh-add ~/.ssh/gitlab  \n  \ncd /www/$(hostname)  \ngit reset HEAD -\\-hard;  \ngit pull  \nnpm install  \n```  \n#### /www/ps-api/_deploy.js  \n```  \nvar fs = require('fs');  \nvar express = require('express');  \nvar http = require('http');  \nvar app = express();  \n  \napp.set('port', 9999);  \n  \napp.post('/_deploy', function(req, res) {  \n  \n    // done  \n    res.status(200).json({  \n        message: 'Github Hook received!'  \n    });  \n  \n    // apply  \n    var spawn = require('child_process').spawn,  \n        deploy = spawn('sh', ['_deploy.sh']);  \n  \n});  \n  \nhttp.createServer(app).listen(app.get('port'), function() {  \n    console.log('Express server listening on port ' + app.get('port'));  \n});  \n```  \n#### So,  \nyour _deploy.js Node script will be listening to port http://YOUR-DOMAIN:9999/_deploy  \n  \n#### Then,  \nyour GitHub (or GitLab, or CMS) account will make a POST request to this url, which will trigger this script to run, which will trigger the \"deploy.sh\" script to run, which will GIT reset and pull the entire directory from your latest change in your repository.  \n",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n<h3>Continuous Integration the quick and easy way…</h3>\n<p>Assuming your codebase is in /www/$(hostname)</p>\n<h4>Optionally, install Yarn. Othwerwise continue and use NPM:</h4>\n<pre><code>curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add  \necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list  \nsudo apt-get update &amp;&amp; sudo apt-get install yarn  \n</code></pre>\n<h4>/etc/crontab:</h4>\n<pre><code>@reboot root bash /www/$(hostname)/_cron/deploy.sh  \n</code></pre>\n<h4>/www/ps-api/_cron/deploy.sh:</h4>\n<pre><code>eval &quot;$(ssh-agent -s)&quot;  \nssh-add ~/.ssh/gitlab  \n  \ncd /www/$(hostname)  \ngit reset HEAD -\\-hard;  \ngit pull  \nnpm install  \n</code></pre>\n<h4>/www/ps-api/_deploy.js</h4>\n<pre><code>var fs = require('fs');  \nvar express = require('express');  \nvar http = require('http');  \nvar app = express();  \n  \napp.set('port', 9999);  \n  \napp.post('/_deploy', function(req, res) {  \n  \n    // done  \n    res.status(200).json({  \n        message: 'Github Hook received!'  \n    });  \n  \n    // apply  \n    var spawn = require('child_process').spawn,  \n        deploy = spawn('sh', ['_deploy.sh']);  \n  \n});  \n  \nhttp.createServer(app).listen(app.get('port'), function() {  \n    console.log('Express server listening on port ' + app.get('port'));  \n});  \n</code></pre>\n<h4>So,</h4>\n<p>your _deploy.js Node script will be listening to port <a href=\"http://YOUR-DOMAIN:9999/_deploy\">http://YOUR-DOMAIN:9999/_deploy</a></p>\n<h4>Then,</h4>\n<p>your GitHub (or GitLab, or CMS) account will make a POST request to this url, which will trigger this script to run, which will trigger the “<a href=\"http://deploy.sh\">deploy.sh</a>” script to run, which will GIT reset and pull the entire directory from your latest change in your repository.</p>\n",
      "id": 30
    },
    {
      "path": "SysAdmin/Linux/linux-from-scratch.md",
      "url": "SysAdmin/Linux/linux-from-scratch.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n  \n",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n",
      "id": 31
    },
    {
      "path": "SysAdmin/Ports.md",
      "url": "SysAdmin/Ports.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n  \n**Servers usually serve incoming visitor web traffic on port 80. So, http://google.com is the same as http://google.com:80**  \n<br />  \n  \n**However**, on your local Macbook, ports below **1000** are blocked. So, running a Node webserver on port **80** will not work. The browser url will try to go to port 80, but that request will not find its way to your system process.  \n<br />  \n  \n**That's ok, we can run our server on port 1080 instead.**  \n<br />  \n  \nBut if we want to run the server at just `http://localhost`, not `http://localhost:1080`? Then we have to redirect all incoming requests from port 80 to port 1080:  \n  \n```  \niptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 1080  \niptables -A PREROUTING -t nat -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 1443  \nufw allow 80/tcp  \nufw allow 443/tcp  \n```  \n  \n",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n<p><strong>Servers usually serve incoming visitor web traffic on port 80. So, <a href=\"http://google.com\">http://google.com</a> is the same as <a href=\"http://google.com:80\">http://google.com:80</a></strong><br>\n<br /></p>\n<p><strong>However</strong>, on your local Macbook, ports below <strong>1000</strong> are blocked. So, running a Node webserver on port <strong>80</strong> will not work. The browser url will try to go to port 80, but that request will not find its way to your system process.<br>\n<br /></p>\n<p><strong>That’s ok, we can run our server on port 1080 instead.</strong><br>\n<br /></p>\n<p>But if we want to run the server at just <code>http://localhost</code>, not <code>http://localhost:1080</code>? Then we have to redirect all incoming requests from port 80 to port 1080:</p>\n<pre><code>iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 1080  \niptables -A PREROUTING -t nat -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 1443  \nufw allow 80/tcp  \nufw allow 443/tcp  \n</code></pre>\n",
      "id": 32
    },
    {
      "path": "SysAdmin/SSL.md",
      "url": "SysAdmin/SSL.html",
      "content": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n  \nComing soon...  \n  \nhttps://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04",
      "html": "<script>window.scrollTo(0,document.body.scrollHeight);</script>  \n<p>Coming soon…</p>\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04</a></p>\n",
      "id": 33
    }
  ]
}