{"version":3,"sources":["webpack:///./src/containers/Admin/EditDomain/DomExt.js","webpack:///./src/containers/Admin/EditDomain/EditDomain.styled.js","webpack:///./src/containers/Admin/EditDomain/AllDomains.js","webpack:///./src/containers/Admin/EditDomain/EditDomainResults.js","webpack:///./src/containers/Admin/EditDomain/EditDomain.js","webpack:///./src/containers/Admin/EditDomain/index.js","webpack:///./src/pages/edit_domain.js"],"names":["DomExt","render","this","props","domext","className","to","onClick","window","isLoading","React","Component","Styled","styled","div","AllDomains","that","dom","tlds_all","map","d","i","key","row","TextArea","Input","state","synsDict","type","placeholder","value","syns1","onChange","event","setState","target","onKeyPress","a","submit_state_dom","icon","faPen","style","transform","faSave","Object","keys","length","entries","tuple","list","userSelect","faArrowDown","str","indexOf","PosWord","word","replace","faArrowUp","rows","syns","EditDomain","api_actions","data_domain_edit","res","data","getData","gotData","trim","Array","isArray","w","filter","join","scrollTo","top","behavior","gotDataDict","tld","data_domain_get","data_domain_syns_dict","getAllDomains","data_domains_all","doms","all_domains","componentDidMount","componentDidUpdate","prevProps","last","next","PageContent","EditDomainResults","Search","domains","hideInput","cue","connect","domain","tlds_user","dispatch","word_actions","bindActionCreators","ui_actions","RootIndex","Layout","location"],"mappings":"oIAGMA,E,gLACJC,OAAA,WACE,OAAKC,KAAKC,MAAMC,OAId,8BAIE,0BAAMC,UAAW,WACf,kBAAC,IAAD,CACEC,GAAE,oBAAsBJ,KAAKC,MAAMC,OACnCG,QAAS,WACPC,OAAOC,UAAU,YAGlBP,KAAKC,MAAMC,OANd,QARG,M,GAHQM,IAAMC,WAyBZX,O,2QC1BFY,G,oBAASC,EAAOC,IAAV,+EAAGD,CAAH,u9B,gECsBJE,E,gLApBbd,OAAA,WAAU,IAAD,EACaC,KAAKC,MAAnBa,EADC,EACDA,KAAMC,EADL,EACKA,IACZ,OAAKD,EAAKb,MAAMC,OAId,6BAASC,UAAW,8BAClB,6BACE,8CAEF,uBAAGA,UAAW,yBACXW,EAAKE,SAASC,KAAI,SAACC,EAAGC,GAAJ,OACjB,kBAACrB,EAAA,EAAD,CAAQsB,IAAKF,EAAIC,EAAGE,IAAKH,EAAGhB,OAAQa,EAAIK,WATvC,M,GAJYZ,IAAMC,W,wVCMvBa,EAAaC,IAAbD,SAEO,WAAUrB,GAAO,IAKxBa,EAASb,EAATa,KALwB,EAMNA,EAAKU,MAAvBT,EANwB,EAMxBA,IAAKU,EANmB,EAMnBA,SAKX,OACE,oCACE,kBAACf,EAAD,CAAQP,UAAU,sBAIhB,6BAASA,UAAW,8BAClB,sCAAYY,EAAIK,IAAhB,sDACA,yBAAKjB,UAAW,kBACd,0BAAMA,UAAW,iCACf,kBAAC,IAAD,CACEuB,KAAM,OACNC,YAAa,iDACbC,MAAOb,EAAIc,MACXC,SAAU,SAACC,GACTjB,EAAKkB,SAAS,CACZjB,IAAI,OAAD,UACEA,EADF,CAEDc,MAAOE,EAAME,OAAOL,WAI1BM,WAAU,6BAAE,WAAOH,GAAP,SAAAI,EAAA,sDACQ,UAAdJ,EAAMX,KACRN,EAAKsB,mBAFG,2CAAF,wDAMZ,kBAAC,IAAD,CACEV,KAAM,UACNrB,QAAO,YAAE,sBAAA8B,EAAA,sDACPrB,EAAKsB,mBADE,4CAIT,kBAAC,IAAD,CAAIC,KAAMC,IAAOnC,UAAU,QAAQoC,MAAO,CAAEC,UAAW,iBACvD,kCACA,kBAAC,IAAD,CAAIH,KAAMI,IAAQtC,UAAU,SAASoC,MAAO,CAAEC,UAAW,qBAShEf,GAAYiB,OAAOC,KAAKlB,GAAUmB,OAAS,GAC1C,6BAASzC,UAAW,8BAClB,yBAAKA,UAAU,OAAf,kBACiB,+BAAKY,EAAIK,KAD1B,kDACkF,KAElF,yBAAKjB,UAAW,iCACbuC,OAAOG,QAAQpB,GAAUR,KAAI,SAAC6B,EAAO3B,GACpC,IAAIC,EAAM0B,EAAM,GACZC,EAAOD,EAAM,GACjB,OACE,yBAAK1B,IAAKA,EAAMD,EAAI,MAAOhB,UAAU,UACnC,wBAAIA,UAAU,UAAUoC,MAAO,CAAES,WAAY,SAC3C,kBAAC,IAAD,CAAM5C,GAAI,mBAAqBgB,EAAKa,OAAO,UACxCb,EADH,KAEE,kBAAC,IAAD,CAAIiB,KAAMY,IAAa9C,UAAU,cAAcoC,MAAO,CAAEC,UAAW,mBAGvE,6BACGO,EAAK9B,KAAI,SAACiC,EAAK/B,GAAN,OACa,IAArB+B,EAAIC,QAAQ,KACV,kBAACC,EAAA,EAAD,CAAShC,IAAK8B,EAAM/B,EAAI,MAAOkC,KAAMH,EAAK7B,IAAK,CAAED,IAAKA,GAAOjB,UAAU,kBACpE+C,EADH,KAIA,yBAAK9B,IAAK8B,EAAM/B,EAAI,MAAOhB,UAAU,kBAClC+C,EAAII,QAAQ,KAAM,SAK3B,wBAAInD,UAAU,UAAUoC,MAAO,CAAES,WAAY,SAC3C,kBAAC,IAAD,CAAM5C,GAAI,mBAAqBgB,EAAKa,OAAO,UACzC,kBAAC,IAAD,CAAII,KAAMkB,IAAWpD,UAAU,YAAYoC,MAAO,CAAEC,UAAW,iBADjE,KAEmBpB,UAajC,6BAASjB,UAAW,8BAClB,sCAAYY,EAAIK,IAAhB,iFACA,yBAAKjB,UAAW,UACd,0BAAMA,UAAW,iCACf,kBAACmB,EAAD,CACEK,YAAY,iDACZ6B,KAAM,GACN5B,MAAOb,EAAI0C,KACX3B,SAAU,SAACC,GACTjB,EAAKkB,SAAS,CACZjB,IAAI,OAAD,UACEA,EADF,CAED0C,KAAM1B,EAAME,OAAOL,WAIzBM,WAAU,6BAAE,WAAOH,GAAP,SAAAI,EAAA,sDACQ,UAAdJ,EAAMX,KACRN,EAAKsB,mBAFG,2CAAF,wDAMZ,kBAAC,IAAD,CACEV,KAAM,UACNrB,QAAO,YAAE,sBAAA8B,EAAA,sDACPrB,EAAKsB,mBADE,4CAIT,kBAAC,IAAD,CAAIC,KAAMC,IAAOnC,UAAU,QAAQoC,MAAO,CAAEC,UAAW,iBACvD,kCACA,kBAAC,IAAD,CAAIH,KAAMI,IAAQtC,UAAU,SAASoC,MAAO,CAAEC,UAAW,qBASjE,kBAAC,EAAD,CAAYzB,IAAKA,EAAKD,KAAMA,O,gUC7I9B4C,E,oBACJ,WAAYzD,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAQFmC,iBATmB,YASA,4BAAAD,EAAA,sEACD,EAAKlC,MAAM0D,YAAYC,iBAAiB,EAAKpC,MAAMT,KADlD,QACb8C,EADa,SAENA,EAAIC,MACb,EAAKC,UAHU,2CATA,EAenBC,QAAU,SAACjD,GAET,IAAI0C,EAAO1C,EAAI0C,MAAQ1C,EAAI0C,KAAKQ,OAAS,MAAMX,QAAQ,QAAS,KAAO,GACnEzB,EAAQqC,MAAMC,QAAQpD,EAAIc,OAASd,EAAIc,MAAQ,GAEnD,EAAKG,SAAS,CACZjB,IAAI,OAAD,UACEA,EADF,CAGD0C,KAAMA,EAEN5B,MACEA,EACGZ,KAAI,SAACmD,GAAD,OAAOA,EAAEH,UACbI,QAAO,SAACD,GAAD,QAASA,KAChBE,KAAK,OAASzC,EAAMe,OAAS,KAAO,QAI7CtC,OAAOiE,SAAS,CACdC,IAAK,EACLC,SAAU,YApCK,EAuCnBC,YAAc,SAAC3D,GAEb,EAAKiB,SAAS,CACZP,SAAUV,KA1CK,EA6CnBgD,QA7CmB,YA6CT,gCAAA5B,EAAA,2DAEFwC,EAAQ,EAAK1E,MAAb0E,KAFE,iCAKU,EAAK1E,MAAM0D,YAAYiB,gBAAgBD,GALjD,cAKF5D,EALE,SAMKA,EAAIK,KACb,EAAK4C,QAAQjD,GAPT,SAUW,EAAKd,MAAM0D,YAAYkB,sBAAsBF,GAVxD,QAUFb,EAVE,SAYJ,EAAKY,YAAYZ,GAZb,4CA7CS,EA6DnBgB,cA7DmB,YA6DH,4BAAA3C,EAAA,sEACG,EAAKlC,MAAM0D,YAAYoB,mBAD1B,OACVC,EADU,OAEd,EAAKhD,SAAS,CACZiD,YAAaD,GAAQ,KAHT,2CA3Dd,EAAKxD,MAAQ,CACXC,SAAU,GACVV,IAAK,GACLkE,YAAa,IALE,E,kHAoEnBC,kBAAA,WAIElF,KAAK8E,gBAED9E,KAAKC,MAAM0E,KACb3E,KAAK+D,W,EAIToB,mBAAA,SAAmBC,GACjB,IAAIC,EAAOD,EAAUT,IACjBW,EAAOtF,KAAKC,MAAM0E,IAClBW,GAAQA,IAASD,GACnBrF,KAAK+D,W,EAIThE,OAAA,WAAU,IACF4E,EAAQ3E,KAAKC,MAAb0E,IACA5D,EAAQf,KAAKwB,MAAbT,IAKFwE,EAAc,KAqBlB,OANEA,EAbGZ,EAIK5D,GAAQA,EAAIK,IASN,kBAACoE,EAAD,CAAmB1E,KAAMd,OAPrC,yBAAKG,UAAU,gBAAf,cACa,2BAAIwE,GADjB,KALY,yBAAKxE,UAAU,gBAAf,KAmBd,oCACE,kBAAC,IAAD,KACE,kBAACsF,EAAA,EAAD,iBACMzF,KAAKC,MADX,CAEEyF,SAAS,EACTC,WAAW,EACXC,IAAK,CAAC,0BAAMxE,IAAI,KAAV,8CAIV,kBAAC,IAAD,KAAamE,K,GA/HI/E,IAAMC,WCThBiD,ED8JAmC,aARS,SAAUrE,GAChC,MAAO,CACLmD,IAAKjC,OAAOC,KAAKnB,EAAMsE,OAAOC,WAAW,GACzCA,UAAWvE,EAAMsE,OAAOC,UACxB/E,SAAUQ,EAAMsE,OAAO9E,aAZA,SAACgF,GAC1B,MAAO,CACLC,aAAcC,6BAAmBD,EAAcD,GAC/CG,WAAYD,6BAAmBC,EAAYH,GAC3CrC,YAAauC,6BAAmBvC,IAAaqC,MAYlCH,CAA6CnC,G,IE5JtD0C,E,gLACJrG,OAAA,WACE,OACE,kBAACsG,EAAA,EAAD,CAAQC,SAAUtG,KAAKC,MAAMqG,UAC3B,kBAAC,EAAD,CAAYA,SAAUtG,KAAKC,MAAMqG,a,GAJjB9F,IAAMC,WAUf2F","file":"component---src-pages-edit-domain-js-e04d4bab9fb7f52d780a.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nclass DomExt extends React.Component {\n  render() {\n    if (!this.props.domext) {\n      return null\n    }\n    return (\n      <span>\n\t\t\t\t{/*\n\t\t\t\t * word\n\t\t\t\t*/}\n        <span className={'posword'}>\n          <Link\n            to={`/edit_domain?tld=${this.props.domext}`}\n            onClick={() => {\n              window.isLoading('render')\n            }}\n          >\n            {this.props.domext},&nbsp;\n          </Link>\n\t\t\t\t</span>\n\t\t\t</span>\n    )\n  }\n}\n\nexport default DomExt\n","import styled from 'styled-components';\n\nexport const Styled = styled.div`\n  font-size: 1rem;\n  position: relative;\n  padding-top: 1.125rem;\n  \n  h3 {\n    font-size: 1em;\n    font-weight:bold;\n    line-height: 2.67rem;\n    color: var(--color-dark);\n  }\n  .cue {\n    color: var(--color-light);\n  }\n\n  .columns {\n    //width: 3000px;\n  }\n  .column {\n    overflow: visible;\n    width: 200px;\n    margin: 0 30px 0 0;\n    //flex-grow: 0;\n  }\n  .dictKey {\n    margin: 1rem 0 0;\n    line-height: 1.75rem;\n    font-weight: bold;\n  }\n  .dictLine {\n    display:block;\n    &a&:hover{\n      color: var(--color-link);\n    }\n    &.syns2 {\n      white-space: pre;\n      font-size: 1.125rem;\n      color: var(--color-dark);\n      margin: 1.125rem 0 0 0;\n      line-height: 1.125rem;\n      padding-left: 0;\n      .posword {\n        padding-right: 0.5rem;\n      }\n    }\n    &.syns3{\n      font-size: 1rem;\n      color: var(--color-light);\n      white-space: pre;\n      margin: 0.125rem 0 0 0;\n      line-height: 1.125rem;\n      padding-left: 0.75rem;\n    }\n  }\n\n  .domain-section {\n    margin: 0 0 1rem 0;\n    padding: 1rem 0;\n    &:first-child {\n      padding-top: 0;\n    }\n    &:last-child {\n      border: none;\n    }\n    > .flexrow.posDiv {\n      position: absolute;\n      left: 0;\n    }\n  }\n  .domain-syns-paragraph {\n    line-height: 1.9rem;\n    > span {\n      color: var(--color-light);\n      padding-right: 0.5rem;\n      display: inline-block;\n      > span {\n        color: var(--color-dark);\n        font-size: 1.1rem;\n        display: inline-block;\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport DomExt from \"./DomExt\"\n\nclass AllDomains extends React.Component {\n  render() {\n    let { that, dom } = this.props\n    if (!that.props.domext) {\n      return null\n    }\n    return (\n      <section className={\"domain-section domain-view\"}>\n        <div>\n          <b>all domains: &nbsp;</b>\n        </div>\n        <p className={\"domain-syns-paragraph\"}>\n          {that.tlds_all.map((d, i) => (\n            <DomExt key={d + i} row={d} domext={dom.key} />\n          ))}\n        </p>\n      </section>\n    )\n  }\n}\n\nexport default AllDomains\n","import { Styled } from \"./EditDomain.styled\"\nimport { Button, Input } from \"antd\"\nimport { Link } from \"gatsby\"\nimport PosWord from \"src/components/EditWord/PosWord\"\nimport AllDomains from \"./AllDomains\"\nimport React from \"react\"\nimport { faPen, faSave, faArrowUp, faArrowDown } from \"@fortawesome/pro-solid-svg-icons\"\nimport { FontAwesomeIcon as FA } from \"@fortawesome/react-fontawesome\"\n\nconst { TextArea } = Input\n\nexport default function (props) {\n  /*\n   * User \"container\" state/props/methods!\n   * This \"child\" component is to simplify container's render() logic.\n   */\n  let { that } = props\n  let { dom, synsDict } = that.state\n\n  /*\n   * Render:\n   */\n  return (\n    <>\n      <Styled className=\"EditDomain content\">\n        {/*\n         * FORM (.syns1)\n         */}\n        <section className={\"domain-section domain-edit\"}>\n          <h3>Edit \".{dom.key}\" synonyms-of-synonyms (words to be extrapolated):</h3>\n          <div className={\"flexrow posDiv\"}>\n            <span className={\"flexgrow ui-field-input-group\"}>\n              <Input\n                type={\"text\"}\n                placeholder={\"comma, separated, words, to add to OK terms...\"}\n                value={dom.syns1}\n                onChange={(event) => {\n                  that.setState({\n                    dom: {\n                      ...dom,\n                      syns1: event.target.value\n                    }\n                  })\n                }}\n                onKeyPress={async (event) => {\n                  if (event.key === \"Enter\") {\n                    that.submit_state_dom()\n                  }\n                }}\n              />\n              <Button\n                type={\"primary\"}\n                onClick={async () => {\n                  that.submit_state_dom()\n                }}\n              >\n                <FA icon={faPen} className=\"faPen\" style={{ transform: \"scale(0.85)\" }} />\n                <b>&nbsp;+&nbsp;</b>\n                <FA icon={faSave} className=\"faSave\" style={{ transform: \"scale(0.85)\" }} />\n              </Button>\n            </span>\n          </div>\n        </section>\n\n        {/*\n         * RESULTS (synonyms of each word)\n         */}\n        {synsDict && Object.keys(synsDict).length > 0 && (\n          <section className={\"domain-section domain-view\"}>\n            <div className=\"cue\">\n              user will see \"<b>.{dom.key}</b>\" extension if they type in any of these words:{\" \"}\n            </div>\n            <div className={\"domain-syns-paragraph columns\"}>\n              {Object.entries(synsDict).map((tuple, i) => {\n                let key = tuple[0]\n                let list = tuple[1]\n                return (\n                  <div key={key + i + \"col\"} className=\"column\">\n                    <h3 className=\"dictKey\" style={{ userSelect: \"none\" }}>\n                      <Link to={\"/edit_word?word=\" + key} target=\"_blank\">\n                        {key}&thinsp;&thinsp;\n                        <FA icon={faArrowDown} className=\"faArrowDown\" style={{ transform: \"scale(0.85)\" }} />\n                      </Link>\n                    </h3>\n                    <div>\n                      {list.map((str, i) =>\n                        str.indexOf(\"_\") !== 0 ? (\n                          <PosWord key={str + i + \"str\"} word={str} row={{ key: key }} className=\"dictLine syns2\">\n                            {str},\n                          </PosWord>\n                        ) : (\n                          <div key={str + i + \"str\"} className=\"dictLine syns3\">\n                            {str.replace(/_/g, \"\")}\n                          </div>\n                        )\n                      )}\n                    </div>\n                    <h3 className=\"dictKey\" style={{ userSelect: \"none\" }}>\n                      <Link to={\"/edit_word?word=\" + key} target=\"_blank\">\n                        <FA icon={faArrowUp} className=\"faArrowUp\" style={{ transform: \"scale(0.85)\" }} />\n                        &thinsp;&thinsp;{key}\n                      </Link>\n                    </h3>\n                  </div>\n                )\n              })}\n            </div>\n          </section>\n        )}\n\n        {/*\n         * FORM (.syns)\n         */}\n        <section className={\"domain-section domain-edit\"}>\n          <h3>Edit \".{dom.key}\" direct-synonyms (these words will be used as-is, will NOT be extrapolated):</h3>\n          <div className={\"posDiv\"}>\n            <span className={\"flexgrow ui-field-input-group\"}>\n              <TextArea\n                placeholder=\"comma, separated, words, to add to OK terms...\"\n                rows={20}\n                value={dom.syns}\n                onChange={(event) => {\n                  that.setState({\n                    dom: {\n                      ...dom,\n                      syns: event.target.value\n                    }\n                  })\n                }}\n                onKeyPress={async (event) => {\n                  if (event.key === \"Enter\") {\n                    that.submit_state_dom()\n                  }\n                }}\n              />\n              <Button\n                type={\"primary\"}\n                onClick={async () => {\n                  that.submit_state_dom()\n                }}\n              >\n                <FA icon={faPen} className=\"faPen\" style={{ transform: \"scale(0.85)\" }} />\n                <b>&nbsp;+&nbsp;</b>\n                <FA icon={faSave} className=\"faSave\" style={{ transform: \"scale(0.85)\" }} />\n              </Button>\n            </span>\n          </div>\n        </section>\n\n        {/*\n         * All Domains\n         */}\n        <AllDomains dom={dom} that={that} />\n      </Styled>\n    </>\n  )\n}\n","import React from \"react\"\nimport { bindActionCreators } from \"redux\"\nimport { connect } from \"react-redux\"\nimport * as word_actions from \"src/redux/actions/word\"\nimport * as ui_actions from \"src/redux/actions/ui\"\nimport api_actions from \"src/redux/actions/api\"\nimport { StyledPage, StyledSearch } from \"../../../components/Layout.styled\"\nimport Search from \"../../../components/Search\"\nimport EditDomainResults from \"./EditDomainResults\"\n// import WordPoss from \"../../../components/WordPoss\"\n\nclass EditDomain extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      synsDict: {},\n      dom: {},\n      all_domains: []\n    }\n  }\n\n  submit_state_dom = async () => {\n    let res = await this.props.api_actions.data_domain_edit(this.state.dom)\n    if (res && res.data) {\n      this.getData()\n    }\n  }\n  gotData = (dom) => {\n    // dom is the DB row, from BE\n    let syns = dom.syns ? (dom.syns.trim() + \", \").replace(/[,]+/g, \",\") : \"\"\n    let syns1 = Array.isArray(dom.syns1) ? dom.syns1 : []\n    // show new data\n    this.setState({\n      dom: {\n        ...dom,\n        // syns\n        syns: syns,\n        // convert syns1 to string\n        syns1:\n          syns1\n            .map((w) => w.trim())\n            .filter((w) => !!w)\n            .join(\", \") + (syns1.length ? \", \" : \"\")\n      }\n    })\n    // scroll to top\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    })\n  }\n  gotDataDict = (dom) => {\n    // show new data\n    this.setState({\n      synsDict: dom\n    })\n  }\n  getData = async () => {\n    // get data\n    let { tld } = this.props\n    if (tld) {\n      // get row (tld, syns, syns1)\n      let dom = await this.props.api_actions.data_domain_get(tld)\n      if (dom && dom.key) {\n        this.gotData(dom)\n      }\n      // get expanded list of %ILIKE% results\n      let data = await this.props.api_actions.data_domain_syns_dict(tld)\n      if (data) {\n        this.gotDataDict(data)\n      }\n    }\n  }\n  getAllDomains = async () => {\n    let doms = await this.props.api_actions.data_domains_all()\n    this.setState({\n      all_domains: doms || []\n    })\n  }\n\n  componentDidMount() {\n    /*\n     * trigger update list of all domains from DB\n     */\n    this.getAllDomains()\n\n    if (this.props.tld) {\n      this.getData()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let last = prevProps.tld\n    let next = this.props.tld\n    if (next && next !== last) {\n      this.getData()\n    }\n  }\n\n  render() {\n    let { tld } = this.props\n    let { dom } = this.state\n\n    /*\n     * Verify content:\n     */\n    let PageContent = null\n    // nothing queried yet:\n    if (!tld) {\n      PageContent = <div className=\"page content\"> </div>\n    }\n    // no domain:\n    else if (!dom || !dom.key) {\n      PageContent = (\n        <div className=\"page content\">\n          Not found \"<b>{tld}</b>\"\n        </div>\n      )\n    }\n    // verified OK:\n    else {\n      PageContent = <EditDomainResults that={this} />\n    }\n\n    /*\n     * Render content:\n     */\n    return (\n      <>\n        <StyledSearch>\n          <Search\n            {...this.props}\n            domains={true}\n            hideInput={true}\n            cue={[<span key=\"1\">&#9757; Choose a domain extension to edit.&nbsp;</span>]}\n          />\n        </StyledSearch>\n\n        <StyledPage>{PageContent}</StyledPage>\n      </>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    word_actions: bindActionCreators(word_actions, dispatch),\n    ui_actions: bindActionCreators(ui_actions, dispatch),\n    api_actions: bindActionCreators(api_actions, dispatch)\n  }\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    tld: Object.keys(state.domain.tlds_user)[0],\n    tlds_user: state.domain.tlds_user,\n    tlds_all: state.domain.tlds_all\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditDomain)\n","import EditDomain from './EditDomain'\n\nexport default EditDomain\n","import React from 'react'\nimport Layout from '../components/Layout'\nimport EditDomain from 'src/containers/Admin/EditDomain'\n\nclass RootIndex extends React.Component {\n  render() {\n    return (\n      <Layout location={this.props.location}>\n        <EditDomain location={this.props.location} />\n      </Layout>\n    )\n  }\n}\n\nexport default RootIndex"],"sourceRoot":""}