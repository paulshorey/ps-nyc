{"version":3,"sources":["webpack:///./src/containers/Admin/EditDomain/DomExt.js","webpack:///./src/containers/Admin/EditDomain/EditDomain.styled.js","webpack:///./src/containers/Admin/EditDomain/EditDomainResults.js","webpack:///./src/containers/Admin/EditDomain/EditDomain.js","webpack:///./src/containers/Admin/EditDomain/index.js","webpack:///./src/pages/edit_domain.js"],"names":["DomExt","render","this","props","domext","className","to","onClick","window","isLoading","React","Component","Styled","styled","div","TextArea","Input","that","state","dom","synsDict","all_domains","key","type","placeholder","value","syns1","onChange","event","setState","target","onKeyPress","a","submit_state_dom","icon","faPen","style","transform","faSave","Object","keys","length","entries","map","tuple","i","list","userSelect","faArrowDown","str","indexOf","PosWord","word","row","replace","faArrowUp","rows","syns","d","EditDomain","api_actions","data_domain_edit","res","data","getData","gotData","trim","Array","isArray","w","filter","join","scrollTo","top","behavior","gotDataDict","tld","data_domain_get","data_domain_syns_dict","getAllDomains","data_domains_all","doms","componentDidMount","componentDidUpdate","prevProps","last","next","PageContent","EditDomainResults","Search","domains","hideInput","cue","connect","domain","tlds_user","dispatch","bindActionCreators","RootIndex","Layout","location"],"mappings":"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","file":"component---src-pages-edit-domain-js-7946004b6d37925c6201.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nclass DomExt extends React.Component {\n  render() {\n    if (!this.props.domext) {\n      return null\n    }\n    return (\n      <span>\n\t\t\t\t{/*\n\t\t\t\t * word\n\t\t\t\t*/}\n        <span className={'posword'}>\n          <Link\n            to={`/edit_domain?tld=${this.props.domext}`}\n            onClick={() => {\n              window.isLoading('render')\n            }}\n          >\n            {this.props.domext},&nbsp;\n          </Link>\n\t\t\t\t</span>\n\t\t\t</span>\n    )\n  }\n}\n\nexport default DomExt\n","import styled from 'styled-components';\n\nexport const Styled = styled.div`\n  font-size: 1rem;\n  position: relative;\n  padding-top: 1.125rem;\n  \n  h3 {\n    font-size: 1em;\n    font-weight:bold;\n    line-height: 2.67rem;\n    color: var(--color-dark);\n  }\n  .cue {\n    color: var(--color-light);\n  }\n\n  .columns {\n    //width: 3000px;\n  }\n  .column {\n    overflow: visible;\n    width: 200px;\n    margin: 0 30px 0 0;\n    //flex-grow: 0;\n  }\n  .dictKey {\n    margin: 1rem 0 0;\n    line-height: 1.75rem;\n    font-weight: bold;\n  }\n  .dictLine {\n    display:block;\n    &a&:hover{\n      color: var(--color-link);\n    }\n    &.syns2 {\n      white-space: pre;\n      font-size: 1.125rem;\n      color: var(--color-dark);\n      margin: 1.125rem 0 0 0;\n      line-height: 1.125rem;\n      padding-left: 0;\n      .posword {\n        padding-right: 0.5rem;\n      }\n    }\n    &.syns3{\n      font-size: 1rem;\n      color: var(--color-light);\n      white-space: pre;\n      margin: 0.125rem 0 0 0;\n      line-height: 1.125rem;\n      padding-left: 0.75rem;\n    }\n  }\n\n  .domain-section {\n    margin: 0 0 1rem 0;\n    padding: 1rem 0;\n    &:first-child {\n      padding-top: 0;\n    }\n    &:last-child {\n      border: none;\n    }\n    > .flexrow.posDiv {\n      position: absolute;\n      left: 0;\n    }\n  }\n  .domain-syns-paragraph {\n    line-height: 1.9rem;\n    > span {\n      color: var(--color-light);\n      padding-right: 0.5rem;\n      display: inline-block;\n      > span {\n        color: var(--color-dark);\n        font-size: 1.1rem;\n        display: inline-block;\n      }\n    }\n  }\n`;\n","import { Styled } from './EditDomain.styled'\nimport { Button, Input } from 'antd'\nimport { Link } from 'gatsby'\nimport PosWord from 'src/components/EditWord/PosWord'\nimport DomExt from './DomExt'\nimport React from 'react'\nimport { faPen, faSave, faArrowUp, faArrowDown } from '@fortawesome/pro-solid-svg-icons'\nimport { FontAwesomeIcon as FA } from '@fortawesome/react-fontawesome'\n\nconst { TextArea } = Input\n\nexport default function(props) {\n  /*\n   * User \"container\" state/props/methods!\n   * This \"child\" component is to simplify container's render() logic.\n   */\n  let that = props.that\n  let { dom, synsDict, all_domains } = that.state\n\n  /*\n   * Render:\n   */\n  return (\n    <>\n\t\t\t<Styled className=\"EditDomain content\">\n\t\t\t\t{/*\n\t\t\t\t * FORM (.syns1)\n\t\t\t\t */}\n        <section className={'domain-section domain-edit'}>\n\t\t\t\t\t<h3>Edit \".{dom.key}\" synonyms-of-synonyms (words to be extrapolated):</h3>\n\t\t\t\t\t<div className={'flexrow posDiv'}>\n\t\t\t\t\t\t<span className={'flexgrow ui-field-input-group'}>\n\t\t\t\t\t\t\t<Input\n                type={'text'}\n                placeholder={'comma, separated, words, to add to OK terms...'}\n                value={dom.syns1}\n                onChange={event => {\n                  that.setState({\n                    dom: {\n                      ...dom,\n                      syns1: event.target.value,\n                    },\n                  })\n                }}\n                onKeyPress={async event => {\n                  if (event.key === 'Enter') {\n                    that.submit_state_dom()\n                  }\n                }}\n              />\n\t\t\t\t\t\t\t<Button\n                type={'primary'}\n                onClick={async () => {\n                  that.submit_state_dom()\n                }}\n              >\n\t\t\t\t\t\t\t\t<FA icon={faPen} className=\"faPen\" style={{ transform: 'scale(0.85)' }} />\n\t\t\t\t\t\t\t\t<b>&nbsp;+&nbsp;</b>\n\t\t\t\t\t\t\t\t<FA icon={faSave} className=\"faSave\" style={{ transform: 'scale(0.85)' }} />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n        {/*\n\t\t\t\t * RESULTS (synonyms of each word)\n\t\t\t\t */}\n        {synsDict && Object.keys(synsDict).length > 0 && (\n          <section className={'domain-section domain-view'}>\n            <div className=\"cue\">user will see \"<b>.{dom.key}</b>\" extension if they type in any of these words: </div>\n\t\t\t\t\t\t<div className={'domain-syns-paragraph columns'}>\n\t\t\t\t\t\t\t{Object.entries(synsDict).map((tuple, i) => {\n                let key = tuple[0]\n                let list = tuple[1]\n                return (\n                  <div key={key + i + 'col'} className=\"column\">\n\t\t\t\t\t\t\t\t\t\t<h3 className=\"dictKey\" style={{ userSelect: 'none' }}>\n\t\t\t\t\t\t\t\t\t\t\t<Link to={'/edit_word?word=' + key} target=\"_blank\">\n\t\t\t\t\t\t\t\t\t\t\t\t{key}&thinsp;&thinsp;\n                        <FA icon={faArrowDown} className=\"faArrowDown\" style={{ transform: 'scale(0.85)' }} />\n\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t{list.map((str, i) => (\n                        str.indexOf('_') !== 0\n                          ? <PosWord key={str + i + 'str'} word={str} row={{ key: key }} className=\"dictLine syns2\">{str},</PosWord>\n                          : <div key={str + i + 'str'} className=\"dictLine syns3\">{str.replace(/_/g, '')}</div>\n                      ))}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<h3 className=\"dictKey\" style={{ userSelect: 'none' }}>\n\t\t\t\t\t\t\t\t\t\t\t<Link to={'/edit_word?word=' + key} target=\"_blank\">\n                        <FA icon={faArrowUp} className=\"faArrowUp\" style={{ transform: 'scale(0.85)' }} />\n                        &thinsp;&thinsp;{key}\n\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t</div>\n                )\n              })}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n        )}\n\n        {/*\n\t\t\t\t * FORM (.syns)\n\t\t\t\t */}\n        <section className={'domain-section domain-edit'}>\n\t\t\t\t\t<h3>Edit \".{dom.key}\" direct-synonyms (these words will be used as-is, will NOT be extrapolated):</h3>\n\t\t\t\t\t<div className={'posDiv'}>\n\t\t\t\t\t\t<span className={'flexgrow ui-field-input-group'}>\n\t\t\t\t\t\t\t<TextArea\n                placeholder='comma, separated, words, to add to OK terms...'\n                rows={50}\n                value={dom.syns}\n                onChange={event => {\n                  that.setState({\n                    dom: {\n                      ...dom,\n                      syns: event.target.value,\n                    },\n                  })\n                }}\n                onKeyPress={async event => {\n                  if (event.key === 'Enter') {\n                    that.submit_state_dom()\n                  }\n                }}\n              />\n\t\t\t\t\t\t\t<Button\n                type={'primary'}\n                onClick={async () => {\n                  that.submit_state_dom()\n                }}\n              >\n\t\t\t\t\t\t\t\t<FA icon={faPen} className=\"faPen\" style={{ transform: 'scale(0.85)' }} />\n\t\t\t\t\t\t\t\t<b>&nbsp;+&nbsp;</b>\n\t\t\t\t\t\t\t\t<FA icon={faSave} className=\"faSave\" style={{ transform: 'scale(0.85)' }} />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n        {/*\n\t\t\t\t * All Domains\n\t\t\t\t */}\n        {all_domains && all_domains.length > 0 && (\n          <section className={'domain-section domain-view'}>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<b>all domains: &nbsp;</b>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p className={'domain-syns-paragraph'}>\n\t\t\t\t\t\t\t{all_domains.map((d, i) => (\n                <DomExt key={d + i} row={d} domext={dom.key} />\n              ))}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</section>\n        )}\n\t\t\t</Styled>\n\t\t</>\n  )\n}\n","import React from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport api_actions from 'src/redux/actions/api'\nimport { StyledPage, StyledSearch } from '../../../components/Layout.styled'\nimport Search from '../../../components/Search'\nimport WordPoss from '../../../components/WordPoss'\nimport EditDomainResults from './EditDomainResults'\n\nclass EditDomain extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      synsDict: {},\n      dom: {},\n      all_domains: [],\n    }\n  }\n\n  submit_state_dom = async () => {\n    let res = await this.props.api_actions.data_domain_edit(this.state.dom)\n    if (res && res.data) {\n      this.getData()\n    }\n  }\n  gotData = dom => {\n    // dom is the DB row, from BE\n    let syns = dom.syns ? (dom.syns.trim() + ', ').replace(/[,]+/g, ',') : ''\n    let syns1 = Array.isArray(dom.syns1) ? dom.syns1 : []\n    // show new data\n    this.setState({\n      dom: {\n        ...dom,\n        // syns\n        syns: syns,\n        // convert syns1 to string\n        syns1:\n          syns1\n            .map(w => w.trim())\n            .filter(w => !!w)\n            .join(', ') + (syns1.length ? ', ' : ''),\n      },\n    })\n    // scroll to top\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    })\n  }\n  gotDataDict = dom => {\n    // show new data\n    this.setState({\n      synsDict: dom,\n    })\n  }\n  getData = async () => {\n    // get data\n    let { tld } = this.props\n    if (tld) {\n      // get row (tld, syns, syns1)\n      let dom = await this.props.api_actions.data_domain_get(tld)\n      if (dom && dom.key) {\n        this.gotData(dom)\n      }\n      // get expanded list of %ILIKE% results\n      let data = await this.props.api_actions.data_domain_syns_dict(tld)\n      if (data) {\n        this.gotDataDict(data)\n      }\n    }\n  }\n  getAllDomains = async () => {\n    let doms = await this.props.api_actions.data_domains_all()\n    this.setState({\n      all_domains: doms || [],\n    })\n  }\n\n  componentDidMount() {\n    this.getAllDomains()\n    if (this.props.tld) {\n      this.getData()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let last = prevProps.tld\n    let next = this.props.tld\n    if (next && next !== last) {\n      this.getData()\n    }\n  }\n\n  render() {\n    let { tld } = this.props\n    let { dom } = this.state\n\n    /*\n     * Verify content:\n     */\n    let PageContent = null\n    // nothing queried yet:\n    if (!tld) {\n      PageContent = <div className=\"page content\"> </div>\n    }\n    // no domain:\n    else if (!dom || !dom.key) {\n      PageContent = <div className=\"page content\">Not found \"<b>{tld}</b>\"</div>\n    }\n    // verified OK:\n    else {\n      PageContent = <EditDomainResults that={this} />\n    }\n\n    /*\n     * Render content:\n     */\n    return (\n      <>\n\t\t\t\t<StyledSearch>\n\t\t\t\t\t<Search\n            {...this.props}\n            domains={true}\n            hideInput={true}\n            cue={[\n              <span key=\"1\">&#9757; Choose a domain extension to edit.&nbsp;</span>,\n            ]}\n          />\n\t\t\t\t</StyledSearch>\n\n\t\t\t\t<StyledPage>{PageContent}</StyledPage>\n\t\t\t</>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    api_actions: bindActionCreators(api_actions, dispatch),\n  }\n}\n\nconst mapStateToProps = function(state) {\n  return {\n    tld: Object.keys(state.domain.tlds_user)[0],\n    tlds_user: state.domain.tlds_user,\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((EditDomain))\n","import EditDomain from './EditDomain'\n\nexport default EditDomain\n","import React from 'react'\nimport Layout from '../components/Layout'\nimport EditDomain from 'src/containers/Admin/EditDomain'\n\nclass RootIndex extends React.Component {\n  render() {\n    return (\n      <Layout location={this.props.location}>\n        <EditDomain location={this.props.location} />\n      </Layout>\n    )\n  }\n}\n\nexport default RootIndex"],"sourceRoot":""}